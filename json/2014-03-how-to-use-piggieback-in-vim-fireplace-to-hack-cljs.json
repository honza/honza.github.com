{
    "reading_time": "about one minute", 
    "month": "03", 
    "year": "2014", 
    "date": "March 20, 2014", 
    "slug": "how-to-use-piggieback-in-vim-fireplace-to-hack-cljs", 
    "contents": "<div class=\"section\" id=\"how-to-use-piggieback-in-vim-fireplace-to-hack-cljs\">\n<h1>How to use piggieback in vim-fireplace to hack&nbsp;cljs</h1>\n<p>(That&#8217;s quite a title, isn&#8217;t&nbsp;it?)</p>\n<p>If you&#8217;re using vim to write Clojure code, chances are that you&#8217;re using Tim\nPope&#8217;s vim-fireplace plugin.  It&#8217;s really great.  It stars an nREPL session in\nthe background for you and lets you evaluate a form inside of vim.  It&#8217;s super\nfast because it keeps the session around and it&#8217;s one of my favorite things\nabout writing&nbsp;Clojure.</p>\n<p>Recently, vim-fireplace received support for <a class=\"reference external\" href=\"https://github.com/cemerick/piggieback\">piggieback</a>.  Piggieback is a\nlayer on top of nREPL that gives you support for ClojureScript.  This is really\ngreat because it gives you the ability to evaluate ClojureScript code in vim\njust like your normal Clojure&nbsp;code.</p>\n<p>Alright, here is how to set it&nbsp;up:</p>\n<p><tt class=\"docutils literal\">project.clj</tt></p>\n<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defproject </span><span class=\"nv\">pig</span> <span class=\"s\">&quot;0.1.0-<span class=\"caps\">SNAPSHOT</span>&quot;</span>\n  <span class=\"ss\">:description</span> <span class=\"s\">&quot;<span class=\"caps\">FIXME</span>: write this!&quot;</span>\n  <span class=\"ss\">:url</span> <span class=\"s\">&quot;http://example.com/<span class=\"caps\">FIXME</span>&quot;</span>\n\n  <span class=\"ss\">:dependencies</span> <span class=\"p\">[[</span><span class=\"nv\">org.clojure/clojure</span> <span class=\"s\">&quot;1.5.1&quot;</span><span class=\"p\">]</span>\n                 <span class=\"p\">[</span><span class=\"nv\">com.cemerick/piggieback</span> <span class=\"s\">&quot;0.1.3&quot;</span><span class=\"p\">]]</span>\n\n  <span class=\"ss\">:plugins</span> <span class=\"p\">[[</span><span class=\"nv\">lein-cljsbuild</span> <span class=\"s\">&quot;1.0.2&quot;</span><span class=\"p\">]]</span>\n  <span class=\"ss\">:repl-options</span> <span class=\"p\">{</span><span class=\"ss\">:nrepl-middleware</span> <span class=\"p\">[</span><span class=\"nv\">cemerick.piggieback/wrap-cljs-repl</span><span class=\"p\">]}</span>\n\n  <span class=\"ss\">:source-paths</span> <span class=\"p\">[</span><span class=\"s\">&quot;src&quot;</span><span class=\"p\">]</span>\n\n  <span class=\"ss\">:cljsbuild</span> <span class=\"p\">{</span>\n    <span class=\"ss\">:builds</span> <span class=\"p\">[{</span><span class=\"ss\">:source-paths</span> <span class=\"p\">[</span><span class=\"s\">&quot;src&quot;</span><span class=\"p\">]</span>\n              <span class=\"ss\">:compiler</span> <span class=\"p\">{</span>\n                <span class=\"ss\">:target</span> <span class=\"ss\">:nodejs</span>\n                <span class=\"ss\">:optimizations</span> <span class=\"ss\">:simple</span><span class=\"p\">}}]})</span>\n</pre></div>\n<p>Pretty standard stuff.  We&#8217;re using the lein-cljsbuild plugin for automatic\ncompilation, we set up the source path and a nodejs compile&nbsp;target.</p>\n<p>Now you simply open a <tt class=\"docutils literal\">.cljs</tt> file and you can do your usual vim-fireplace\nmagic.  The first <tt class=\"docutils literal\">cpr</tt> (reload current buffer) command will connect to an\nnREPL instance and initialize the piggieback&nbsp;wrapper.</p>\n</div>\n", 
    "date_iso": "2014-03-20", 
    "title": "How to use piggieback in vim-fireplace to hack cljs", 
    "url": "/2014/03/how-to-use-piggieback-in-vim-fireplace-to-hack-cljs", 
    "day": "20", 
    "categories": [
        {
            "name": "vim", 
            "slug": "vim"
        }, 
        {
            "name": "clojure", 
            "slug": "clojure"
        }
    ]
}