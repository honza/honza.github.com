{
    "reading_time": "4 minutes", 
    "month": "07", 
    "year": "2010", 
    "date": "July 07, 2010", 
    "slug": "posterous-style-blogging-on-app-engine", 
    "contents": "<div class=\"section\" id=\"posterous-style-blogging-on-app-engine\">\n<h1>Posterous-style Blogging On App&nbsp;Engine</h1>\n<p>Posterous has been getting a lot of attention lately. Its simplicity appeals to\na wide range of users and more and more users are switching over from other\nwell-established blogging platforms such as Blogger or WordPress. In this\narticle, we will have a look at how you can replicate the Posterous\nfunctionality on App&nbsp;Engine.</p>\n<p>In case you don&#8217;t know what Posterous is, it&#8217;s very simple. It&#8217;s a blogging\ntool like Google&#8217;s Bloggeror Wordpress.com. What makes it different from the\nother services is its ridiculous simplicity. With Posterous, you don&#8217;t need to\ncreate an account. That&#8217;s because you create new posts by emailing your post to\nPosterous. It creates links for you, images sent as attachments will be\ntransformed into galleries,&nbsp;etc.</p>\n<p>I like Posterous, but my website has a lot of custom programming on the\nback-end so I&#8217;m very hesitant to switch over. And besides, I like to know how\nthings work behind the scenes. I thought it might be fun to create a system\nsimilar to Posterous&#8217; for my own blog which is, of course, hosted on App&nbsp;Engine.</p>\n<p>Here is what we are going to do. I want to be able to send an email to my own\nblog and have it turn it into a post and publish it to the&nbsp;blog.</p>\n<p><span class=\"caps\">OK</span>, let&#8217;s start with the post&nbsp;model:</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">StringProperty</span><span class=\"p\">()</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">TextProperty</span><span class=\"p\">()</span>\n    <span class=\"n\">added</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">DateTimeProperty</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">StringProperty</span><span class=\"p\">()</span>\n</pre></div>\n<p>Very straight forward. You have your title, body, author and when the post was&nbsp;published.</p>\n<p>In order to enable incoming email, you need to add a couple of lines of code to\nyour <tt class=\"docutils literal\">app.yaml</tt> file. In addition to your regular handlers, add the&nbsp;following:</p>\n<div class=\"highlight\"><pre><span class=\"l-Scalar-Plain\">inbound_services</span><span class=\"p-Indicator\">:</span>\n<span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">mail</span>\n\n<span class=\"l-Scalar-Plain\">handlers</span><span class=\"p-Indicator\">:</span>\n<span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">url</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">/_ah/mail/.+</span>\n  <span class=\"l-Scalar-Plain\">script</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">main.py</span>\n</pre></div>\n<p>The first line enables incoming email for your application. The second part is\nthe important part. On App Engine, an incoming email message is processed as a\n<span class=\"caps\">HTTP</span> <span class=\"caps\">POST</span> request. Since it&#8217;s a regular <span class=\"caps\">HTTP</span> request, we will need a handler\nfor it in the <tt class=\"docutils literal\">app.yaml</tt> file. You have several options here. You can create\na catch-all handler for all incoming email addresses (like I&#8217;ve done above), or\ncreate seperate handlers for different&nbsp;addresses.</p>\n<p>The email address that we will use is in the following format:\n<a class=\"reference external\" href=\"mailto:your_string&#64;appid.appspotmail.com\">your_string&#64;appid.appspotmail.com</a>. You should substitute the appid with your\napp&#8217;s <span class=\"caps\">ID</span>. The string before the &#8216;&#64;&#8217; symbol can be set to anything you&nbsp;want.</p>\n<p>With this out of the way, we are ready to write the actual email handler. This\nwill go into your <tt class=\"docutils literal\">main.py</tt> file which you defined in the <tt class=\"docutils literal\">app.yaml</tt>.</p>\n<p>First, some&nbsp;imports:</p>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">email</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.appengine.ext.webapp.mail_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">InboundMailHandler</span>\n</pre></div>\n<p>Then, you add the following to the list of <span class=\"caps\">URL</span> mappings in the instantiation of\nthe application&nbsp;class.</p>\n<div class=\"highlight\"><pre><span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">webapp</span><span class=\"o\">.</span><span class=\"n\">WSGIApplication</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"s\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">Index</span><span class=\"p\">),</span>\n    <span class=\"n\">EmailHandler</span><span class=\"o\">.</span><span class=\"n\">mapping</span><span class=\"p\">()</span>\n    <span class=\"p\">],</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</pre></div>\n<p>Here EmailHandler is the request handler class that will handle the incoming\nemail. The <tt class=\"docutils literal\">mapping()</tt> method will map all of the addresses and send all of\nthem to this handler class. It&#8217;s just a convenience method, no magic&nbsp;here.</p>\n<p>Now, finally, onto the actual&nbsp;handler:</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">EmailHandler</span><span class=\"p\">(</span><span class=\"n\">InboundMailHandler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mail_message</span><span class=\"p\">):</span>\n        <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"p\">()</span>\n        <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">mail_message</span><span class=\"o\">.</span><span class=\"n\">subject</span>\n        <span class=\"k\">for</span> <span class=\"n\">content_type</span><span class=\"p\">,</span> <span class=\"n\">body</span> <span class=\"ow\">in</span> <span class=\"n\">mail_message</span><span class=\"o\">.</span><span class=\"n\">bodies</span><span class=\"p\">():</span>\n            <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n        <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"s\">&#39;John Smith&#39;</span>\n        <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">()</span>\n</pre></div>\n<p>This is actually very simple. The incoming email message is saved in the\n<tt class=\"docutils literal\">mail_message</tt> variable and you can access all of the usual email metadata as\nits properties (e.g. mail_message.sender). So, we create a new post, take the\nemail&#8217;s subject and set it as the post&#8217;s title. The <tt class=\"docutils literal\">bodies()</tt> method\nextracts the body of the email and the <tt class=\"docutils literal\">decode()</tt> function will decode the\nactual body. Then we set the author and save the post in the&nbsp;datastore.</p>\n<p>Often you will want to include a link in your post, or create a list. This is\neasily accomplished with <span class=\"caps\">HTML</span> tags. However, <span class=\"caps\">HTML</span> tags are a pain, so you might\nwant to use something like&nbsp;Markdown.</p>\n<p>Adding markdown support is super easy. Download the Python\n<a class=\"reference external\" href=\"http://code.google.com/p/python-markdown2/\">Markdown library</a> and put the <tt class=\"docutils literal\">markdown2.py</tt> file in your app&#8217;s root\ndirectory. Then import it in your <tt class=\"docutils literal\">main.py</tt> file.</p>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">markdown2</span>\n</pre></div>\n<p>And change the following&nbsp;line:</p>\n<div class=\"highlight\"><pre><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n</pre></div>\n<p>to&nbsp;this:</p>\n<div class=\"highlight\"><pre><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">markdown2</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span>\n</pre></div>\n<p>And that&#8217;s&nbsp;it!</p>\n<div class=\"section\" id=\"conclusion\">\n<h2>Conclusion</h2>\n<p>This is a very simple yet effective technique and it will allow you to create\npost from anywhere. I hope you&#8217;ve enjoyed the post. Let me know if you have any\nsuggestions on how to improve&nbsp;it.</p>\n</div>\n<div class=\"section\" id=\"code\">\n<h2>Code</h2>\n<p>The complete code for this app is available on <a class=\"reference external\" href=\"https://github.com/honza/Posterous-App-Engine\">Github</a>.</p>\n</div>\n</div>\n", 
    "date_iso": "2010-07-07", 
    "title": "Posterous-style Blogging On App Engine", 
    "url": "/2010/07/posterous-style-blogging-on-app-engine", 
    "day": "07", 
    "categories": [
        {
            "name": "App Engine", 
            "slug": "app-engine"
        }, 
        {
            "name": "Code", 
            "slug": "code"
        }, 
        {
            "name": "Python", 
            "slug": "python"
        }
    ]
}