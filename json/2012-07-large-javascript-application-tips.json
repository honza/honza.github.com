{
    "reading_time": "2 minutes", 
    "month": "07", 
    "year": "2012", 
    "date": "July 16, 2012", 
    "slug": "large-javascript-application-tips", 
    "contents": "<div class=\"section\" id=\"large-javascript-application-tips\">\n<h1>Large Javascript Application&nbsp;Tips</h1>\n<p>This post isn&#8217;t going to tell you that you should use <span class=\"caps\">MVC</span> to structure your\napplication.  It isn&#8217;t going to tell you which framework to use.  It&#8217;s not\ngoing to tell you to use CoffeeScript or MongoDB.  But I&#8217;m going to talk about\nsome small helpful things you can do to your Javascript application to make\neasier to develop and&nbsp;maintain.</p>\n<div class=\"section\" id=\"naming-conventions\">\n<h2>Naming&nbsp;Conventions</h2>\n<p>Improperly naming your variables, functions and classes can make it nearly\nimpossible to navigate large portions of existing code.  You have to follow the\nchain all the way up where that variable was created (sometimes in a different\nfile) to see what type of value it holds.  By looking at a variable name, you\nshould be able to tell if it&#8217;s a class definition or an instance.  You should\nbe able to distinguish between a constant and a&nbsp;function.</p>\n</div>\n<div class=\"section\" id=\"file-dependency\">\n<h2>File&nbsp;dependency</h2>\n<p>Writing large Javascript applications for the browser is tricky because your\napplication needs to be split over multiple files and there doesn&#8217;t seem to be\na good way to manage dependencies.  When you open up a file in your project,\nyou can&#8217;t really know what Javascript code was loaded and executed before this\nfile.  Often times you find yourself looking at your build script or the\n<tt class=\"docutils literal\">head</tt> of your <span class=\"caps\">HTML</span> document to see when this file is loaded in the grand\nscheme of things.  In Python, you say <tt class=\"docutils literal\">from app import get_user</tt> to use a\nfunction from a different file or module.  In the browser, you just don&#8217;t.  I\nfind it useful to specify these kinds of dependencies at the top of each file\nwithin a simple&nbsp;comment.</p>\n<div class=\"highlight\"><pre><span class=\"c1\">// maps.js</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// This file provides the ``Maps`` namespace.</span>\n<span class=\"c1\">// It depends on jQuery and jquery.cookie.js.</span>\n<span class=\"c1\">// It depends on the ``userId`` variable from the document.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// (function($) {</span>\n<span class=\"c1\">//   ...</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"class-definition-time-and-consumption-time\">\n<h2>Class definition time and consumption&nbsp;time</h2>\n<p>There should be a clear distinction between when your classes are defined and\nwhen they are consumed.  I like to prepare all my classes and functions\nbeforehand, and then kick off the app with a single call when the document is\nready.  It&#8217;s nice to be able to tell that this is where the app&nbsp;starts.</p>\n</div>\n<div class=\"section\" id=\"namespaces\">\n<h2>Namespaces</h2>\n<p>Your entire application should be contained within a namespace.  Putting all of\nyour code under a namespace makes it easy to tell where what function or class\ndefinition is coming from.  It makes sure that you don&#8217;t pollute the global\nnamespace.  It also allows you to select which functions and variables are\ngoing to be exposed&nbsp;publicly.</p>\n</div>\n<div class=\"section\" id=\"documentation\">\n<h2>Documentation</h2>\n<p>If your application isn&#8217;t going to be open-source, you might be tempted to skip\nwriting documentation.  Adding a few comments here and there in the code can\nhelp you quickly understand what is going on and where related code might live.\nThis also helps a lot when on-boarding new developers.  When a new member of\nyour team opens up an 800-line-of-code file with zero comments, they might\ncrawl under their desk and cry (I&#8217;ve wanted to do that a few times&nbsp;before).</p>\n</div>\n<div class=\"section\" id=\"frameworks\">\n<h2>Frameworks</h2>\n<p>If you do decide to use a framework like Backbone.js, you should make sure that\nyou use it in a sane way.  When a new member joins your team, it&#8217;s really nice\nwhen you can point them to the framework&#8217;s documentation and have them start\nlearning.  Obviously, you will want to do some custom things and maybe even\nbuild extensions to the framework and that&#8217;s fine as long as it&#8217;s documented\nand&nbsp;obvious.</p>\n</div>\n<div class=\"section\" id=\"conclusion\">\n<h2>Conclusion</h2>\n<p>Thanks for&nbsp;listening</p>\n</div>\n</div>\n", 
    "date_iso": "2012-07-16", 
    "title": "Large Javascript Application Tips", 
    "url": "/2012/07/large-javascript-application-tips", 
    "day": "16", 
    "categories": [
        {
            "name": "Javascript", 
            "slug": "javascript"
        }
    ]
}