{
    "reading_time": "2 minutes", 
    "month": "01", 
    "year": "2012", 
    "date": "January 17, 2012", 
    "slug": "upgrading-your-django-media-files-to-use-a-cdn", 
    "contents": "<div class=\"section\" id=\"upgrading-your-django-media-files-to-use-a-cdn\">\n<h1>Upgrading your Django media files to use a&nbsp;<span class=\"caps\">CDN</span></h1>\n<p>I was using <a class=\"reference external\" href=\"http://readthedocs.org/docs/django-filebrowser/en/latest/\">django-filebrowser</a> on a project and my Rackspace <span class=\"caps\">VM</span> quickly ran\nout of disk space. Since the site isn&#8217;t getting much traffic at all, I didn&#8217;t\nwant to pay extra for a bigger <span class=\"caps\">VM</span>. Instead, I decided to move all of the user\nuploaded media to <a class=\"reference external\" href=\"http://www.rackspace.com/cloud/cloud_hosting_products/files/\">Rackspace Cloudfiles</a>. It&#8217;s super cheap and they have a\nnice&nbsp;<span class=\"caps\">API</span>.</p>\n<p>Now, the challenge was to make the transition from a filebrowser-based system.\nFirst of all, I knew I was going to use <a class=\"reference external\" href=\"http://django-storages.readthedocs.org/en/latest/index.html\">django-storages</a> as the new storage\nclass for my class. I played around with it on the side and it worked like a&nbsp;charm.</p>\n<p>Next, I wrote a quick little Python script to upload all of the files to\nCloudfiles. Since the filenames didn&#8217;t change at all, I could just write a\nSouth migration that would strip the <tt class=\"docutils literal\">/uploads</tt> part and be done with&nbsp;it.</p>\n<p>I had a look at the Django documentation to see what exactly a <a class=\"reference external\" href=\"https://docs.djangoproject.com/en/1.3/ref/models/fields/#filefield\">FileField</a> was.\nIt turns out it takes a Django <a class=\"reference external\" href=\"https://docs.djangoproject.com/en/1.3/ref/files/file/#django.core.files.File\">File</a> object which in turn is a thin wrapper\naround the Python built-in file object. This didn&#8217;t sound exactly easy to do. I\nwould have to open a remote file with Python&#8217;s <tt class=\"docutils literal\"><span class=\"pre\">open(&#8216;file.mp3&#8217;)</span></tt> and have\nDjango inspect it for size and file type. This is clunky at best if you\nremember that this will have to live in a South&nbsp;migration.</p>\n<p>Also worth noting is the fact that filebrowser&#8217;s model field is a subclass of\n<tt class=\"docutils literal\">CharField</tt> and has no special file-related properties or&nbsp;methods.</p>\n<p>You can&#8217;t use the <tt class=\"docutils literal\">DEFAULT_STORAGE_CLASS</tt> setting because filebrowser will\nstart yelling at you. Instead, you specify the storage class right in the new\nmodel&nbsp;field.</p>\n<div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">storages.backends.mosso</span> <span class=\"kn\">import</span> <span class=\"n\">cloudfiles_upload_to</span><span class=\"p\">,</span> <span class=\"n\">CloudFilesStorage</span>\n<span class=\"n\">cloudfiles_storage</span> <span class=\"o\">=</span> <span class=\"n\">CloudFilesStorage</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">old_field</span> <span class=\"o\">=</span> <span class=\"n\">FileBrowseField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">new_field</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"n\">cloudfiles_upload_to</span><span class=\"p\">,</span>\n            <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">cloudfiles_storage</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">)</span>\n</pre></div>\n<p>Now you can go and write your migration and Django won&#8217;t yell at you. Now we go\nback to the problem outlined above. How do you create an instance of <tt class=\"docutils literal\">File</tt>\nto pass to <tt class=\"docutils literal\">item.new_field</tt>.</p>\n<p>After hours of reading the source and debugging, I realized that you can simply\npass in the filename as a string and the storage class will do the right thing.\nIt&#8217;s actually really simple and painless. Your data migration might look\nsomething&nbsp;like:</p>\n<div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Item</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">new_field</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">old_field</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n<p>So, I was already somewhat overjoyed that this would in fact be easy and then I\ndiscovered that the change from filebrowser to django-storages doesn&#8217;t require\na schema migration. This means that if your file names are the same there is no\ndatabase change needed at all. How cool is&nbsp;that?</p>\n</div>\n", 
    "date_iso": "2012-01-17", 
    "title": "Upgrading your Django media files to use a CDN", 
    "url": "/2012/01/upgrading-your-django-media-files-to-use-a-cdn", 
    "day": "17", 
    "categories": [
        {
            "name": "Code", 
            "slug": "code"
        }, 
        {
            "name": "Django", 
            "slug": "django"
        }, 
        {
            "name": "Python", 
            "slug": "python"
        }
    ]
}