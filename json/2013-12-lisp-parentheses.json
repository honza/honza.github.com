{
    "reading_time": "about one minute", 
    "month": "12", 
    "year": "2013", 
    "date": "December 12, 2013", 
    "slug": "lisp-parentheses", 
    "contents": "<div class=\"section\" id=\"lisp-parentheses\">\n<h1>Lisp&nbsp;parentheses</h1>\n<p>Perhaps the number one reason why people are afraid to try Lisp or don&#8217;t like\nit is the huge amounts of parentheses cluttering up the code.  It&#8217;s said to be\nhard to read the code when it&#8217;s full of&nbsp;parentheses.</p>\n<p>Any experienced Lisp programmer will tell you that the parentheses disappear\nfairly early on.  After a while, you hardly notice them as something annoying.\nIn fact, going back to C-family languages will make you feel like you need to\ntype all kinds of crazy&nbsp;punctuation.</p>\n<p>While Clojure technically doesn&#8217;t use significant whitespace like Python, in\nreality, careful identation is crucial to writing clear&nbsp;code.</p>\n<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">crop-photo</span> <span class=\"p\">[</span><span class=\"nv\">user</span> <span class=\"nv\">photo</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"p\">(</span><span class=\"nf\">authenticated?</span> <span class=\"nv\">user</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"p\">(</span><span class=\"nf\">admin?</span> <span class=\"nv\">user</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nf\">crop</span> <span class=\"nv\">photo</span><span class=\"p\">))))</span>\n</pre></div>\n<p>In this snippet, there are four levels of indentation, four nested expressions.\nIt&#8217;s easy to quickly scan this function guess what it does.  When a user is\nauthenticated and when they are an admin, crop the photo.  If any of the\n<tt class=\"docutils literal\">when</tt> expressions return a <em>falsy</em> value, the whole function will return\n<tt class=\"docutils literal\">nil</tt>.  All of this is possible because Clojure uses prefix notation.  This\nmeans that the first element in the <tt class=\"docutils literal\"><span class=\"pre\">(&#8230;)</span></tt> form is the name of the function.\nTherefore, you only need to scan the beginnings of lines to see what functions\nare being called.  Also, you never have to pay attention to closing parentheses\nbecause they are all sitting together at the end of the&nbsp;function.</p>\n<p>In Clojure, it&#8217;s also idiomatic to put function arguments on new lines and\nalign&nbsp;them.</p>\n<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nf\">admin?</span> <span class=\"nv\">user</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nf\">staff?</span> <span class=\"nv\">user</span><span class=\"p\">))</span>\n</pre></div>\n<p>In this example, the <tt class=\"docutils literal\">or</tt> macro usually takes two arguments.  We put each\nargument on its own line and align them.  This way it&#8217;s visually clear what the\ncode&nbsp;does.</p>\n<p>Finally, when writing Clojure code, you rarely have to worry about matching up\nyour parentheses.  This is a job for your text editor.  Inserting a new\nexpression usually involves typing the <tt class=\"docutils literal\">(</tt> key and having its friend <tt class=\"docutils literal\">)</tt>\ninserted for&nbsp;you.</p>\n</div>\n", 
    "date_iso": "2013-12-12", 
    "title": "Lisp parentheses", 
    "url": "/2013/12/lisp-parentheses", 
    "day": "12", 
    "categories": [
        {
            "name": "lisp", 
            "slug": "lisp"
        }
    ]
}