{
    "reading_time": "about one minute", 
    "month": "04", 
    "year": "2011", 
    "date": "April 05, 2011", 
    "slug": "jslint-syntax-checker-for-vim", 
    "contents": "<div class=\"section\" id=\"jslint-syntax-checker-for-vim\">\n<h1>JSLint syntax checker for&nbsp;vim</h1>\n<p>Douglas Crockford&#8217;s <a class=\"reference external\" href=\"http://www.jslint.com/\">JSLint</a> script is almost a golden standard when it comes\nto checking the syntax and general sanity of your javascript files. Being lazy\nby nature, I got tired of copying and pasting my code into the web&nbsp;form.</p>\n<p>I wanted to be able to run the JSLint tool from the command line. JSLint itself\nis written in javascript. It&#8217;s a 6000-line beast. How do you run a javascript\nlibrary as a command line utility? The answer is <a class=\"reference external\" href=\"http://nodejs.org/\">node.js</a>.</p>\n<p>I wrote a quick little script that takes a single argument (your file) and runs\nJSLint over it, printing any errors to the console. I call it <tt class=\"docutils literal\">jslintnode.js</tt>\nand the code is on <a class=\"reference external\" href=\"https://github.com/honza/jslintnode.js\">Github</a>.</p>\n<p>Well, checking my files from the command line is certainly better than using\nthe web interface. But I still have to run it over and over. As you may know,\nI&#8217;m fanatical <a class=\"reference external\" href=\"http://www.vim.org\">vim</a> user. There is a cool plugin called <a class=\"reference external\" href=\"https://github.com/scrooloose/syntastic\">syntastic</a> which\nruns through the file you are editing each time you save it. It puts little\n<tt class=\"docutils literal\">&gt;&gt;&gt;</tt> characters next to the line you are editing which tells you that you\nscrewed up and need to fix that&nbsp;line.</p>\n<p>However, by default, syntastic uses the <tt class=\"docutils literal\">jsl</tt> utility to check javascript\nfiles. With a little bit of work, you can modify the original script to use our\n<tt class=\"docutils literal\">jslintnode.js</tt> utility.</p>\n<p>Go into the <tt class=\"docutils literal\">/syntax_checkers/</tt> directory and open up the <tt class=\"docutils literal\">javascript.vim</tt>\nfile.</p>\n<p>Change this&nbsp;line:</p>\n<div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"p\">!</span>executable<span class=\"p\">(</span><span class=\"s1\">&#39;jsl&#39;</span><span class=\"p\">)</span>\n</pre></div>\n<p>to&nbsp;this:</p>\n<div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"p\">!</span>executable<span class=\"p\">(</span><span class=\"s1\">&#39;jslintnode.js&#39;</span><span class=\"p\">)</span>\n</pre></div>\n<p>And replace the body of the <tt class=\"docutils literal\">SyntaxCheckers_javascript_GetLocList()</tt> function\nwith the&nbsp;following:</p>\n<div class=\"highlight\"><pre><span class=\"k\">let</span> <span class=\"nb\">makeprg</span> <span class=\"p\">=</span> <span class=\"s2\">&quot;jslintnode.js &quot;</span>.shellescape<span class=\"p\">(</span>expand<span class=\"p\">(</span><span class=\"s1\">&#39;%&#39;</span><span class=\"p\">))</span>\n<span class=\"k\">let</span> <span class=\"nb\">errorformat</span><span class=\"p\">=</span><span class=\"s1\">&#39;%W%f(%l): lint warning: %m,%-Z%p^,%W%f(%l): warning: %m,%-Z%p^,%E%f(%l): SyntaxError: %m,%-Z%p^,%-G&#39;</span>\n<span class=\"k\">return</span> SyntasticMake<span class=\"p\">(</span>{ <span class=\"s1\">&#39;makeprg&#39;</span>: <span class=\"nb\">makeprg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;errorformat&#39;</span>: <span class=\"nb\">errorformat</span> }<span class=\"p\">)</span>\n</pre></div>\n<p>Save and restart&nbsp;vim.</p>\n<p>That&#8217;s it. Now as you&#8217;re editing any javascript files you will get instant\nfeedback as to the quality of your code as judged by JSLint. And remember that\n<em>JSLint will hurt your feelings</em>.</p>\n</div>\n", 
    "date_iso": "2011-04-05", 
    "title": "JSLint syntax checker for vim", 
    "url": "/2011/04/jslint-syntax-checker-for-vim", 
    "day": "05", 
    "categories": [
        {
            "name": "Code", 
            "slug": "code"
        }, 
        {
            "name": "vim", 
            "slug": "vim"
        }, 
        {
            "name": "Open Source", 
            "slug": "open-source"
        }
    ]
}