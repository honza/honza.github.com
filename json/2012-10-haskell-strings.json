{
    "reading_time": "12 minutes", 
    "month": "10", 
    "year": "2012", 
    "date": "October 24, 2012", 
    "slug": "haskell-strings", 
    "contents": "<div class=\"section\" id=\"haskell-strings\">\n<h1>Haskell&nbsp;Strings</h1>\n<p>It continues to amaze me how bad Haskell is at processing strings.  One of the\nreasons I wanted to learn Haskell was to be able to write short,\ndynamic-language-like programs that execute fast once compiled.  Somehow\nrather, Haskell has failed to deliver on its promise of <em>bare metal</em> speed.  I\nmostly write scripts and utilities meant to run on my machine&#8212;these scripts\nmostly process text.  Read a file, parse it and spit something&nbsp;out.</p>\n<div class=\"section\" id=\"example\">\n<h2>Example</h2>\n<p>Let&#8217;s build a simple program that will show what I&#8217;m talking&nbsp;about.</p>\n<ul class=\"simple\">\n<li>Read a file called <tt class=\"docutils literal\">file</tt> which contains&nbsp;prose</li>\n<li>Capitalize every word in that body of&nbsp;text</li>\n<li>Print the result to&nbsp;stdout</li>\n</ul>\n<p>We will be testing our programs with a file with about 1.2 million lines of\nLorem Ipsum.  This file is around&nbsp;<span class=\"caps\">75MB</span>.</p>\n<p>Here is attemp number one.  This is really simple&nbsp;Haskell.</p>\n<div class=\"highlight\"><pre><span class=\"c1\">-- Normal.hs</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span>\n\n<span class=\"nf\">convert</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"nf\">convert</span> <span class=\"ow\">=</span> <span class=\"n\">unlines</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">convertLine</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"n\">lines</span>\n\n<span class=\"nf\">convertLine</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"nf\">convertLine</span> <span class=\"ow\">=</span> <span class=\"n\">unwords</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">convertWord</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"n\">words</span>\n\n<span class=\"nf\">convertWord</span> <span class=\"ow\">::</span> <span class=\"kt\">String</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"nf\">convertWord</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">toUpper</span> <span class=\"p\">(</span><span class=\"n\">head</span> <span class=\"n\">s</span><span class=\"p\">))</span><span class=\"kt\">:</span><span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">name</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">readFile</span> <span class=\"s\">&quot;file&quot;</span>\n    <span class=\"n\">putStr</span> <span class=\"o\">$</span> <span class=\"n\">convert</span> <span class=\"n\">name</span>\n</pre></div>\n<p>Compile and execute&nbsp;with</p>\n<pre class=\"literal-block\">\nghc -O2 -o normal Normal.hs\ntime ./normal &gt; /dev/null\n</pre>\n<p>This takes about 17 seconds.  Let&#8217;s see if we can do any better.  When you\ncomplain about Strings in Haskell being slow on some neckbeard forum, people\nwill tell you to use <tt class=\"docutils literal\">Data.Text</tt>.</p>\n<div class=\"highlight\"><pre><span class=\"c1\">-- Main.hs</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text</span> <span class=\"k\">as</span> <span class=\"n\">T</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text.<span class=\"caps\">IO</span></span> <span class=\"k\">as</span> <span class=\"n\">X</span>\n\n<span class=\"nf\">convert</span> <span class=\"ow\">::</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span>\n<span class=\"nf\">convert</span> <span class=\"ow\">=</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">unlines</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">convertLine</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">lines</span>\n\n<span class=\"nf\">convertLine</span> <span class=\"ow\">::</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span>\n<span class=\"nf\">convertLine</span> <span class=\"ow\">=</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">unwords</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">convertWord</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">words</span>\n\n<span class=\"nf\">convertWord</span> <span class=\"ow\">::</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span>\n<span class=\"nf\">convertWord</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">cons</span> <span class=\"p\">(</span><span class=\"n\">toUpper</span> <span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">head</span> <span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">tail</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">name</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">X</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;file&quot;</span>\n    <span class=\"kt\">X</span><span class=\"o\">.</span><span class=\"n\">putStr</span> <span class=\"o\">$</span> <span class=\"n\">convert</span> <span class=\"n\">name</span>\n</pre></div>\n<p>This is mostly the same as above.  Instead of using the <tt class=\"docutils literal\">String</tt> type to work\nwith text, we use the <tt class=\"docutils literal\">Data.Text.Text</tt> type.</p>\n<pre class=\"literal-block\">\nghc -O2 -o main Main.hs\ntime ./main &gt; /dev/null\n</pre>\n<p>How did it do?  One entire minute, that&#8217;s 5 times slower.  And it uses obscene\namounts of memory (around <span class=\"caps\">600MB</span> on my machine).  Let&#8217;s use lazy <span class=\"caps\">IO</span> when reading\nthe file, maybe it will&nbsp;improve.</p>\n<div class=\"highlight\"><pre><span class=\"c1\">-- change this</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text</span> <span class=\"k\">as</span> <span class=\"n\">T</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text.<span class=\"caps\">IO</span></span> <span class=\"k\">as</span> <span class=\"n\">X</span>\n\n<span class=\"c1\">-- to this</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text.Lazy</span> <span class=\"k\">as</span> <span class=\"n\">T</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text.Lazy.<span class=\"caps\">IO</span></span> <span class=\"k\">as</span> <span class=\"n\">X</span>\n</pre></div>\n<p>This clocks in at 27 seconds.  Much better than the non-lazy version.  Next\nthing to try is to ignore unicode and go for the ultimate, bare-metal speed.\nLet&#8217;s use <tt class=\"docutils literal\">ByteString</tt> instead of <tt class=\"docutils literal\">Text</tt>.</p>\n<div class=\"highlight\"><pre><span class=\"kr\">module</span> <span class=\"nn\">Byte</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString</span> <span class=\"k\">as</span> <span class=\"n\">B</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Char8</span> <span class=\"k\">as</span> <span class=\"n\">C</span>\n\n<span class=\"nf\">convert</span> <span class=\"ow\">::</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span>\n<span class=\"nf\">convert</span> <span class=\"ow\">=</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">unlines</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">convertLine</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">lines</span>\n\n<span class=\"nf\">convertLine</span> <span class=\"ow\">::</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span>\n<span class=\"nf\">convertLine</span> <span class=\"ow\">=</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">unwords</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">convertWord</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">words</span>\n\n<span class=\"nf\">convertWord</span> <span class=\"ow\">::</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span>\n<span class=\"nf\">convertWord</span> <span class=\"n\">s</span> <span class=\"ow\">=</span> <span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">cons</span> <span class=\"p\">(</span><span class=\"n\">toUpper</span> <span class=\"p\">(</span><span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">head</span> <span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"kt\">C</span><span class=\"o\">.</span><span class=\"n\">tail</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">name</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;file&quot;</span>\n    <span class=\"kt\">B</span><span class=\"o\">.</span><span class=\"n\">putStr</span> <span class=\"o\">$</span> <span class=\"n\">convert</span> <span class=\"n\">name</span>\n</pre></div>\n<p>Hm, not that much better.  27 seconds.  That&#8217;s about as good as the lazy\nversion when using <tt class=\"docutils literal\">Text</tt>.  Let&#8217;s see if we can squeeze more perfomance out\nof this with a lazy <tt class=\"docutils literal\">ByteString</tt></p>\n<div class=\"highlight\"><pre><span class=\"c1\">-- change this</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString</span> <span class=\"k\">as</span> <span class=\"n\">B</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Char8</span> <span class=\"k\">as</span> <span class=\"n\">C</span>\n\n<span class=\"c1\">-- to this</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Lazy</span> <span class=\"k\">as</span> <span class=\"n\">B</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Lazy.Char8</span> <span class=\"k\">as</span> <span class=\"n\">C</span>\n</pre></div>\n<p>This takes about 10 seconds.  Awesome.  This is the best I can do with Haskell.\n10 seconds to process 1.2 million lines of text.  I guess that&#8217;s not too&nbsp;bad.</p>\n<p><strong><span class=\"caps\">EDIT</span></strong>: Someone <a class=\"reference external\" href=\"http://www.reddit.com/r/haskell/comments/120h6i/why_is_this_simple_text_processing_program_so/c6r6rm1\">pointed out on Reddit</a> that this whole thing can be\naccomplished as a simple one-liner.  This is actually a pretty elegant&nbsp;solution.</p>\n<div class=\"highlight\"><pre><span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text.Lazy</span> <span class=\"k\">as</span> <span class=\"n\">T</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text.Lazy.<span class=\"caps\">IO</span></span> <span class=\"k\">as</span> <span class=\"n\">X</span>\n\n<span class=\"nf\">convert</span> <span class=\"ow\">::</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span>\n<span class=\"nf\">convert</span> <span class=\"ow\">=</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">tail</span> <span class=\"o\">.</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">scanl</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">isSpace</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">toUpper</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"sc\">&#39; &#39;</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">name</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">X</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;file&quot;</span>\n    <span class=\"kt\">X</span><span class=\"o\">.</span><span class=\"n\">putStr</span> <span class=\"o\">$</span> <span class=\"n\">convert</span> <span class=\"n\">name</span>\n</pre></div>\n<p>This clocks in at 8.5 seconds.  Not bad at&nbsp;all.</p>\n<p><strong><span class=\"caps\">EDIT</span> 5</strong>: Someone pointed out that I didn&#8217;t include a version of the\none-liner that uses <tt class=\"docutils literal\">ByteString</tt>.</p>\n<div class=\"highlight\"><pre><span class=\"kr\">module</span> <span class=\"nn\">Main</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Char</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.ByteString.Char8</span> <span class=\"k\">as</span> <span class=\"n\">T</span>\n\n<span class=\"nf\">convert</span> <span class=\"ow\">::</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span>\n<span class=\"nf\">convert</span> <span class=\"ow\">=</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">tail</span> <span class=\"o\">.</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">scanl</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">if</span> <span class=\"n\">isSpace</span> <span class=\"n\">a</span> <span class=\"kr\">then</span> <span class=\"n\">toUpper</span> <span class=\"n\">b</span> <span class=\"kr\">else</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"sc\">&#39; &#39;</span>\n\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n<span class=\"nf\">name</span> <span class=\"ow\">&lt;-</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">readFile</span> <span class=\"s\">&quot;file&quot;</span>\n<span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">putStr</span> <span class=\"o\">$</span> <span class=\"n\">convert</span> <span class=\"n\">name</span>\n</pre></div>\n<p>This clocks in at 3.5s on my machine.  Pretty&nbsp;fast!</p>\n</div>\n<div class=\"section\" id=\"python\">\n<h2>Python</h2>\n<p>Let&#8217;s try this in&nbsp;Python</p>\n<div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">process_line</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">])</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">process_line</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">):</span>\n    <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">capitalize</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"s\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">&#39;file&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span> <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre></div>\n<p>Execute&nbsp;with</p>\n<pre class=\"literal-block\">\n$ time python main.py &gt; /dev/null\n</pre>\n<p>Six seconds!  Six!  How can a dynamic language be so much faster than compiled&nbsp;Haskell?</p>\n<p><strong><span class=\"caps\">EDIT</span> 4</strong>: There has been some discussion on Reddit about being able to\naccomplish this task in only one line in Haskell.  It&#8217;s actually possible in\nPython,&nbsp;too.</p>\n<div class=\"highlight\"><pre><span class=\"k\">print</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">&#39;file&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span>\n</pre></div>\n<p>This clocks in at 2&nbsp;seconds.</p>\n</div>\n<div class=\"section\" id=\"javascript-and-v8\">\n<h2>Javascript and&nbsp;V8</h2>\n<div class=\"highlight\"><pre><span class=\"c1\">// main.js</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">capitalize</span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">string</span><span class=\"p\">.</span><span class=\"nx\">charAt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nx\">toUpperCase</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"nx\">string</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">processLine</span><span class=\"p\">(</span><span class=\"nx\">line</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">words</span> <span class=\"o\">=</span> <span class=\"nx\">line</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">words</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">words</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">capitalize</span><span class=\"p\">(</span><span class=\"nx\">words</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">words</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">run</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;file&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">lines</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">lines</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">lines</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">processLine</span><span class=\"p\">(</span><span class=\"nx\">lines</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">lines</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;\\n&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">run</span><span class=\"p\">());</span>\n</pre></div>\n<p>Execute it&nbsp;with:</p>\n<pre class=\"literal-block\">\n$ time node main.js &gt; /dev/null\n</pre>\n<p>Wait for it!  4.5 seconds.  I have no&nbsp;words.</p>\n</div>\n<div class=\"section\" id=\"how-about-go\">\n<h2>How about&nbsp;Go?</h2>\n<p><strong><span class=\"caps\">EDIT</span> 3</strong>: (Add this section.  Looks like this post is turning into a language\nshootout, le&nbsp;sigh).</p>\n<div class=\"highlight\"><pre><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">&quot;fmt&quot;</span>\n    <span class=\"s\">&quot;io/ioutil&quot;</span>\n    <span class=\"s\">&quot;bytes&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">body</span><span class=\"p\">,</span> <span class=\"nx\">_</span> <span class=\"o\">:=</span> <span class=\"nx\">ioutil</span><span class=\"p\">.</span><span class=\"nx\">ReadFile</span><span class=\"p\">(</span><span class=\"s\">&quot;file&quot;</span><span class=\"p\">)</span>\n    <span class=\"nx\">result</span> <span class=\"o\">:=</span> <span class=\"nx\">bytes</span><span class=\"p\">.</span><span class=\"nx\">Title</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n    <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%s&quot;</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n<p>Put this into <tt class=\"docutils literal\">title.go</tt>, compile and run&nbsp;with</p>\n<pre class=\"literal-block\">\n$ go build title.go\n$ time ./title &gt; /dev/null\n</pre>\n<p>This is around 2 seconds.  Pretty crazy performance.  Only twice the time\ncompared to&nbsp;C.</p>\n</div>\n<div class=\"section\" id=\"how-about-c\">\n<h2>How about&nbsp;C?</h2>\n<p><strong><span class=\"caps\">EDIT</span> 2</strong>: (Add this&nbsp;section)</p>\n<p><a class=\"reference external\" href=\"https://twitter.com/andrewstwrt\">Andrew Stewart</a> has graciously written a C version of this program.  Like he\n<a class=\"reference external\" href=\"https://twitter.com/andrewstwrt/status/261282584263286784\">said</a>, you should do all of your scripting in&nbsp;C.</p>\n<div class=\"highlight\"><pre><span class=\"c1\">// script.c</span>\n\n<span class=\"cp\">#include &lt;stdio.h&gt;</span>\n<span class=\"cp\">#include &lt;string.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"n\">filename</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"s\">&quot;file&quot;</span><span class=\"p\">;</span>\n    <span class=\"kt\"><span class=\"caps\">FILE</span></span> <span class=\"o\">*</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s\">&quot;r&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">file</span> <span class=\"o\">!=</span> <span class=\"nb\"><span class=\"caps\">NULL</span></span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">char</span> <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"mi\">1024</span><span class=\"p\">];</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">fgets</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span> <span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\"><span class=\"caps\">NULL</span></span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">strcspn</span> <span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">lengthOfLine</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">lengthOfLine</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isalpha</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">word</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">)</span> <span class=\"n\">toupper</span> <span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n                <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">&quot;%s</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">perror</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n<p>Compile and run this&nbsp;with:</p>\n<pre class=\"literal-block\">\n$ gcc -o script script.c\n$ time ./script &gt; /dev/null\n</pre>\n<p>Of course, this is ripping fast.  It takes about 1 second (1.05-1.15, never\nbelow&nbsp;1).</p>\n</div>\n<div class=\"section\" id=\"recap\">\n<h2>Recap</h2>\n<pre class=\"literal-block\">\nHaskell - String              17s\nHaskell - Text                60s\nHaskell - Text (Lazy)         27s\nHaskell - ByteString          27s\nHaskell - ByteString (Lazy)   10s\nHaskell - Text, scanl (Lazy)  8.5s\nHaskell - ByteString, scanl   3.5s\n\nPython -                      6s\nPython - One line, titl()     2s\n\nJavascript <span class=\"amp\">&amp;</span> V8               4.5s\n\nGo                            2s\n\nC                             1s\n</pre>\n<p>Not sure if I want to continue learning Haskell after&nbsp;this.</p>\n</div>\n</div>\n", 
    "date_iso": "2012-10-24", 
    "title": "Haskell Strings", 
    "url": "/2012/10/haskell-strings", 
    "day": "24", 
    "categories": [
        {
            "name": "Haskell", 
            "slug": "haskell"
        }, 
        {
            "name": "Code", 
            "slug": "code"
        }
    ]
}