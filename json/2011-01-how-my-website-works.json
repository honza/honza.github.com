{
    "reading_time": "about one minute", 
    "month": "01", 
    "year": "2011", 
    "date": "January 22, 2011", 
    "slug": "how-my-website-works", 
    "contents": "<div class=\"section\" id=\"how-my-website-works\">\n<h1>How My Website&nbsp;Works</h1>\n<p>I&#8217;m sure you&#8217;ve heard of static site generators like Jekyll (Ruby) or Hyde\n(Python). The benefits are obvious - your site is hosted on a cheap shared\nhosting and it can easily survive the Digg/Slashdot/Reddit effect. There is no\ndatabase latency - the browser requests a file on the server and gets it back&nbsp;immediately.</p>\n<div class=\"section\" id=\"update-2011-02-27\">\n<h2>Update&nbsp;(2011-02-27):</h2>\n<p>While I still use a static generator to power my site, it&#8217;s not a different\nengine. I got tired of launching a django server just to write a post. I wrote\na new static site generator called <a class=\"reference external\" href=\"https://github.com/honza/socrates\">Socrates</a>. Each post is now a separate\nfile written in Markdown. Socrates then runs through those files and creates a\nsite for me. I&#8217;m still using django templates. What follows is the original&nbsp;post.</p>\n</div>\n<div class=\"section\" id=\"django\">\n<h2>django</h2>\n<p>The site is a simple django blog. There is nothing really of note when it comes\nto django-specific coding. I run the django server locally when I&#8217;m editing or\nadding articles. It provides a nice <span class=\"caps\">UI</span>. It also lets me easily preview the site\nwithout generating&nbsp;anything.</p>\n</div>\n<div class=\"section\" id=\"static-generator\">\n<h2>static&nbsp;generator</h2>\n<p>When I&#8217;m happy with the state of the website and want to publish it, I run the\nstatic generator. It&#8217;s contained in the <tt class=\"docutils literal\">generate.py</tt> file. It runs through\nall possible urls and for each one it generates a static file. Each file is a\ncomplete <span class=\"caps\">HTML</span> page that the user&#8217;s browser will download. The folder structure\nis as&nbsp;follows:</p>\n<div class=\"highlight\"><pre>/2010/\n    /02/\n        post-one.html\n        post-two.html\n/2011/\n    ..\n        ..\n/about/\n    index.html\nindex.html\n/page/\n    /2/\n        index.html\n/category/\n    /android/\n        index.html\n    /code/\n        index.html\n    ..\n</pre></div>\n<p>You get the idea. This way, with an <tt class=\"docutils literal\">.htaccess</tt> file we can have the\nfollowing <span class=\"caps\">URL</span>&nbsp;structure:</p>\n<div class=\"highlight\"><pre>/2010/02/post-one/\n</pre></div>\n</div>\n<div class=\"section\" id=\"ftp-deploy-script\">\n<h2><span class=\"caps\">FTP</span> deploy&nbsp;script</h2>\n<p>And the final piece is the <tt class=\"docutils literal\">deploy.py</tt> script. It looks at the deploy\ndirectory, and with a little help from git, it figures out what files were\nchanged since the last deploy. It then takes those files and throws them up on\nthe server. A normal shared&nbsp;hosting.</p>\n</div>\n<div class=\"section\" id=\"conclusion\">\n<h2>Conclusion</h2>\n<p>You can check out the code on <a class=\"reference external\" href=\"https://github.com/honza/honza.github.com\">Github</a>.</p>\n</div>\n</div>\n", 
    "date_iso": "2011-01-22", 
    "title": "How My Website Works", 
    "url": "/2011/01/how-my-website-works", 
    "day": "22", 
    "categories": [
        {
            "name": "Code", 
            "slug": "code"
        }, 
        {
            "name": "Python", 
            "slug": "python"
        }
    ]
}