{
    "reading_time": "4 minutes", 
    "month": "10", 
    "year": "2011", 
    "date": "October 25, 2011", 
    "slug": "data-driven-javascript-applications", 
    "contents": "<div class=\"section\" id=\"data-driven-javascript-applications\">\n<h1>Data-driven javascript&nbsp;applications</h1>\n<p>Over the last few weeks, I have been trying to think of a way to design medium\nto large client-heavy web applications. There are many projects and ideas\nfloating around that are meant to help you with this and I have had a look at\nquite a few of them. I don&#8217;t mean to say that I found the best one &#8212; just one\nthat I&nbsp;like.</p>\n<p>I want to talk about data-driven applications. What I mean is that everything\nyou do somehow manipulates or shows specific data. Let me describe what I mean\nby a way of example. I have been working on a piece of photo gallery software\ncalled <a class=\"reference external\" href=\"https://github.com/honza/rembrant\">rembrant</a>. The interface for actually organizing your images into\nalbums is very&nbsp;client-heavy.</p>\n<p>The user interface is similar to that of iPhoto. The larger panel displays a\ngrid of small thumbnails. The sidebar shows a list of albums and a count of\nselected&nbsp;images.</p>\n<p>When the application loads, it makes two calls to the server: one to get a list\nof all images (image models, including metadata), and a second to get album\ninformation. Everything else in the <span class=\"caps\">UI</span> is based on these two lists. The list of\nalbums and the image grid are pretty&nbsp;self-explanatory.</p>\n<p>Once the browser has this data, we can start building out the <em>views</em>. A view\nis a little windows, or a perspective upon a piece of data. It&#8217;s meant to\ndisplay the data in a meaningful way to the user. For example, in our\napplication, there is a list of albums in the sidebar. These are represented as\nlist items with anchor&nbsp;tags:</p>\n<div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">SidebarView</span> <span class=\"o\">=</span> <span class=\"nx\">Backbone</span><span class=\"p\">.</span><span class=\"nx\">View</span><span class=\"p\">.</span><span class=\"kr\">extends</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;#sidebar&#39;</span><span class=\"p\">),</span>\n\n  <span class=\"nx\">events</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;click #new-album-link&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;newAlbum&#39;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">initialize</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"s1\">&#39;reset&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"s1\">&#39;add&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">add</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">album</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">albumView</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">SidebarAlbumView</span><span class=\"p\">({</span>\n      <span class=\"nx\">model</span><span class=\"o\">:</span> <span class=\"nx\">album</span>\n    <span class=\"p\">});</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">albumView</span><span class=\"p\">.</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">render</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">models</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">models</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</pre></div>\n<p>Here you can see we are binding the view to an existing <span class=\"caps\">DOM</span> element with an <span class=\"caps\">ID</span>\nof <em>sidebar</em>. The <tt class=\"docutils literal\">&#64;collection</tt> variable is the collection of albums we spoke\nabout earlier. The view subscribes to the collection&#8217;s <em>reset</em> and <em>add</em>\nevents. When a new album is added to the collection, the view will\nautomatically update itself. Also, the <em>events</em> hash allows us to bind event\nhandlers to <span class=\"caps\">DOM</span> elements in the&nbsp;sidebar.</p>\n<p>You may have noticed that I&#8217;m using Backbone to actually structure the\napplication. I find that Backbone provides a good compromise between structure\nand freedom to do as you please. To be honest, it took me a good while to wrap\nmy head around what Backbone is trying to do for you. It may seem a little\nwordy at times but you shouldn&#8217;t expect your application to consist of little&nbsp;code.</p>\n<p>Now, suppose we wanted to add a count to each album list item which would\nindicate how many photos are currently in that album. This is easily done by\ninspecting the photos collection. Backbone provides a simple way to filter your\ncollection based on predefined criteria. To get all photos that belong to the\nalbum with an <span class=\"caps\">ID</span> of <tt class=\"docutils literal\">1</tt>, we would&nbsp;do:</p>\n<div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">PhotoCollection</span> <span class=\"o\">=</span> <span class=\"nx\">Backbone</span><span class=\"p\">.</span><span class=\"nx\">Collection</span><span class=\"p\">.</span><span class=\"kr\">extends</span><span class=\"p\">({</span>\n  <span class=\"nx\">model</span><span class=\"o\">:</span> <span class=\"nx\">Photo</span><span class=\"p\">,</span>\n  <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/photos&#39;</span><span class=\"p\">,</span>\n\n  <span class=\"nx\">byAlbum</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">photo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">return</span> <span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">photo</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;albums&#39;</span><span class=\"p\">),</span> <span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// collection is an instance of PhotoCollection</span>\n<span class=\"nx\">photos</span> <span class=\"o\">=</span> <span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">byAlbum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</pre></div>\n<p>As you can see, this is very simple and elegant. Now, if a photo is deleted, it\nwill be removed from the collection. This will be reflected both in the grid\nand in the sidebar. It will all work automatically because all of the views are\nlooking at the same date. They are subscribed to the data&#8217;s events and react&nbsp;accordingly.</p>\n<p>The nice thing is that you don&#8217;t have to worry about changing classes, binding\ndata to <span class=\"caps\">DOM</span> elements, attaching click handlers, making <span class=\"caps\">AJAX</span> requests, none of\nthis. The difficult part about this approach is deciding what your elementary\ndata is and how you should get it. In the case of <a class=\"reference external\" href=\"https://github.com/honza/rembrant\">rembrant</a> it was pretty&nbsp;simple.</p>\n<div class=\"section\" id=\"further-reading\">\n<h2>Further&nbsp;Reading</h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://github.com/honza/rembrant\">rembrant</a> for a real world&nbsp;implementation</li>\n<li><a class=\"reference internal\" href=\"#backbone-js\">Backbone.js</a></li>\n<li><a class=\"reference internal\" href=\"#spine-js\">Spine.js</a></li>\n<li><a class=\"reference internal\" href=\"#google-web-toolkit\">Google Web&nbsp;Toolkit</a></li>\n<li><a class=\"reference internal\" href=\"#cappuccino\">Cappuccino</a></li>\n</ul>\n<span class=\"target\" id=\"cappuccino\"><span id=\"google-web-toolkit\"></span><span id=\"spine-js\"></span><span id=\"backbone-js\"></span></span></div>\n</div>\n", 
    "date_iso": "2011-10-25", 
    "title": "Data-driven javascript applications", 
    "url": "/2011/10/data-driven-javascript-applications", 
    "day": "25", 
    "categories": [
        {
            "name": "Code", 
            "slug": "code"
        }, 
        {
            "name": "Javascript", 
            "slug": "javascript"
        }
    ]
}