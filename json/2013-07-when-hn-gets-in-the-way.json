{
    "reading_time": "3 minutes", 
    "month": "07", 
    "year": "2013", 
    "date": "July 13, 2013", 
    "slug": "when-hn-gets-in-the-way", 
    "contents": "<div class=\"section\" id=\"when-hn-gets-in-the-way\">\n<h1>When <span class=\"caps\">HN</span> gets in the&nbsp;way</h1>\n<p>Reading stuff online can become addictive.  So addictive, in fact, that it can\nnegatively affect your productivity as a programmer.  Most of us go to Hacker\nNews or Reddit to get our dose of news.  We justify it by saying that it&#8217;s\n<em>research</em> or that we are <em>trying to stay current in the community</em>.  Whatever\nyour excuse, you know you have a problem when you check Hacker News every ten\nminutes just to see if anything new and awesome has been&nbsp;added.</p>\n<blockquote>\n&#8220;Close Hacker News and open a f***ing book.&#8221;\n&#8211; Steve Losh in this <a class=\"reference external\" href=\"http://devslovebacon.com/conferences/bacon-2012/talks/eve-working-around-evolution\">talk</a>.</blockquote>\n<p>Maybe you have already gotten over the initial self-denial and you have added\nsome entries to your <tt class=\"docutils literal\">/etc/hosts</tt> file to keep yourself from constantly going\nto those sites.  That&#8217;s all well and good but I think we can do&nbsp;better.</p>\n<p>You&#8217;ve already opened the tab and you are now staring at a blank error page.\nWhy not put something more useful&nbsp;there?</p>\n<p>Me, I like to learn new things.  There are way too many things I&#8217;d like to\nlearn.  Why not show a list of things I&#8217;d like to learn and allow me to click\nthrough to the&nbsp;website?</p>\n<p>I have installed nginx on my machine and set up a simple static page with a few\nlinks things like <em>Learn You a Haskell for Great Good</em> or Steve Losh&#8217;s <em>Learn\nVimscript the Hardway</em>.  Now every time I go to <span class=\"caps\">HN</span>, I see those links and am\nreminded that I wanted to spend some time learning those&nbsp;things&#8230;</p>\n<img alt=\"/img/hn_nginx.png\" src=\"/img/hn_nginx.png\" />\n<div class=\"section\" id=\"steps\">\n<h2>Steps</h2>\n<p>Install nginx.  <tt class=\"docutils literal\">brew install nginx</tt> or <tt class=\"docutils literal\">sudo <span class=\"pre\">apt-get</span> install nginx</tt> or\nwhatever might apply to&nbsp;you.</p>\n<p>Stick this in your <tt class=\"docutils literal\">nginx.conf</tt>:</p>\n<pre class=\"literal-block\">\nworker_processes  1;\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    keepalive_timeout  65;\n\n    server {\n        listen       443;\n        server_name  news.ycombinator.com;\n\n        ssl                  on;\n        ssl_certificate      /usr/local/etc/nginx/server.crt;\n        ssl_certificate_key  /usr/local/etc/nginx/server.key;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n    }\n\n    server {\n        listen       80;\n        server_name  reddit.com;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n    }\n\n}\n</pre>\n<p>If any of the sites you are blocking are served over <span class=\"caps\">SSL</span>, you will need to get\na self-signed certificate.  This is a one time setup and doesn&#8217;t really take\nthat long to&nbsp;do.</p>\n<pre class=\"literal-block\">\n$ openssl req -new -x509 -nodes -out server.crt -keyout server.key\n$ chmod 600 server.key\n</pre>\n<p>Now you just place those two files to the locations referenced in the above\n<tt class=\"docutils literal\">nginx.conf</tt> file and restart&nbsp;nginx.</p>\n<p>And here is how you can make Chrome stop complaining about your self-signed\ncertificate (<a class=\"reference external\" href=\"http://www.robpeck.com/2010/10/google-chrome-mac-os-x-and-self-signed-ssl-certificates/\">source</a>).</p>\n<ol class=\"arabic simple\">\n<li>In the address bar, click the little lock with the X. This will bring up a\nsmall information screen. Click the button that says &#8220;Certificate&nbsp;Information.&#8221;</li>\n<li>Click and drag the image to your desktop. It looks like a little&nbsp;certificate.</li>\n<li>Double-click it. This will bring up the Keychain Access utility. Enter your\npassword to unlock&nbsp;it.</li>\n<li>Be sure you add the certificate to the System keychain, not the login\nkeychain. Click &#8220;Always Trust,&#8221; even though this doesn&#8217;t seem to do&nbsp;anything.</li>\n<li>After it has been added, double-click it. You may have to authenticate\nagain. Expand the &#8220;Trust&#8221;&nbsp;section.</li>\n<li><span class=\"dquo\">&#8220;</span>When using this certificate,&#8221; set to &#8220;Always&nbsp;Trust&#8221;</li>\n<li>That&#8217;s it! Close Keychain Access and restart Chrome, and your self-signed\ncertificate should be recognized now by the&nbsp;browser.</li>\n</ol>\n</div>\n<div class=\"section\" id=\"conclusion\">\n<h2>Conclusion</h2>\n<p>Hopefully, this will be helpful to you and nudge you every now and then to\nlearn something you&#8217;ve been putting&nbsp;off.</p>\n</div>\n</div>\n", 
    "date_iso": "2013-07-13", 
    "title": "When HN gets in the way", 
    "url": "/2013/07/when-hn-gets-in-the-way", 
    "day": "13", 
    "categories": [
        {
            "name": "code", 
            "slug": "code"
        }
    ]
}