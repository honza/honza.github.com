{
    "reading_time": "3 minutes", 
    "month": "04", 
    "year": "2011", 
    "date": "April 11, 2011", 
    "slug": "why-you-should-be-using-coffeescript", 
    "contents": "<div class=\"section\" id=\"why-you-should-be-using-coffeescript\">\n<h1>Why you should be using&nbsp;CoffeeScript</h1>\n<p>I&#8217;m sure you&#8217;ve heard of CoffeeScript. Everyone is talking about it, it seems.\nIt&#8217;s a beautiful language with a simple syntax that you use to write\nJavascript. CoffeeScript compiles to Javascript. Here is why I think you should\nbe using&nbsp;it:</p>\n<div class=\"section\" id=\"readability\">\n<h2>Readability</h2>\n<p>CoffeeScript is designed to be beautiful and readable. There is no unnecessary\nfluff. Less syntax boilerplate, fewer mistakes.&nbsp;Compare:</p>\n<div class=\"highlight\"><pre><span class=\"c1\">// regular javascript</span>\n<span class=\"kd\">var</span> <span class=\"nx\">author</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;William Shakespeare&quot;</span><span class=\"p\">;</span>\n<span class=\"c1\">// coffeescript</span>\n<span class=\"nx\">author</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;William Shakespeare&quot;</span>\n</pre></div>\n<p>Indentation is also important in CoffeeScript - just like in Python. This makes\nclosures and blocks easier to&nbsp;spot.</p>\n</div>\n<div class=\"section\" id=\"valid-code\">\n<h2>Valid&nbsp;Code</h2>\n<p>There are many different coding styles when it comes to writing Javascript. The\ngood thing about CoffeeScript is that the Javascript it generates is valid - it\npasses <a class=\"reference external\" href=\"http://www.javascriptlint.com/\">Javascript Lint</a>. And if your code isn&#8217;t valid CoffeeScript, it\nwon&#8217;t compile. It&#8217;s a win-win. This is perhaps my favorite&nbsp;feature.</p>\n</div>\n<div class=\"section\" id=\"easy-class-inheritance\">\n<h2>Easy class&nbsp;inheritance</h2>\n<p>This is just great. It reminds me of Python and&nbsp;Ruby:</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nx\">Animal</span>\n    <span class=\"nv\">constructor: </span><span class=\"nf\">(@name) -&gt;</span>\n\n    <span class=\"nv\">move: </span><span class=\"nf\">(meters) -&gt;</span>\n        <span class=\"nx\">alert</span> <span class=\"nx\">@name</span> <span class=\"o\">+</span> <span class=\"s\">&quot; moved </span><span class=\"si\">#{</span><span class=\"nx\">meters</span><span class=\"si\">}</span><span class=\"s\">m.&quot;</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Dog</span> <span class=\"k\">extends</span> <span class=\"nx\">Animal</span>\n    <span class=\"nv\">move: </span><span class=\"nf\">-&gt;</span>\n        <span class=\"nx\">alert</span> <span class=\"s\">&quot;Whoof...&quot;</span>\n        <span class=\"k\">super</span> <span class=\"mi\">5</span>\n</pre></div>\n<p>Compiles to this in&nbsp;Javascript:</p>\n<div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">Animal</span><span class=\"p\">,</span> <span class=\"nx\">Dog</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">__hasProp</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">,</span> <span class=\"nx\">__extends</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">,</span> <span class=\"nx\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">__hasProp</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">))</span> <span class=\"nx\">child</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">parent</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">ctor</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">constructor</span> <span class=\"o\">=</span> <span class=\"nx\">child</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"nx\">ctor</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"nx\">parent</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">;</span>\n    <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ctor</span><span class=\"p\">;</span>\n    <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">__super__</span> <span class=\"o\">=</span> <span class=\"nx\">parent</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">child</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Animal</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Animal</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">Animal</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">move</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">meters</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot; moved &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">meters</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;m.&quot;</span><span class=\"p\">));</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">Animal</span><span class=\"p\">;</span>\n<span class=\"p\">})();</span>\n<span class=\"nx\">Dog</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">__super__</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">__extends</span><span class=\"p\">(</span><span class=\"nx\">Dog</span><span class=\"p\">,</span> <span class=\"nx\">Animal</span><span class=\"p\">);</span>\n    <span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">move</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">&quot;Whoof...&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span>\n        <span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">__super__</span><span class=\"p\">.</span><span class=\"nx\">move</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nx\">Dog</span><span class=\"p\">;</span>\n<span class=\"p\">})();</span>\n</pre></div>\n<p>Quite a difference, huh? Think how much time you&#8217;d need to understand each\nversion and make any changes required. In my mind, this encourages better code\norganization and&nbsp;structure.</p>\n</div>\n<div class=\"section\" id=\"node-js-awesomeness\">\n<h2>Node.js&nbsp;awesomeness</h2>\n<p>CoffeeScript comes with a Node.js utility, <tt class=\"docutils literal\">coffee</tt>. You can write your\nNode.js code in CoffeeScript and run it with <tt class=\"docutils literal\">coffee file.js</tt>. The utility\nwraps the CoffeeScript compiler and the <tt class=\"docutils literal\">node</tt> executable. This way, you can\nwhip up a quick server in no time.&nbsp;Genius.</p>\n</div>\n<div class=\"section\" id=\"easy-debugging\">\n<h2>Easy&nbsp;debugging</h2>\n<p>With tools like <a class=\"reference external\" href=\"http://code.google.com/webtoolkit/\">Google Web Toolkit</a>, your code compiles to <em>minified</em>\njavascript. Non-minified code is obviously easier (possible?) to read and&nbsp;debug.</p>\n</div>\n</div>\n", 
    "date_iso": "2011-04-11", 
    "title": "Why you should be using CoffeeScript", 
    "url": "/2011/04/why-you-should-be-using-coffeescript", 
    "day": "11", 
    "categories": [
        {
            "name": "Code", 
            "slug": "code"
        }, 
        {
            "name": "Javascript", 
            "slug": "javascript"
        }
    ]
}