{
    "reading_time": "2 minutes", 
    "month": "07", 
    "year": "2013", 
    "date": "July 15, 2013", 
    "slug": "how-i-back-up-my-laptop", 
    "contents": "<div class=\"section\" id=\"how-i-back-up-my-laptop\">\n<h1>How I back up my&nbsp;laptop</h1>\n<p>For the longest time, I was using Time Machine to keep copies of my files.  I\ndon&#8217;t remember ever wishing I could go back in time and retrieve an older\nversion of a file.  What does keep me up at night though is forever losing all\nof the pictures of our kids because my hard drive&nbsp;failed.</p>\n<p>I also don&#8217;t particularly like tools like Time Machine,  Carbon Copy Cloner or\nSuperDuper.  They are some kind of <span class=\"caps\">GUI</span> app that does stuff, and I like my unix&nbsp;tools.</p>\n<p>Here are my requirements for a good backup&nbsp;solution:</p>\n<ol class=\"arabic simple\">\n<li>Incremental - that means don&#8217;t overwrite older backups and don&#8217;t back up\neverything every&nbsp;time</li>\n<li>Efficient storage - I shouldn&#8217;t need 10 <span class=\"caps\">TB</span> to keep a few backups of my hard&nbsp;drive</li>\n<li>Bootable - if my hard drive fails or laptop gets stolen, I want to be able\nto back to work&nbsp;quickly</li>\n</ol>\n<p>When you do some research into this, you will see mostly suggesting rsync.  It\ncan copy your entire drive and does smart, incremental backups.  Except it\noverwrites stuff and you only get to keep the latest&nbsp;copy.</p>\n<p>Enter <a class=\"reference external\" href=\"https://github.com/bup/bup\">bup</a>.  Bup is simply amazing.  It&#8217;s based on git and it gives you\nautomatic incremental, deduplicated, shared backups.  Free and open&nbsp;source.</p>\n<p>Backing up huge virtual machines?  It only backs up what changed, not the whole\nfile.  Multiple copies of the same stuff on your hard drive?  Only needs to\nstore one copy.  Have a look at their documentation for more information about\nhow it works and what the benefits&nbsp;are.</p>\n<p>The way you use bup is by creating a tar archive stream of all your data and\nsending it to bup on stdin.  Bup takes it, chunks, deduplicates it and stores\nin a git&nbsp;repo.</p>\n<p>The canonical example goes like&nbsp;this:</p>\n<pre class=\"literal-block\">\ntar -cvf - /etc | bup split -n local-etc\n</pre>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">-n</span></tt> flag just allows you to name your&nbsp;backup.</p>\n<p>Next, we have to figure out how to tar up our entire drive.  This can be a\nlittle tricky because there are some special files which we don&#8217;t want to copy\nover.  After much trial, error and googling, I came up with the following list\nof exclusions.  Note that this only applies to <span class=\"caps\">OS</span>&nbsp;X.</p>\n<pre class=\"literal-block\">\n.Spotlight-*/\n.Trashes\n/afs/*\n/automount/*\n/cores/*\n/dev/*\n/Network/*\n/private/tmp/*\n/private/var/run/*\n/private/var/spool/postfix/*\n/private/var/vm/*\n/Previous Systems.localized\n/tmp/*\n/Volumes/*\n*/.Trash\n</pre>\n<p>Save this to <tt class=\"docutils literal\">excludes.txt</tt> and then use this tar&nbsp;command:</p>\n<pre class=\"literal-block\">\n$ tar -cvf - / -X excludes.txt | bup split -n backup\n</pre>\n<p>This takes about 1-2h on my system (<span class=\"caps\">128GB</span> <span class=\"caps\">SSD</span>, <span class=\"caps\">500GB</span> 5400rpm external).\nSubsequent backups take a lot less time.  As far as actual backup goes, we&#8217;re&nbsp;done.</p>\n<p>How do you&nbsp;restore?</p>\n<p>The nice thing about bup is that it stores your backups in a git repository.\nThis means that you can go back in history and decide from which point in time\nyou&#8217;d like to restore.  Bup allows you to spit out a tar file like&nbsp;this:</p>\n<pre class=\"literal-block\">\n$ bup join backup -o backup.tar\n</pre>\n<p>This will again take some time and use quite a bit of resources (git will eat\nyour <span class=\"caps\">RAM</span> and <span class=\"caps\">CPU</span> - a <span class=\"caps\">6GB</span> git process anyone?).  Once that is done, you can\nextract the tar to a drive that can be booted into.  This can be the internal\ndrive on a new computer or a <span class=\"caps\">GUID</span>-partitioned external&nbsp;drive.</p>\n<p>Once extracted, you just have to <em>bless</em> the data to make it&nbsp;bootable:</p>\n<pre class=\"literal-block\">\n$ sudo bless -folder /System/Library/CoreServices\n</pre>\n<p>Then, you should reboot your Mac while holding down the Option key.  This will\nshow you the boot order menu and allow you to specify where you&#8217;d like to boot&nbsp;from.</p>\n<p>Of course, you should wrap all of this in a script and run it&nbsp;periodically.</p>\n</div>\n", 
    "date_iso": "2013-07-15", 
    "title": "How I back up my laptop", 
    "url": "/2013/07/how-i-back-up-my-laptop", 
    "day": "15", 
    "categories": [
        {
            "name": "backup", 
            "slug": "backup"
        }
    ]
}