<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Honza Pokorny</title>
    <link>https://honza.ca/categories/code/</link>
    <description>Recent content in Code on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Sep 2015 12:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a Redis clone in Haskell</title>
      <link>https://honza.ca/2015/09/building-a-redis-clone-in-haskell/</link>
      <pubDate>Thu, 03 Sep 2015 12:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2015/09/building-a-redis-clone-in-haskell/</guid>
      <description>In this post, we will attempt to make a simplified clone of Redis in Haskell. Here is a set of requirements that we will aim to fullfill:
get and set operations Multi-threaded Atomic Redis compatible (implement the Redis protocol) We should be able to use the redis-cli tool to connect to our server and issue commands to it.
We are going to omit many features that Redis has. For example, there will be no disk persistence.</description>
    </item>
    
    <item>
      <title>Programming languages in a nutshell</title>
      <link>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</link>
      <pubDate>Wed, 18 Feb 2015 10:34:00 -0400</pubDate>
      
      <guid>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</guid>
      <description>Python, Ruby concurrency lol packaging lol Golang lol if you don&amp;rsquo;t like typing err := y u no generics lol imports Haskell need PhD will never be mainstream Idris only for concating lists Erlang lol syntax Javascript javascript Rust how do I do x this week? Clojure let me know when the program has started running lol if you want to build a secure thing on the web Scala lol if you think this actually improves java PHP which of these 10 fns should I use?</description>
    </item>
    
    <item>
      <title>Masterless Saltstack</title>
      <link>https://honza.ca/2013/12/masterless-saltstack/</link>
      <pubDate>Wed, 11 Dec 2013 14:55:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/12/masterless-saltstack/</guid>
      <description>This is a simple guide on how to use Saltstack, the configuration manager, in masterless mode. In most scenarios, you will use a Saltstack master to control many minions. Saltstack contains a lot of utilities to check the state of minions, gather information about them, etc.
However, if you are working on a small, single-server application, Saltstack&amp;rsquo;s master-minion setup might be overkill. You can indeed use a single minion.</description>
    </item>
    
    <item>
      <title>How to compile vim</title>
      <link>https://honza.ca/2013/07/how-to-compile-vim/</link>
      <pubDate>Thu, 18 Jul 2013 10:16:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/07/how-to-compile-vim/</guid>
      <description>&amp;hellip; from source when you&amp;rsquo;re using the homebrew-provided Python.
If you have installed Python via homebrew, your vim will compile fine but when a plugin tries to use Python to do some its work, vim will crash like this:
Not pretty.
Apparently, this is because vim will use the first Python it can find which in our case the homebrew-provided one. You can of course get a pre-compiled version and ignore this.</description>
    </item>
    
    <item>
      <title>When HN gets in the way</title>
      <link>https://honza.ca/2013/07/when-hn-gets-in-the-way/</link>
      <pubDate>Sat, 13 Jul 2013 22:06:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/07/when-hn-gets-in-the-way/</guid>
      <description>Reading stuff online can become addictive. So addictive, in fact, that it can negatively affect your productivity as a programmer. Most of us go to Hacker News or Reddit to get our dose of news. We justify it by saying that it&amp;rsquo;s research or that we are trying to stay current in the community. Whatever your excuse, you know you have a problem when you check Hacker News every ten minutes just to see if anything new and awesome has been added.</description>
    </item>
    
    <item>
      <title>I hate your code</title>
      <link>https://honza.ca/2013/06/i-hate-your-code/</link>
      <pubDate>Fri, 21 Jun 2013 10:25:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/06/i-hate-your-code/</guid>
      <description>When starting to work on an existing codebase, I often find myself in a state of despair. The code doesn&amp;rsquo;t make any sense, the programmers must have all been idiots, why on earth would they do it like this, &amp;hellip; I hate everything about the code.
I spend hours going through it, thinking to myself, I would have done a much better job writing this and making a list of changes that must be done in order for the project to conform to my standards.</description>
    </item>
    
    <item>
      <title>Haskell vs Clojure syntax</title>
      <link>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</link>
      <pubDate>Tue, 12 Feb 2013 16:33:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</guid>
      <description>Clojure has virtually zero syntax. What I mean by that is that all structures look the same: the first item in a list is the function and the rest are the arguments. This is true for variable assignment, if statements, data structures and functions themselves.
(+ 1 2) (defn greet [name] (str &amp;quot;Hello &amp;quot; name)) (def user-count 334)  However, before you can do anything useful in Haskell, you must learn all kinds of crazy syntax: function definitions, pattern matching, do forms, functors, monads, typeclasses, &amp;hellip;</description>
    </item>
    
    <item>
      <title>Haskell Strings</title>
      <link>https://honza.ca/2012/10/haskell-strings/</link>
      <pubDate>Wed, 24 Oct 2012 10:01:00 -0300</pubDate>
      
      <guid>https://honza.ca/2012/10/haskell-strings/</guid>
      <description>It continues to amaze me how bad Haskell is at processing strings. One of the reasons I wanted to learn Haskell was to be able to write short, dynamic-language-like programs that execute fast once compiled. Somehow rather, Haskell has failed to deliver on its promise of bare metal speed. I mostly write scripts and utilities meant to run on my machine&amp;mdash;these scripts mostly process text. Read a file, parse it and spit something out.</description>
    </item>
    
    <item>
      <title>On Learning Clojure</title>
      <link>https://honza.ca/2012/08/on-learning-clojure/</link>
      <pubDate>Sun, 26 Aug 2012 22:45:00 -0300</pubDate>
      
      <guid>https://honza.ca/2012/08/on-learning-clojure/</guid>
      <description>Prefix notation I&amp;rsquo;m a big fan of the prefix notation. It makes everything appear the same (if-statements, function calls , etc). I like how it removes the need for operator precedence rules.
All the parentheses Once you get into learning Clojure and you have written a small application, you don&amp;rsquo;t really see the parens anymore. Sure, sometimes you still get the Unbalanced parens error but those are easy to spot.</description>
    </item>
    
    <item>
      <title>How Rackspace deleted my server</title>
      <link>https://honza.ca/2012/02/how-rackspace-deleted-my-server/</link>
      <pubDate>Wed, 15 Feb 2012 08:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/02/how-rackspace-deleted-my-server/</guid>
      <description>I have been with Rackspace for a while now and never had problems. The server has been fast and responsive and their prices are great. However, what happened yesterday blew my mind and totally made me change how I view server providers as a whole&amp;mdash;including the likes of AWS and Heroku.
Here is how it went down.
2:07pm CST I got an email from one of my administrators that the front end was unreachable.</description>
    </item>
    
    <item>
      <title>Remap CapsLock to something useful</title>
      <link>https://honza.ca/2012/02/remap-capslock-to-something-useful/</link>
      <pubDate>Tue, 07 Feb 2012 09:30:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/02/remap-capslock-to-something-useful/</guid>
      <description>Arguably, CapsLock is the most useless key on your keyboard. I honestly can&amp;rsquo;t remember the last time I had a real use for it. If are a programmer, you should remap it to something more useful. The rest of this post will describe how to remap your CapsLock on a Mac OSX installation.
What we are going to do I&amp;rsquo;m a heavy vim user and reaching for the Esc key all the is a pain.</description>
    </item>
    
    <item>
      <title>How not to depend on PyPI</title>
      <link>https://honza.ca/2012/02/how-not-to-depend-on-pypi/</link>
      <pubDate>Sat, 04 Feb 2012 20:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/02/how-not-to-depend-on-pypi/</guid>
      <description>When deploying a Django application, you often use a requirements.txt file that contains a list of the application&amp;rsquo;s dependencies. During deployment, your provisioning system will pip install all of those to make sure that your application runs as desired.
The format of a typical requirements.txt files isn&amp;rsquo;t unlike the following
django==1.3.1 psycopg2==2.4.4 Fabric==1.3.3 ...  By default, pip will go to the Python Package Index (PyPI) and look for that package there.</description>
    </item>
    
    <item>
      <title>Upgrading your Django media files to use a CDN</title>
      <link>https://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn/</link>
      <pubDate>Tue, 17 Jan 2012 08:45:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn/</guid>
      <description>I was using django-filebrowser on a project and my Rackspace VM quickly ran out of disk space. Since the site isn&amp;rsquo;t getting much traffic at all, I didn&amp;rsquo;t want to pay extra for a bigger VM. Instead, I decided to move all of the user uploaded media to Rackspace Cloudfiles. It&amp;rsquo;s super cheap and they have a nice API.
Now, the challenge was to make the transition from a filebrowser-based system.</description>
    </item>
    
    <item>
      <title>Writing Node.js modules</title>
      <link>https://honza.ca/2012/01/writing-node.js-modules/</link>
      <pubDate>Thu, 05 Jan 2012 14:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/01/writing-node.js-modules/</guid>
      <description>To say that node.js has enjoyed a great deal of positive publicity in the last few months would most certainly be an understatement. New node.js-related projects are popping up all over the place, and there seems to be this notion that if you aren&amp;rsquo;t using it you&amp;rsquo;re not cool enough.
Over the Christmas holidays, I sat down to sort out my photo library and I wanted to make a web photo gallery to share the images with family and friends.</description>
    </item>
    
    <item>
      <title>Data-driven javascript applications</title>
      <link>https://honza.ca/2011/10/data-driven-javascript-applications/</link>
      <pubDate>Tue, 25 Oct 2011 11:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/10/data-driven-javascript-applications/</guid>
      <description>Over the last few weeks, I have been trying to think of a way to design medium to large client-heavy web applications. There are many projects and ideas floating around that are meant to help you with this and I have had a look at quite a few of them. I don&amp;rsquo;t mean to say that I found the best one &amp;mdash; just one that I like.
I want to talk about data-driven applications.</description>
    </item>
    
    <item>
      <title>Using Chef with small Django apps</title>
      <link>https://honza.ca/2011/09/using-chef-with-small-django-apps/</link>
      <pubDate>Tue, 20 Sep 2011 20:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/09/using-chef-with-small-django-apps/</guid>
      <description>This year at DjangoCon, it seemed like everybody was talking about automatic deployments and namely Chef. After coming home from the conference, I spent a considerable amount of time learning chef and thinking about how it can be best used with small to medium size Django apps. In this post, I will walk you through how Chef works and how it can help you make awesome web apps.
When I say small apps, I mean single-server deployments.</description>
    </item>
    
    <item>
      <title>Google APIs - Y U NO WORK</title>
      <link>https://honza.ca/2011/09/google-apis-y-u-no-work/</link>
      <pubDate>Tue, 13 Sep 2011 21:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/09/google-apis-y-u-no-work/</guid>
      <description>Recently, at SheepDogInc, I have been working with various Google APIs, especially the Calendar API. The state of these APIs is rather unfortunate. Google is a web giant and you&amp;rsquo;d think that their APIs would be state-of-the-art given the number of professionals they employ.
Documentation Before we go anywhere, let me just talk about the documentation for a minute. As an open-source software author and advocate, I always encourage developers to write extensive and good documentation.</description>
    </item>
    
    <item>
      <title>DjangoCon 2011 Take-Aways</title>
      <link>https://honza.ca/2011/09/djangocon-2011-take-aways/</link>
      <pubDate>Sat, 10 Sep 2011 21:30:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/09/djangocon-2011-take-aways/</guid>
      <description>My employer, SheepDogInc, sent me and a colleague of mine to DjangoCon 2011. It was my first developer conference and I had a blast. Here a few quick points about what the conference has clarified for me.
Deploying Django Despite the Django official documentation&amp;rsquo;s recommendation to use Apache and mod_wsgi, most people seem to deploy Django with nginx and gunicorn. This has been a pleasant surprise to me because I like it but though that it was too simple (or less robust than Apache).</description>
    </item>
    
    <item>
      <title>Why I love reStructuredText</title>
      <link>https://honza.ca/2011/07/why-i-love-restructuredtext/</link>
      <pubDate>Tue, 19 Jul 2011 14:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/07/why-i-love-restructuredtext/</guid>
      <description>A lot of geeks are using Markdown as their markup generation tool today. It&amp;rsquo;s simple, effective and used everywhere. It allows you to focus on your content and not on the HTML code that will be used to display the content on a web page. I have used Markdown extensively and its simplicity is appealing to me.
reStructuredText is similar to Markdown. If you know Markdown, it&amp;rsquo;s dead simple to learn to use RST.</description>
    </item>
    
    <item>
      <title>Why I don&#39;t like the Ruby community</title>
      <link>https://honza.ca/2011/06/why-i-dont-like-the-ruby-community/</link>
      <pubDate>Mon, 20 Jun 2011 20:20:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/06/why-i-dont-like-the-ruby-community/</guid>
      <description>I write Python and Javascript code. I use Django and jQuery. And I cringe every time I have to run gem install x. I only have a limited understanding of Ruby and hardly any of Ruby on Rails. It seems disorganized to me and hard to process. All this is fine &amp;ndash; I don&amp;rsquo;t have to use any of it if I don&amp;rsquo;t like it, right?
I always knew there was something wrong with the way Ruby works.</description>
    </item>
    
    <item>
      <title>Install Ruby gems into virtualenv</title>
      <link>https://honza.ca/2011/06/install-ruby-gems-into-virtualenv/</link>
      <pubDate>Fri, 10 Jun 2011 11:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/06/install-ruby-gems-into-virtualenv/</guid>
      <description>You are a Python developer and every time you have to install a Ruby gem you throw up in your mouth a little. Wouldn&amp;rsquo;t it be nice if you could install Ruby gems into your virtualenv? Yeah, it would.
Stick this in your virtualenv&amp;rsquo;s postactivate script:
export GEM_HOME=&amp;quot;$VIRTUAL_ENV/gems&amp;quot; export GEM_PATH=&amp;quot;&amp;quot; export PATH=$PATH:&amp;quot;$GEM_HOME/bin&amp;quot;  That&amp;rsquo;s it! You&amp;rsquo;re welcome. :)
Credit Give credit where credit is due. I stole this idea from Idan Gazit and made it better.</description>
    </item>
    
    <item>
      <title>Deploying Django with nginx and gunicorn</title>
      <link>https://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn/</link>
      <pubDate>Mon, 30 May 2011 09:15:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn/</guid>
      <description>The amazing Django documentation recommends that you use Apache and modwsgi to deploy your webapp. While this is certainly not bad advice, you may not want to use Apache after all. Apache is a beast that eats up a lot of memory, is kind of slow and can&amp;rsquo;t handle as much traffic. As a fun alternative, I would like to talk about deploying Django on nginx using the gunicorn web server.</description>
    </item>
    
    <item>
      <title>The importance of git rebase</title>
      <link>https://honza.ca/2011/05/the-importance-of-git-rebase/</link>
      <pubDate>Sat, 14 May 2011 14:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/the-importance-of-git-rebase/</guid>
      <description>Git isn&amp;rsquo;t just something you have to put up with when working with other developers. Git is a wonderful tool that allows you to manage your code, its evolution and help you recover from mistakes should they arise. One of the things that people are intimidated by is git rebase.
Let&amp;rsquo;s look at an example. You&amp;rsquo;re working on a team with two other developers. You have a blessed repository that sits on your company&amp;rsquo;s server.</description>
    </item>
    
    <item>
      <title>The modern web developer and open source licenses</title>
      <link>https://honza.ca/2011/05/the-modern-web-developer-and-open-source-licenses/</link>
      <pubDate>Tue, 03 May 2011 19:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/the-modern-web-developer-and-open-source-licenses/</guid>
      <description>The world of open source is full of wonders. People write code for free and make it available for free for anyone to use. If you write a quick little program on the weekend, it&amp;rsquo;s usually because there is a need that has to be filled. There&amp;rsquo;s a repetitive task that you wish you didn&amp;rsquo;t have to do so you write a short program to do it for you.</description>
    </item>
    
    <item>
      <title>Virtual machines for Django developers</title>
      <link>https://honza.ca/2011/04/virtual-machines-for-django-developers/</link>
      <pubDate>Tue, 19 Apr 2011 12:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/04/virtual-machines-for-django-developers/</guid>
      <description>Vagrant is a tool for building and distributing virtualized development environments. It&amp;rsquo;s based on VirtualBox VMs. This article describes how this Ruby tool can be useful to Django developers.
Why vagrant? The modern web developer works on many different projects. Each project has a unique set of requirements, dependencies and package versions needed for that project to succeed. Keeping all of these libraries in check is difficult. virtualenv is a tool that creates isolated environments for Python packages.</description>
    </item>
    
    <item>
      <title>Why you should be using CoffeeScript</title>
      <link>https://honza.ca/2011/04/why-you-should-be-using-coffeescript/</link>
      <pubDate>Mon, 11 Apr 2011 16:45:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/04/why-you-should-be-using-coffeescript/</guid>
      <description>I&amp;rsquo;m sure you&amp;rsquo;ve heard of CoffeeScript. Everyone is talking about it, it seems. It&amp;rsquo;s a beautiful language with a simple syntax that you use to write Javascript. CoffeeScript compiles to Javascript. Here is why I think you should be using it:
Readability CoffeeScript is designed to be beautiful and readable. There is no unnecessary fluff. Less syntax boilerplate, fewer mistakes. Compare:
// regular javascript var author = &amp;quot;William Shakespeare&amp;quot;; // coffeescript author = &amp;quot;William Shakespeare&amp;quot;  Indentation is also important in CoffeeScript - just like in Python.</description>
    </item>
    
    <item>
      <title>How To Convert Vim Colorschemes To Pygments Themes</title>
      <link>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</link>
      <pubDate>Fri, 25 Feb 2011 22:26:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</guid>
      <description>Recently, I have grown to love Pygments. It gives you syntax highlighting in the browser without heavy Javascript files. It supports just about any programming language on the planet and it&amp;rsquo;s just plain awesome. The only thing that it&amp;rsquo;s lacking is good color schemes. It comes with a dozen themes that will certainly do the trick, but if you&amp;rsquo;re used to looking at pretty code in your favorite editor, the code examples on your website will look a little dull.</description>
    </item>
    
    <item>
      <title>How My Website Works</title>
      <link>https://honza.ca/2011/01/how-my-website-works/</link>
      <pubDate>Sat, 22 Jan 2011 21:18:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/01/how-my-website-works/</guid>
      <description>I&amp;rsquo;m sure you&amp;rsquo;ve heard of static site generators like Jekyll (Ruby) or Hyde (Python). The benefits are obvious - your site is hosted on a cheap shared hosting and it can easily survive the Digg/Slashdot/Reddit effect. There is no database latency - the browser requests a file on the server and gets it back immediately.
Update (2011-02-27): While I still use a static generator to power my site, it&amp;rsquo;s not a different engine.</description>
    </item>
    
    <item>
      <title>Android Development disappointments</title>
      <link>https://honza.ca/2011/01/android-development-disappointments/</link>
      <pubDate>Tue, 18 Jan 2011 18:23:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/01/android-development-disappointments/</guid>
      <description>The Android platform is the latest buzz in the smartphone world. I have previously written on why I prefer Android over iPhone. In this article, we will talk a little bit about what it&amp;rsquo;s like to develop native applications for Android.
Android SDK uses Java. I know Java but it&amp;rsquo;s not my favorite. After working with Python and Django for months, going back to Java isn&amp;rsquo;t exactly easy. But it&amp;rsquo;s not undoable either.</description>
    </item>
    
    <item>
      <title>How To Use Twitter OAuth On Android</title>
      <link>https://honza.ca/2010/09/how-to-use-twitter-oauth-on-android/</link>
      <pubDate>Tue, 28 Sep 2010 22:31:00 -0300</pubDate>
      
      <guid>https://honza.ca/2010/09/how-to-use-twitter-oauth-on-android/</guid>
      <description>If you are developing an application for the Android platform, and you need to interact with the Twitter API, you now have to use OAuth to authenticate the user. In this article, we will have a look on how you can do that.
What is OAuth? OAuth is a way of accessing a user&amp;rsquo;s data (e.g. tweets) without asking for the user&amp;rsquo;s username and password. Your application opens the Twitter website which will ask the user if they want to allow you to access their data.</description>
    </item>
    
  </channel>
</rss>