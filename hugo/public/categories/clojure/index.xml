<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on Honza Pokorny</title>
    <link>https://honza.ca/categories/clojure/</link>
    <description>Recent content in Clojure on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Nov 2015 06:32:00 -0400</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Internal Clojure libraries</title>
      <link>https://honza.ca/2015/11/internal-clojure-libraries/</link>
      <pubDate>Fri, 06 Nov 2015 06:32:00 -0400</pubDate>
      
      <guid>https://honza.ca/2015/11/internal-clojure-libraries/</guid>
      <description>At work, we have a few Clojure services in production. Each service is its own leiningen project with its own dependencies. And because setting up a local maven repository is hard, each project reimplements quite a bit of logic. This duplicate code usually relates to the non-essential but still important parts of a service: logging, metrics, sentry integration, etc.
Just the other day, I was getting really annoyed with this situation, and was about ready to go learn about the wonderful intricacies of Maven, when I discovered leiningen&amp;rsquo;s install command.</description>
    </item>
    
    <item>
      <title>Programming languages in a nutshell</title>
      <link>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</link>
      <pubDate>Wed, 18 Feb 2015 10:34:00 -0400</pubDate>
      
      <guid>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</guid>
      <description>Python, Ruby concurrency lol packaging lol Golang lol if you don&amp;rsquo;t like typing err := y u no generics lol imports Haskell need PhD will never be mainstream Idris only for concating lists Erlang lol syntax Javascript javascript Rust how do I do x this week? Clojure let me know when the program has started running lol if you want to build a secure thing on the web Scala lol if you think this actually improves java PHP which of these 10 fns should I use?</description>
    </item>
    
    <item>
      <title>How to use piggieback in vim-fireplace to hack cljs</title>
      <link>https://honza.ca/2014/03/how-to-use-piggieback-in-vim-fireplace-to-hack-cljs/</link>
      <pubDate>Thu, 20 Mar 2014 11:45:00 -0300</pubDate>
      
      <guid>https://honza.ca/2014/03/how-to-use-piggieback-in-vim-fireplace-to-hack-cljs/</guid>
      <description>(That&amp;rsquo;s quite a title, isn&amp;rsquo;t it?)
If you&amp;rsquo;re using vim to write Clojure code, chances are that you&amp;rsquo;re using Tim Pope&amp;rsquo;s vim-fireplace plugin. It&amp;rsquo;s really great. It stars an nREPL session in the background for you and lets you evaluate a form inside of vim. It&amp;rsquo;s super fast because it keeps the session around and it&amp;rsquo;s one of my favorite things about writing Clojure.
Recently, vim-fireplace received support for piggieback. Piggieback is a layer on top of nREPL that gives you support for ClojureScript.</description>
    </item>
    
    <item>
      <title>Haskell vs Clojure syntax</title>
      <link>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</link>
      <pubDate>Tue, 12 Feb 2013 16:33:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</guid>
      <description>Clojure has virtually zero syntax. What I mean by that is that all structures look the same: the first item in a list is the function and the rest are the arguments. This is true for variable assignment, if statements, data structures and functions themselves.
(+ 1 2) (defn greet [name] (str &amp;quot;Hello &amp;quot; name)) (def user-count 334)  However, before you can do anything useful in Haskell, you must learn all kinds of crazy syntax: function definitions, pattern matching, do forms, functors, monads, typeclasses, &amp;hellip;</description>
    </item>
    
  </channel>
</rss>