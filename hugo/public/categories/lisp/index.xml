<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp on Honza Pokorny</title>
    <link>https://honza.ca/categories/lisp/</link>
    <description>Recent content in Lisp on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Dec 2013 13:44:00 -0400</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/lisp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lisp parentheses</title>
      <link>https://honza.ca/2013/12/lisp-parentheses/</link>
      <pubDate>Thu, 12 Dec 2013 13:44:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/12/lisp-parentheses/</guid>
      <description>Perhaps the number one reason why people are afraid to try Lisp or don&amp;rsquo;t like it is the huge amounts of parentheses cluttering up the code. It&amp;rsquo;s said to be hard to read the code when it&amp;rsquo;s full of parentheses.
Any experienced Lisp programmer will tell you that the parentheses disappear fairly early on. After a while, you hardly notice them as something annoying. In fact, going back to C-family languages will make you feel like you need to type all kinds of crazy punctuation.</description>
    </item>
    
    <item>
      <title>Building a Lisp to Javascript compiler</title>
      <link>https://honza.ca/2013/05/building-a-lisp-to-javascript-compiler/</link>
      <pubDate>Mon, 13 May 2013 07:14:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/05/building-a-lisp-to-javascript-compiler/</guid>
      <description>In this post, I&amp;rsquo;m going to show you how I made a Lisp to Javascript compiler. I really enjoy programming in Clojure but have often thought that the JVM isn&amp;rsquo;t always the best platform for scripts due to the slow JVM start-up. So, I decided to implement a simple version of Clojure that compiles to Javascript and can be run on top of nodejs.
Compilers are notoriously hard to understand and therefore make for great mind-bending exercises.</description>
    </item>
    
    <item>
      <title>Haskell vs Clojure syntax</title>
      <link>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</link>
      <pubDate>Tue, 12 Feb 2013 16:33:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</guid>
      <description>Clojure has virtually zero syntax. What I mean by that is that all structures look the same: the first item in a list is the function and the rest are the arguments. This is true for variable assignment, if statements, data structures and functions themselves.
(+ 1 2) (defn greet [name] (str &amp;quot;Hello &amp;quot; name)) (def user-count 334)  However, before you can do anything useful in Haskell, you must learn all kinds of crazy syntax: function definitions, pattern matching, do forms, functors, monads, typeclasses, &amp;hellip;</description>
    </item>
    
  </channel>
</rss>