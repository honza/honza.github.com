<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Honza Pokorny</title>
    <link>https://honza.ca/categories/python/</link>
    <description>Recent content in Python on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Feb 2015 10:34:00 -0400</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Programming languages in a nutshell</title>
      <link>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</link>
      <pubDate>Wed, 18 Feb 2015 10:34:00 -0400</pubDate>
      
      <guid>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</guid>
      <description>Python, Ruby concurrency lol packaging lol Golang lol if you don&amp;rsquo;t like typing err := y u no generics lol imports Haskell need PhD will never be mainstream Idris only for concating lists Erlang lol syntax Javascript javascript Rust how do I do x this week? Clojure let me know when the program has started running lol if you want to build a secure thing on the web Scala lol if you think this actually improves java PHP which of these 10 fns should I use?</description>
    </item>
    
    <item>
      <title>How not to depend on PyPI</title>
      <link>https://honza.ca/2012/02/how-not-to-depend-on-pypi/</link>
      <pubDate>Sat, 04 Feb 2012 20:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/02/how-not-to-depend-on-pypi/</guid>
      <description>When deploying a Django application, you often use a requirements.txt file that contains a list of the application&amp;rsquo;s dependencies. During deployment, your provisioning system will pip install all of those to make sure that your application runs as desired.
The format of a typical requirements.txt files isn&amp;rsquo;t unlike the following
django==1.3.1 psycopg2==2.4.4 Fabric==1.3.3 ...  By default, pip will go to the Python Package Index (PyPI) and look for that package there.</description>
    </item>
    
    <item>
      <title>Upgrading your Django media files to use a CDN</title>
      <link>https://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn/</link>
      <pubDate>Tue, 17 Jan 2012 08:45:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn/</guid>
      <description>I was using django-filebrowser on a project and my Rackspace VM quickly ran out of disk space. Since the site isn&amp;rsquo;t getting much traffic at all, I didn&amp;rsquo;t want to pay extra for a bigger VM. Instead, I decided to move all of the user uploaded media to Rackspace Cloudfiles. It&amp;rsquo;s super cheap and they have a nice API.
Now, the challenge was to make the transition from a filebrowser-based system.</description>
    </item>
    
    <item>
      <title>Using Chef with small Django apps</title>
      <link>https://honza.ca/2011/09/using-chef-with-small-django-apps/</link>
      <pubDate>Tue, 20 Sep 2011 20:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/09/using-chef-with-small-django-apps/</guid>
      <description>This year at DjangoCon, it seemed like everybody was talking about automatic deployments and namely Chef. After coming home from the conference, I spent a considerable amount of time learning chef and thinking about how it can be best used with small to medium size Django apps. In this post, I will walk you through how Chef works and how it can help you make awesome web apps.
When I say small apps, I mean single-server deployments.</description>
    </item>
    
    <item>
      <title>Install Ruby gems into virtualenv</title>
      <link>https://honza.ca/2011/06/install-ruby-gems-into-virtualenv/</link>
      <pubDate>Fri, 10 Jun 2011 11:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/06/install-ruby-gems-into-virtualenv/</guid>
      <description>You are a Python developer and every time you have to install a Ruby gem you throw up in your mouth a little. Wouldn&amp;rsquo;t it be nice if you could install Ruby gems into your virtualenv? Yeah, it would.
Stick this in your virtualenv&amp;rsquo;s postactivate script:
export GEM_HOME=&amp;quot;$VIRTUAL_ENV/gems&amp;quot; export GEM_PATH=&amp;quot;&amp;quot; export PATH=$PATH:&amp;quot;$GEM_HOME/bin&amp;quot;  That&amp;rsquo;s it! You&amp;rsquo;re welcome. :)
Credit Give credit where credit is due. I stole this idea from Idan Gazit and made it better.</description>
    </item>
    
    <item>
      <title>Deploying Django with nginx and gunicorn</title>
      <link>https://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn/</link>
      <pubDate>Mon, 30 May 2011 09:15:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn/</guid>
      <description>The amazing Django documentation recommends that you use Apache and modwsgi to deploy your webapp. While this is certainly not bad advice, you may not want to use Apache after all. Apache is a beast that eats up a lot of memory, is kind of slow and can&amp;rsquo;t handle as much traffic. As a fun alternative, I would like to talk about deploying Django on nginx using the gunicorn web server.</description>
    </item>
    
    <item>
      <title>How To Convert Vim Colorschemes To Pygments Themes</title>
      <link>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</link>
      <pubDate>Fri, 25 Feb 2011 22:26:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</guid>
      <description>Recently, I have grown to love Pygments. It gives you syntax highlighting in the browser without heavy Javascript files. It supports just about any programming language on the planet and it&amp;rsquo;s just plain awesome. The only thing that it&amp;rsquo;s lacking is good color schemes. It comes with a dozen themes that will certainly do the trick, but if you&amp;rsquo;re used to looking at pretty code in your favorite editor, the code examples on your website will look a little dull.</description>
    </item>
    
    <item>
      <title>How My Website Works</title>
      <link>https://honza.ca/2011/01/how-my-website-works/</link>
      <pubDate>Sat, 22 Jan 2011 21:18:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/01/how-my-website-works/</guid>
      <description>I&amp;rsquo;m sure you&amp;rsquo;ve heard of static site generators like Jekyll (Ruby) or Hyde (Python). The benefits are obvious - your site is hosted on a cheap shared hosting and it can easily survive the Digg/Slashdot/Reddit effect. There is no database latency - the browser requests a file on the server and gets it back immediately.
Update (2011-02-27): While I still use a static generator to power my site, it&amp;rsquo;s not a different engine.</description>
    </item>
    
    <item>
      <title>Android Development disappointments</title>
      <link>https://honza.ca/2011/01/android-development-disappointments/</link>
      <pubDate>Tue, 18 Jan 2011 18:23:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/01/android-development-disappointments/</guid>
      <description>The Android platform is the latest buzz in the smartphone world. I have previously written on why I prefer Android over iPhone. In this article, we will talk a little bit about what it&amp;rsquo;s like to develop native applications for Android.
Android SDK uses Java. I know Java but it&amp;rsquo;s not my favorite. After working with Python and Django for months, going back to Java isn&amp;rsquo;t exactly easy. But it&amp;rsquo;s not undoable either.</description>
    </item>
    
  </channel>
</rss>