<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim on Honza Pokorny</title>
    <link>https://honza.ca/categories/vim/</link>
    <description>Recent content in vim on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Mar 2014 11:45:00 -0300</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to use piggieback in vim-fireplace to hack cljs</title>
      <link>https://honza.ca/2014/03/how-to-use-piggieback-in-vim-fireplace-to-hack-cljs/</link>
      <pubDate>Thu, 20 Mar 2014 11:45:00 -0300</pubDate>
      
      <guid>https://honza.ca/2014/03/how-to-use-piggieback-in-vim-fireplace-to-hack-cljs/</guid>
      <description>&lt;p&gt;(That&amp;rsquo;s quite a title, isn&amp;rsquo;t it?)&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using vim to write Clojure code, chances are that you&amp;rsquo;re using Tim
Pope&amp;rsquo;s vim-fireplace plugin. It&amp;rsquo;s really great. It stars an nREPL session in
the background for you and lets you evaluate a form inside of vim. It&amp;rsquo;s super
fast because it keeps the session around and it&amp;rsquo;s one of my favorite things
about writing Clojure.&lt;/p&gt;
&lt;p&gt;Recently, vim-fireplace received support for &lt;a href=&#34;https://github.com/cemerick/piggieback&#34;&gt;piggieback&lt;/a&gt;. Piggieback is a
layer on top of nREPL that gives you support for ClojureScript. This is really
great because it gives you the ability to evaluate ClojureScript code in vim
just like your normal Clojure code.&lt;/p&gt;
&lt;p&gt;Alright, here is how to set it up:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defproject &lt;/span&gt;pig &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0-SNAPSHOT&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;:description&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FIXME: write this!&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;:url&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/FIXME&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#e6db74&#34;&gt;:dependencies&lt;/span&gt; [[org.clojure/clojure &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.5.1&amp;#34;&lt;/span&gt;]
                 [com.cemerick/piggieback &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.3&amp;#34;&lt;/span&gt;]]

  &lt;span style=&#34;color:#e6db74&#34;&gt;:plugins&lt;/span&gt; [[lein-cljsbuild &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.2&amp;#34;&lt;/span&gt;]]
  &lt;span style=&#34;color:#e6db74&#34;&gt;:repl-options&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:nrepl-middleware&lt;/span&gt; [cemerick.piggieback/wrap-cljs-repl]}

  &lt;span style=&#34;color:#e6db74&#34;&gt;:source-paths&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;]

  &lt;span style=&#34;color:#e6db74&#34;&gt;:cljsbuild&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;:builds&lt;/span&gt; [{&lt;span style=&#34;color:#e6db74&#34;&gt;:source-paths&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;]
              &lt;span style=&#34;color:#e6db74&#34;&gt;:compiler&lt;/span&gt; {
                &lt;span style=&#34;color:#e6db74&#34;&gt;:target&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:nodejs&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;:optimizations&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:simple&lt;/span&gt;}}]})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty standard stuff. We&amp;rsquo;re using the lein-cljsbuild plugin for automatic
compilation, we set up the source path and a nodejs compile target.&lt;/p&gt;
&lt;p&gt;Now you simply open a &lt;code&gt;.cljs&lt;/code&gt; file and you can do your usual vim-fireplace
magic. The first &lt;code&gt;cpr&lt;/code&gt; (reload current buffer) command will connect to an
nREPL instance and initialize the piggieback wrapper.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Text editor UI</title>
      <link>https://honza.ca/2013/05/text-editor-ui/</link>
      <pubDate>Fri, 24 May 2013 21:30:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/05/text-editor-ui/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;What I don&amp;rsquo;t understand is: why should you ever care how your editor looks,
unless you&amp;rsquo;re trying to win a screenshot competition? The primary factor
in looking good should be the choice of a good font at a comfortable size,
and a syntax coloring theme that you like. And that is not something
specific to an editor. Editors like Emacs and vi have almost no UI! If
Emacs is configured right, the only UI it has is the modeline and the
minibuffer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vivek Haldar in &lt;a href=&#34;http://blog.vivekhaldar.com/post/31970017734/new-frontiers-in-text-editing&#34;&gt;New Frontiers In Text Editing&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSLint syntax checker for vim</title>
      <link>https://honza.ca/2011/04/jslint-syntax-checker-for-vim/</link>
      <pubDate>Tue, 05 Apr 2011 09:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/04/jslint-syntax-checker-for-vim/</guid>
      <description>&lt;p&gt;Douglas Crockford&amp;rsquo;s &lt;a href=&#34;http://www.jslint.com/&#34;&gt;JSLint&lt;/a&gt; script is almost a golden standard when it comes
to checking the syntax and general sanity of your javascript files. Being lazy
by nature, I got tired of copying and pasting my code into the web form.&lt;/p&gt;
&lt;p&gt;I wanted to be able to run the JSLint tool from the command line. JSLint itself
is written in javascript. It&amp;rsquo;s a 6000-line beast. How do you run a javascript
library as a command line utility? The answer is &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wrote a quick little script that takes a single argument (your file) and runs
JSLint over it, printing any errors to the console. I call it &lt;code&gt;jslintnode.js&lt;/code&gt;
and the code is on &lt;a href=&#34;https://github.com/honza/jslintnode.js&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well, checking my files from the command line is certainly better than using
the web interface. But I still have to run it over and over. As you may know,
I&amp;rsquo;m fanatical &lt;a href=&#34;http://www.vim.org&#34;&gt;vim&lt;/a&gt; user. There is a cool plugin called &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt; which
runs through the file you are editing each time you save it. It puts little
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; characters next to the line you are editing which tells you that you
screwed up and need to fix that line.&lt;/p&gt;
&lt;p&gt;However, by default, syntastic uses the &lt;code&gt;jsl&lt;/code&gt; utility to check javascript
files. With a little bit of work, you can modify the original script to use our
&lt;code&gt;jslintnode.js&lt;/code&gt; utility.&lt;/p&gt;
&lt;p&gt;Go into the &lt;code&gt;/syntax_checkers/&lt;/code&gt; directory and open up the &lt;code&gt;javascript.vim&lt;/code&gt;
file.&lt;/p&gt;
&lt;p&gt;Change this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;executable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jsl&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;executable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jslintnode.js&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And replace the body of the &lt;code&gt;SyntaxCheckers_javascript_GetLocList()&lt;/code&gt; function
with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeprg&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jslintnode.js &amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shellescape&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expand&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errorformat&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%W%f(%l): lint warning: %m,%-Z%p^,%W%f(%l): warning: %m,%-Z%p^,%E%f(%l): SyntaxError: %m,%-Z%p^,%-G&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SyntasticMake&lt;/span&gt;({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;makeprg&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;makeprg&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorformat&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;errorformat&lt;/span&gt; })&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save and restart vim.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. Now as you&amp;rsquo;re editing any javascript files you will get instant
feedback as to the quality of your code as judged by JSLint. And remember that
&lt;em&gt;JSLint will hurt your feelings&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Convert Vim Colorschemes To Pygments Themes</title>
      <link>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</link>
      <pubDate>Fri, 25 Feb 2011 22:26:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</guid>
      <description>&lt;p&gt;Recently, I have grown to love &lt;a href=&#34;http://pygments.org&#34;&gt;Pygments&lt;/a&gt;. It gives you syntax
highlighting in the browser without heavy Javascript files. It supports just
about any programming language on the planet and it&amp;rsquo;s just plain awesome. The
only thing that it&amp;rsquo;s lacking is good color schemes. It comes with a dozen
themes that will certainly do the trick, but if you&amp;rsquo;re used to looking at
pretty code in your favorite editor, the code examples on your website will
look a little dull.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to go out on a limb here and assume you have a favorite colorscheme.
I found a script that will turn a vim colorscheme into a Pygments theme. It
didn&amp;rsquo;t work perfectly out of the box so I patched it. You can download it
&lt;a href=&#34;https://github.com/honza/vim2pygments&#34;&gt;here&lt;/a&gt;. Copy your vim colorscheme to the same directory as the script and run
it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ python vim2pygments.py molokai.vim &amp;gt; molokai.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will produce a Python file containing a simple style class that Pygments
can use. Next step is to download Pygments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ hg clone http://dev.pocoo.org/hg/pygments-main pygments
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then you will install your new theme:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ cd pygments
$ cp ../molokai.py pygments/styles/molokai.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OK, now for the fun part. We will use Pygments to generate the CSS file that
you will then use on your website:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ./pygmentize -S molokai -f html -a .highlight &amp;gt; molokai.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are a TextMate user, you might be able to get your favorite theme done,
too. A lot of popular Vim colorschemes are inspired by TextMate. Sunburst,
mustang and idle fingers come to mind. Just find a Vim version and you&amp;rsquo;re good
to go.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
