<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Honza Pokorny</title>
    <link>https://honza.ca/categories/code/</link>
    <description>Recent content in code on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Sep 2015 12:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a Redis clone in Haskell</title>
      <link>https://honza.ca/2015/09/building-a-redis-clone-in-haskell/</link>
      <pubDate>Thu, 03 Sep 2015 12:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2015/09/building-a-redis-clone-in-haskell/</guid>
      <description>&lt;p&gt;In this post, we will attempt to make a simplified clone of &lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt; in Haskell.
Here is a set of requirements that we will aim to fullfill:&lt;/p&gt;
&lt;h3 id=&#34;get-and-set-operations&#34;&gt;&lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; operations&lt;/h3&gt;
&lt;h3 id=&#34;multi-threaded&#34;&gt;Multi-threaded&lt;/h3&gt;
&lt;h3 id=&#34;atomic&#34;&gt;Atomic&lt;/h3&gt;
&lt;h3 id=&#34;redis-compatible--implement-the-redis-protocol&#34;&gt;Redis compatible (implement the Redis protocol)&lt;/h3&gt;
&lt;p&gt;We should be able to use the &lt;code&gt;redis-cli&lt;/code&gt; tool to connect to our server and
issue commands to it.&lt;/p&gt;
&lt;p&gt;We are going to omit many features that Redis has.  For example, there will be
no disk persistence.  We will accomplish this with about 100 lines of Haskell.&lt;/p&gt;
&lt;h2 id=&#34;getting-started-stack&#34;&gt;Getting started: stack&lt;/h2&gt;
&lt;p&gt;We are going to use &lt;a href=&#34;https://github.com/commercialhaskell/stack&#34;&gt;stack&lt;/a&gt; to build our project.  Stack is a new build tool for
Haskell projects.  We can also use it to create all the necessary files that
make up a Haskell project.  You can find the installation &lt;a href=&#34;https://github.com/commercialhaskell/stack/wiki/Downloads&#34;&gt;instructions&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create our project.  We will call our server &lt;em&gt;Redish&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ stack new Redish simple
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a directory &lt;code&gt;Redish/&lt;/code&gt; with a few files in it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Redish/
    LICENSE
    README.md
    Redish.cabal
    Setup.hs
    src/
        Main.hs
    stack.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use stack to build this project and run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ stack build
Redish-0.1.0.0: configure
Configuring Redish-0.1.0.0...
Redish-0.1.0.0: build
Preprocessing executable &#39;Redish&#39; for Redish-0.1.0.0...
[1 of 1] Compiling Main             ( src/Main.hs, .stack-work/dist/x86_64-osx/Cabal-1.22.4.0/build/Redish/Redish-tmp/Main.o )
Linking .stack-work/dist/x86_64-osx/Cabal-1.22.4.0/build/Redish/Redish ...
Reidhs-0.1.0.0: install
Installing executable(s) in
/Users/&amp;lt;user&amp;gt;/&amp;lt;dirs&amp;gt;/Redish/.stack-work/install/x86_64-osx/lts-3.2/7.10.2/bin
$ stack exec Redish
hello world
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;types&#34;&gt;Types&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start by defining our types.  Redish is an in-memory database so we will
need a representation of our database.  For a simple key-value store, all that
we need is a simple map.  Let&amp;rsquo;s create a few aliases.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Key&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we will need to represent the commands that our server knows how to
handle.  The command data structure can be a &lt;code&gt;get&lt;/code&gt;, a &lt;code&gt;set&lt;/code&gt; or unknown.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Command&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Key&lt;/span&gt;
             &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Value&lt;/span&gt;
             &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Unknown&lt;/span&gt;
             &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;software-transactional-memory&#34;&gt;Software transactional memory&lt;/h2&gt;
&lt;p&gt;Now that we have our types in places, we need to write a few functions to
operate on them.  We need a way to insert data and to query our database.&lt;/p&gt;
&lt;p&gt;First things first though.  Since by default everything in Haskell is immutable,
how can we change the value of our in-memory database?  We can&amp;rsquo;t simply
overwrite the old value with the new one.  The compiler won&amp;rsquo;t let us.  The
answer is software transactional memory, or STM for short.&lt;/p&gt;
&lt;p&gt;STM allows us to atomically change a value in our program.  The atomic part is
important.  Many parts of the code can update this value and we have no way of
knowing when and how often they might do so.  STM allows us to perform atomic
updates.  This way any updates to our database will be run sequence even when
coming from different threads.  The only cost is that we have to perform any
updates within the context of &lt;code&gt;IO&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;DB&lt;/code&gt; type will be become &lt;code&gt;TVar DB&lt;/code&gt;.  The &lt;code&gt;TVar&lt;/code&gt; type represents the
mutable reference.  Next, let&amp;rsquo;s create the initial value in the &lt;code&gt;main&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    database &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; atomically &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; newTVar &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; fromList [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__version__&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a &lt;code&gt;Map&lt;/code&gt; with a key of &lt;code&gt;__version__&lt;/code&gt; which has the value
&lt;code&gt;0.1.0&lt;/code&gt;.  Then, it wraps that &lt;code&gt;Map&lt;/code&gt; in a &lt;code&gt;TVar&lt;/code&gt; and atomically assigns it
to the &lt;code&gt;database&lt;/code&gt; variable.  Each time we want to write or read the
&lt;code&gt;database&lt;/code&gt; value, we have to use &lt;code&gt;IO&lt;/code&gt;.  Let&amp;rsquo;s create a helper for atomically
reading this value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;atomRead&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TVar&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;atomRead&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atomically &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; readTVar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And let&amp;rsquo;s make a function to update a value in the database.  This takes a
function that does the updating and runs it through the STM machinery.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;updateValue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TVar&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;updateValue&lt;/span&gt; fn x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atomically &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; modifyTVar x fn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reply-parsing&#34;&gt;Reply parsing&lt;/h2&gt;
&lt;p&gt;Next, let&amp;rsquo;s talk about the Redis protocol.  It&amp;rsquo;s a simple TCP scheme that looks
like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;*2\r\n$3\r\nget\r\n$4\r\nname
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s a bunch of keywords and arguments separated by newlines.  If we clean it up
and break each thing to its own line, we get:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;*2
$3
get
$4
name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s look at each line.  &lt;code&gt;*2&lt;/code&gt; says to expect a command that has two
arguments.  &lt;code&gt;$3&lt;/code&gt; says that the first argument is three characters long.
&lt;code&gt;get&lt;/code&gt; is the three-character argument from above.  &lt;code&gt;$4&lt;/code&gt; is the length of the
second argument, and &lt;code&gt;name&lt;/code&gt; is the value of the second argument.  If you&amp;rsquo;re in
the REPL provided by &lt;code&gt;redis-cli&lt;/code&gt;, and you type &lt;code&gt;get name&lt;/code&gt;, Redis will
translate those two words into the above representation.  A &lt;code&gt;set&lt;/code&gt; command
would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;*3
$3
set
$4
name
$5
honza
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is what will be sent when you run &lt;code&gt;set name honza&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This multi-argument message is called &lt;em&gt;multibulk&lt;/em&gt; in the Redis documentation.
There are two other data types that Redis uses that will interest us: the OK and
the error.&lt;/p&gt;
&lt;p&gt;When Redis needs to tell you that it accepted request and everything went
smoothly, it simply responds with &lt;code&gt;+OK&lt;/code&gt;.  When Redis needs to indicate an
error, it replies with &lt;code&gt;-ERR something went wrong&lt;/code&gt; (where &amp;ldquo;something went
wrong&amp;rdquo; is the message).&lt;/p&gt;
&lt;p&gt;This format is very simple and actually very effective.  When we listen on a
socket for incoming messages, we have a look at the very first character.  &lt;code&gt;+&lt;/code&gt;
tells us that it&amp;rsquo;s OK, &lt;code&gt;-&lt;/code&gt; signals and error, and &lt;code&gt;*&lt;/code&gt; tells us to keep
reading for commands.  We incrementally read from the socket only as much data
as the protocol tells us.&lt;/p&gt;
&lt;p&gt;In this section, we will write a parser for multibulk messages.  We will use the
amazing attoparsec library for this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following code is heavily influenced by the &lt;a href=&#34;https://github.com/informatikr/hedis&#34;&gt;Hedis&lt;/a&gt; library.  Credit goes
to Falko Peters.  Thanks!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A multibulk message is called a &lt;em&gt;reply&lt;/em&gt; in Redis lingo.  Let&amp;rsquo;s make a type for it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Reply&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;)
           &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MultiBulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Reply&lt;/span&gt;])
           &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;code&gt;Bulk&lt;/code&gt; reply is a simple string like &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;name&lt;/code&gt; above.
&lt;code&gt;MultiBulk&lt;/code&gt; is the whole message.  Let&amp;rsquo;s also write a function that attempts
to convert a &lt;code&gt;Reply&lt;/code&gt; to a &lt;code&gt;Command&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parseReply&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Reply&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Command&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;parseReply&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;MultiBulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; xs)) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; xs &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; a)]                &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Get&lt;/span&gt; a
    [&lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;set&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; a), &lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; b)] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt; a b
    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;                                                 &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Unknown&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;parseReply&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, let&amp;rsquo;s use attoparsec to write a parser for the &lt;code&gt;Reply&lt;/code&gt; data type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replyParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Reply&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;replyParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; choice [bulk, multiBulk]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;replyParser&lt;/code&gt; will try to match either a &lt;code&gt;bulk&lt;/code&gt; or a &lt;code&gt;multiBulk&lt;/code&gt;.
Let&amp;rsquo;s implement those:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bulk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Reply&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;bulk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; signed decimal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&lt;/span&gt; endOfLine
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; return &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; take len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&lt;/span&gt; endOfLine

&lt;span style=&#34;color:#a6e22e&#34;&gt;multiBulk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Reply&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;multiBulk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MultiBulk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt; signed decimal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&lt;/span&gt; endOfLine
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; return &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; count len replyParser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, the parsers look at the first character to see what kind of message it
is.  If it starts with a &lt;code&gt;$&lt;/code&gt;, it&amp;rsquo;s a bulk.  If it starts with a &lt;code&gt;*&lt;/code&gt;, it&amp;rsquo;s
multibulk.  Then, it reads as many characters from the input as the length
indicator said.  In the case of multibulk, it recurses because it can contain
bulk messages.&lt;/p&gt;
&lt;p&gt;You can now run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; parse replyParser &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;MultiBulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; [(&lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;)), (&lt;span style=&#34;color:#66d9ef&#34;&gt;Bulk&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;))]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;networking&#34;&gt;Networking&lt;/h2&gt;
&lt;p&gt;At this point, we have our data structures ready and we know how to parse
incoming requests into them.  Now we need to work on the networking part.  Let&amp;rsquo;s
teach our program how to listen on a socket and parse incoming text into
something useful.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s change our &lt;code&gt;main&lt;/code&gt; function to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; withSocketsDo &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    database &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; atomically &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; newTVar &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; fromList [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__version__&amp;#34;&lt;/span&gt;, version)]
    sock &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; listenOn &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PortNumber&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7777&lt;/span&gt;
    putStrLn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Listening on localhost 7777&amp;#34;&lt;/span&gt;
    sockHandler sock database
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty straight-forward.  Ask for a socket and then listen on it.  When
something happens on the socket, run the function &lt;code&gt;socketHandler&lt;/code&gt;.  Let&amp;rsquo;s
implement that next:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sockHandler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Socket&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TVar&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;sockHandler&lt;/span&gt; sock db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    (handle, &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; accept sock
    hSetBuffering handle &lt;span style=&#34;color:#66d9ef&#34;&gt;NoBuffering&lt;/span&gt;
    hSetBinaryMode handle &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; forkIO &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; commandProcessor handle db
    sockHandler sock db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given a socket and a reference to a mutable database, we can get a handle and
start processing requests.  For each new connection, run &lt;code&gt;forkIO&lt;/code&gt; which will
do all this work of parsing and responding on a new lightweight thread.  At the
end, we simply recurse to accept new work.  The &lt;code&gt;commandProcessor&lt;/code&gt; function
does the heavy lifting here, so let&amp;rsquo;s write that next.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commandProcessor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TVar&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;commandProcessor&lt;/span&gt; handle db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    reply &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; hGetReplies handle replyParser
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parseReply reply
    runCommand handle command db
    commandProcessor handle db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function runs the &lt;code&gt;replyParser&lt;/code&gt; we wrote earlier.  It uses a very clever
function called &lt;code&gt;hGetReplies&lt;/code&gt; which we will look at in a minute.  It will read
as much data as necessary from the handle to get an instance of &lt;code&gt;Reply&lt;/code&gt;.  We
then convert that reply to a command and run it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hGetReplies&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Parser&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;hGetReplies&lt;/span&gt; h parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; go &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty
  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    go rest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        parseResult &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; parseWith readMore parser rest
        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; parseResult &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;Fail&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; s   &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; s
            &lt;span style=&#34;color:#66d9ef&#34;&gt;Partial&lt;/span&gt;{}    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error: partial&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;Done&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; r     &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return r

    readMore &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hGetSome h (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;parseWith&lt;/code&gt; function does partial matching.  When it can&amp;rsquo;t parse anything,
it will use the &lt;code&gt;readMore&lt;/code&gt; function to get more data and try again.  The
&lt;code&gt;readMore&lt;/code&gt; function uses the handle to read more data.  Once the parser can
match something, we are done.&lt;/p&gt;
&lt;h2 id=&#34;running-commands&#34;&gt;Running commands&lt;/h2&gt;
&lt;p&gt;Once we have a command, we can run it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runCommand&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Handle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Command&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TVar&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;runCommand&lt;/span&gt; handle (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Get&lt;/span&gt; key)) db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; atomRead db
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getValue m key
    &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hPutStr handle &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, valLength value, crlf, value, crlf]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
            valLength &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;
            valLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pack &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; show &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length
&lt;span style=&#34;color:#a6e22e&#34;&gt;runCommand&lt;/span&gt; handle (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt; key value)) db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    updateValue (insert key value) db
    &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hPutStr handle ok
&lt;span style=&#34;color:#a6e22e&#34;&gt;runCommand&lt;/span&gt; handle (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Unknown&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hPutStr handle &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-ERR &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown command&amp;#34;&lt;/span&gt;, crlf]
&lt;span style=&#34;color:#a6e22e&#34;&gt;runCommand&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the command is a &lt;code&gt;get&lt;/code&gt;, we read the &lt;code&gt;DB&lt;/code&gt; atom.  Then we construct a
bulk reply and write it to the handle.  The bulk reply is in the same format as
our messages above: &lt;code&gt;$5\r\nhonza\r\n&lt;/code&gt;.  The &lt;code&gt;getValue&lt;/code&gt; function is a lookup
function that returns &amp;ldquo;null&amp;rdquo; if a value can&amp;rsquo;t be found.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Value&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt; db k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findWithDefault &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt; k db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the command is a &lt;code&gt;set&lt;/code&gt;, we use our &lt;code&gt;updateValue&lt;/code&gt; function from above
and write the &lt;code&gt;ok&lt;/code&gt; to the handle.  The &lt;code&gt;ok&lt;/code&gt; variable is just &lt;code&gt;+OK\r\n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the command is unknown, we write an error to the handle.&lt;/p&gt;
&lt;h2 id=&#34;compiling-and-running&#34;&gt;Compiling and running&lt;/h2&gt;
&lt;p&gt;You can now build your program with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ stack build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And run it with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ stack exec Redish
Listening on localhost 7777
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To test it out, you can connect to it with the &lt;code&gt;redis-cli&lt;/code&gt; tool:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ redis-cli -p 7777
127.0.0.1:7777&amp;gt; set name honza
OK
127.0.0.1:7777&amp;gt; get name
&amp;quot;honza&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can test the performance with something silly, like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ time redis-cli -r 10000 get name
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can see the finished product on &lt;a href=&#34;https://github.com/honza/redish&#34;&gt;GitHub&lt;/a&gt;.  Feedback is welcome, so are
questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming languages in a nutshell</title>
      <link>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</link>
      <pubDate>Wed, 18 Feb 2015 10:34:00 -0400</pubDate>
      
      <guid>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</guid>
      <description>&lt;h2 id=&#34;python-ruby&#34;&gt;Python, Ruby&lt;/h2&gt;
&lt;h3 id=&#34;concurrency-lol&#34;&gt;concurrency lol&lt;/h3&gt;
&lt;h3 id=&#34;packaging-lol&#34;&gt;packaging lol&lt;/h3&gt;
&lt;h2 id=&#34;golang&#34;&gt;Golang&lt;/h2&gt;
&lt;h3 id=&#34;lol-if-you-don-t-like-typing-err&#34;&gt;lol if you don&amp;rsquo;t like typing &lt;code&gt;err :=&lt;/code&gt;&lt;/h3&gt;
&lt;h3 id=&#34;y-u-no-generics&#34;&gt;y u no generics&lt;/h3&gt;
&lt;h3 id=&#34;lol-imports&#34;&gt;lol imports&lt;/h3&gt;
&lt;h2 id=&#34;haskell&#34;&gt;Haskell&lt;/h2&gt;
&lt;h3 id=&#34;need-phd&#34;&gt;need PhD&lt;/h3&gt;
&lt;h3 id=&#34;will-never-be-mainstream&#34;&gt;will never be mainstream&lt;/h3&gt;
&lt;h2 id=&#34;idris&#34;&gt;Idris&lt;/h2&gt;
&lt;h3 id=&#34;only-for-concating-lists&#34;&gt;only for concating lists&lt;/h3&gt;
&lt;h2 id=&#34;erlang&#34;&gt;Erlang&lt;/h2&gt;
&lt;h3 id=&#34;lol-syntax&#34;&gt;lol syntax&lt;/h3&gt;
&lt;h2 id=&#34;javascript&#34;&gt;Javascript&lt;/h2&gt;
&lt;h3 id=&#34;javascript&#34;&gt;javascript&lt;/h3&gt;
&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;
&lt;h3 id=&#34;how-do-i-do-x-this-week&#34;&gt;how do I do x this week?&lt;/h3&gt;
&lt;h2 id=&#34;clojure&#34;&gt;Clojure&lt;/h2&gt;
&lt;h3 id=&#34;let-me-know-when-the-program-has-started-running&#34;&gt;let me know when the program has started running&lt;/h3&gt;
&lt;h3 id=&#34;lol-if-you-want-to-build-a-secure-thing-on-the-web&#34;&gt;lol if you want to build a secure thing on the web&lt;/h3&gt;
&lt;h2 id=&#34;scala&#34;&gt;Scala&lt;/h2&gt;
&lt;h3 id=&#34;lol-if-you-think-this-actually-improves-java&#34;&gt;lol if you think this actually improves java&lt;/h3&gt;
&lt;h2 id=&#34;php&#34;&gt;PHP&lt;/h2&gt;
&lt;h3 id=&#34;which-of-these-10-fns-should-i-use&#34;&gt;which of these 10 fns should I use?&lt;/h3&gt;
&lt;h2 id=&#34;ocaml&#34;&gt;OCaml&lt;/h2&gt;
&lt;h3 id=&#34;haskell-without-the-awesome&#34;&gt;haskell without the awesome&lt;/h3&gt;
&lt;h2 id=&#34;prolog&#34;&gt;Prolog&lt;/h2&gt;
&lt;h3 id=&#34;mucho-problemo&#34;&gt;mucho problemo&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Masterless Saltstack</title>
      <link>https://honza.ca/2013/12/masterless-saltstack/</link>
      <pubDate>Wed, 11 Dec 2013 14:55:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/12/masterless-saltstack/</guid>
      <description>&lt;p&gt;This is a simple guide on how to use Saltstack, the configuration manager, in
masterless mode.  In most scenarios, you will use a Saltstack master to
control many minions.  Saltstack contains a lot of utilities to check the state
of minions, gather information about them, etc.&lt;/p&gt;
&lt;p&gt;However, if you are working on a small, single-server application, Saltstack&amp;rsquo;s
master-minion setup might be overkill.  You can indeed use a single minion.&lt;/p&gt;
&lt;h2 id=&#34;a-bit-of-setup-first&#34;&gt;A bit of setup first&lt;/h2&gt;
&lt;p&gt;Your project will need two directories for Saltstack&amp;rsquo;s files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;pillar/
salt/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;salt&lt;/code&gt; directory will contain the scripts that are responsible for
setting up a particular part of your server, e.g. nginx, postgresql, etc.
&lt;code&gt;pillar&lt;/code&gt; on the other hand will contain the configuration value for each
environment that your app will run in.  So, you might have a &lt;em&gt;staging&lt;/em&gt; and a
&lt;em&gt;production&lt;/em&gt; environment set up there.&lt;/p&gt;
&lt;p&gt;Each of these directories needs a &lt;code&gt;top.sls&lt;/code&gt; file which is what&amp;rsquo;s loaded
first.  For fun, let&amp;rsquo;s just install &lt;code&gt;vim&lt;/code&gt; into a production environment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;pillar/
    top.sls
    production.sls
salt/
    top.sls
    vim.sls
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;salt&#34;&gt;Salt&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;salt/top.sls&lt;/code&gt; file will have a case-expression-like structure, matching
on hostnames of your app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;:
        - vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that &lt;code&gt;sls&lt;/code&gt; files use YAML syntax.&lt;/p&gt;
&lt;p&gt;Here we are installing vim in the production hostname.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;salt/vim.sls&lt;/code&gt; file will look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;vim&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pkg&lt;/span&gt;:
        - installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This simply says that we want the vim package installed.  Saltstack will
automatically detect your package manager (i.e. apt-get, yum, etc).&lt;/p&gt;
&lt;h2 id=&#34;pillar&#34;&gt;Pillar&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;pillar/top.sls&lt;/code&gt; file has the same structure as the main file from the
salt directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;:
        - production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the &lt;code&gt;production&lt;/code&gt; hostname is detected, use the &lt;code&gt;production.sls&lt;/code&gt; file
for configuration.  You can put just about anything you want to the
&lt;code&gt;production.sls&lt;/code&gt; file, be it the servers IP address or the SMTP settings.&lt;/p&gt;
&lt;h2 id=&#34;where-to-put-things&#34;&gt;Where to put things&lt;/h2&gt;
&lt;p&gt;After you&amp;rsquo;ve installed Saltstack on your server, you should copy or symlink the
&lt;code&gt;salt/&lt;/code&gt; and &lt;code&gt;pillar/&lt;/code&gt; directories to the &lt;code&gt;/srv&lt;/code&gt; directory&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;/srv/salt
/srv/pillar
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;running-it&#34;&gt;Running it&lt;/h2&gt;
&lt;p&gt;Once the configuration files are in place, you can run the minion&amp;rsquo;s
provisioning command to get everything configured and installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ salt-call --local state.highstate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Don&amp;rsquo;t ask me why it&amp;rsquo;s like this.  Makes no sense.&lt;/p&gt;
&lt;p&gt;Saltstack will run everything and then report what happened during the run.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to compile vim</title>
      <link>https://honza.ca/2013/07/how-to-compile-vim/</link>
      <pubDate>Thu, 18 Jul 2013 10:16:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/07/how-to-compile-vim/</guid>
      <description>&lt;p&gt;&amp;hellip; from source when you&amp;rsquo;re using the homebrew-provided Python.&lt;/p&gt;
&lt;p&gt;If you have installed Python via homebrew, your vim will compile fine but when
a plugin tries to use Python to do some its work, vim will crash like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://honza.ca/images/vim-crash.png&#34; alt=&#34;&#34;&gt;Not pretty.&lt;/p&gt;
&lt;p&gt;Apparently, this is because vim will use the first Python it can find which in
our case the homebrew-provided one.  You can of course get a pre-compiled
version and ignore this.  But I like to use the latest version of vim and with
the 7.4 beta, I have been doing that a lot lately&amp;hellip;&lt;/p&gt;
&lt;p&gt;So, what is one to do?  We have to fix the &lt;code&gt;PATH&lt;/code&gt;.  Here is the script that I
use to recompile vim.  This goes in the root of the vim project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/bin:/usr/sbin:/sbin:/usr/bin

./configure &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --enable-perlinterp &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --enable-pythoninterp &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --enable-rubyinterp &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --enable-cscope &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;        --with-features&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;huge

make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There and vim is now compiled properly with Python support that won&amp;rsquo;t make you
cry.&lt;/p&gt;
&lt;p&gt;Thanks to Steve Losh for pointing me in the right direction on this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When HN gets in the way</title>
      <link>https://honza.ca/2013/07/when-hn-gets-in-the-way/</link>
      <pubDate>Sat, 13 Jul 2013 22:06:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/07/when-hn-gets-in-the-way/</guid>
      <description>&lt;p&gt;Reading stuff online can become addictive.  So addictive, in fact, that it can
negatively affect your productivity as a programmer.  Most of us go to Hacker
News or Reddit to get our dose of news.  We justify it by saying that it&amp;rsquo;s
&lt;em&gt;research&lt;/em&gt; or that we are &lt;em&gt;trying to stay current in the community&lt;/em&gt;.  Whatever
your excuse, you know you have a problem when you check Hacker News every ten
minutes just to see if anything new and awesome has been added.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Close Hacker News and open a f***ing book.&amp;rdquo;
&amp;ndash; Steve Losh in this &lt;a href=&#34;http://devslovebacon.com/conferences/bacon-2012/talks/eve-working-around-evolution&#34;&gt;talk&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe you have already gotten over the initial self-denial and you have added
some entries to your &lt;code&gt;/etc/hosts&lt;/code&gt; file to keep yourself from constantly going
to those sites.  That&amp;rsquo;s all well and good but I think we can do better.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve already opened the tab and you are now staring at a blank error page.
Why not put something more useful there?&lt;/p&gt;
&lt;p&gt;Me, I like to learn new things.  There are way too many things I&amp;rsquo;d like to
learn.  Why not show a list of things I&amp;rsquo;d like to learn and allow me to click
through to the website?&lt;/p&gt;
&lt;p&gt;I have installed nginx on my machine and set up a simple static page with a few
links things like &lt;em&gt;Learn You a Haskell for Great Good&lt;/em&gt; or Steve Losh&amp;rsquo;s &lt;em&gt;Learn
Vimscript the Hardway&lt;/em&gt;.  Now every time I go to HN, I see those links and am
reminded that I wanted to spend some time learning those things&amp;hellip;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://honza.ca/images/hn_nginx.png&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;p&gt;Install nginx.  &lt;code&gt;brew install nginx&lt;/code&gt; or &lt;code&gt;sudo apt-get install nginx&lt;/code&gt; or
whatever might apply to you.&lt;/p&gt;
&lt;p&gt;Stick this in your &lt;code&gt;nginx.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;worker_processes  1;

http {
    include       mime.types;
    default_type  application/octet-stream;

    keepalive_timeout  65;

    server {
        listen       443;
        server_name  news.ycombinator.com;

        ssl                  on;
        ssl_certificate      /usr/local/etc/nginx/server.crt;
        ssl_certificate_key  /usr/local/etc/nginx/server.key;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }

    server {
        listen       80;
        server_name  reddit.com;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If any of the sites you are blocking are served over SSL, you will need to get
a self-signed certificate.  This is a one time setup and doesn&amp;rsquo;t really take
that long to do.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ openssl req -new -x509 -nodes -out server.crt -keyout server.key
$ chmod 600 server.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you just place those two files to the locations referenced in the above
&lt;code&gt;nginx.conf&lt;/code&gt; file and restart nginx.&lt;/p&gt;
&lt;p&gt;And here is how you can make Chrome stop complaining about your self-signed
certificate (&lt;a href=&#34;http://www.robpeck.com/2010/10/google-chrome-mac-os-x-and-self-signed-ssl-certificates/&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;in-the-address-bar-click-the-little-lock-with-the-x-dot-this-will-bring-up-a&#34;&gt;In the address bar, click the little lock with the X. This will bring up a&lt;/h3&gt;
&lt;p&gt;small information screen. Click the button that says &amp;ldquo;Certificate
Information.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;click-and-drag-the-image-to-your-desktop-dot-it-looks-like-a-little&#34;&gt;Click and drag the image to your desktop. It looks like a little&lt;/h3&gt;
&lt;p&gt;certificate.&lt;/p&gt;
&lt;h3 id=&#34;double-click-it-dot-this-will-bring-up-the-keychain-access-utility-dot-enter-your&#34;&gt;Double-click it. This will bring up the Keychain Access utility. Enter your&lt;/h3&gt;
&lt;p&gt;password to unlock it.&lt;/p&gt;
&lt;h3 id=&#34;be-sure-you-add-the-certificate-to-the-system-keychain-not-the-login&#34;&gt;Be sure you add the certificate to the System keychain, not the login&lt;/h3&gt;
&lt;p&gt;keychain. Click &amp;ldquo;Always Trust,&amp;rdquo; even though this doesn&amp;rsquo;t seem to do
anything.&lt;/p&gt;
&lt;h3 id=&#34;after-it-has-been-added-double-click-it-dot-you-may-have-to-authenticate&#34;&gt;After it has been added, double-click it. You may have to authenticate&lt;/h3&gt;
&lt;p&gt;again. Expand the &amp;ldquo;Trust&amp;rdquo; section.&lt;/p&gt;
&lt;h3 id=&#34;when-using-this-certificate-set-to-always-trust&#34;&gt;&amp;ldquo;When using this certificate,&amp;rdquo; set to &amp;ldquo;Always Trust&amp;rdquo;&lt;/h3&gt;
&lt;h3 id=&#34;that-s-it-close-keychain-access-and-restart-chrome-and-your-self-signed&#34;&gt;That&amp;rsquo;s it! Close Keychain Access and restart Chrome, and your self-signed&lt;/h3&gt;
&lt;p&gt;certificate should be recognized now by the browser.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully, this will be helpful to you and nudge you every now and then to
learn something you&amp;rsquo;ve been putting off.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I hate your code</title>
      <link>https://honza.ca/2013/06/i-hate-your-code/</link>
      <pubDate>Fri, 21 Jun 2013 10:25:00 -0300</pubDate>
      
      <guid>https://honza.ca/2013/06/i-hate-your-code/</guid>
      <description>&lt;p&gt;When starting to work on an existing codebase, I often find myself in a state
of despair.  The code doesn&amp;rsquo;t make any sense, the programmers must have all
been idiots, why &lt;em&gt;on earth&lt;/em&gt; would they do it like this, &amp;hellip;  I hate everything
about the code.&lt;/p&gt;
&lt;p&gt;I spend hours going through it, thinking to myself, &lt;em&gt;I would have done a much
better job writing this&lt;/em&gt; and making a list of changes that &lt;em&gt;must&lt;/em&gt; be done in
order for the project to conform to my standards.&lt;/p&gt;
&lt;p&gt;But then, when I have spent enough time reading everything, something clicks in
my mind.  I see what the authors were trying to do and everything makes sense.
It&amp;rsquo;s actually kind of clever.&lt;/p&gt;
&lt;p&gt;And I feel dumb.  Every time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell vs Clojure syntax</title>
      <link>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</link>
      <pubDate>Tue, 12 Feb 2013 16:33:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</guid>
      <description>&lt;p&gt;Clojure has virtually zero syntax.  What I mean by that is that all structures
look the same: the first item in a list is the function and the rest are the
arguments.  This is true for variable assignment, if statements, data
structures and functions themselves.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;greet [name]
  (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; name))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;user-count &lt;span style=&#34;color:#ae81ff&#34;&gt;334&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, before you can do anything useful in Haskell, you must learn all kinds
of crazy syntax: function definitions, pattern matching, do forms, functors,
monads, typeclasses, &amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return (x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    pure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; something &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap f something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is why I find Haskell extremely hard to learn.  It&amp;rsquo;s not because of
monads, recursion or functional programming concepts.  It&amp;rsquo;s because of the huge
amount of special syntax.  And you need to learn a lot of it before you can do
something useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haskell Strings</title>
      <link>https://honza.ca/2012/10/haskell-strings/</link>
      <pubDate>Wed, 24 Oct 2012 10:01:00 -0300</pubDate>
      
      <guid>https://honza.ca/2012/10/haskell-strings/</guid>
      <description>&lt;p&gt;It continues to amaze me how bad Haskell is at processing strings.  One of the
reasons I wanted to learn Haskell was to be able to write short,
dynamic-language-like programs that execute fast once compiled.  Somehow
rather, Haskell has failed to deliver on its promise of &lt;em&gt;bare metal&lt;/em&gt; speed.  I
mostly write scripts and utilities meant to run on my machine&amp;mdash;these scripts
mostly process text.  Read a file, parse it and spit something out.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s build a simple program that will show what I&amp;rsquo;m talking about.&lt;/p&gt;
&lt;h3 id=&#34;read-a-file-called-file-which-contains-prose&#34;&gt;Read a file called &lt;code&gt;file&lt;/code&gt; which contains prose&lt;/h3&gt;
&lt;h3 id=&#34;capitalize-every-word-in-that-body-of-text&#34;&gt;Capitalize every word in that body of text&lt;/h3&gt;
&lt;h3 id=&#34;print-the-result-to-stdout&#34;&gt;Print the result to stdout&lt;/h3&gt;
&lt;p&gt;We will be testing our programs with a file with about 1.2 million lines of
Lorem Ipsum.  This file is around 75MB.&lt;/p&gt;
&lt;p&gt;Here is attemp number one.  This is really simple Haskell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Normal.hs&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Main &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Char

&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unlines &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (map convertLine) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; lines

&lt;span style=&#34;color:#a6e22e&#34;&gt;convertLine&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convertLine&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unwords &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (map convertWord) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; words

&lt;span style=&#34;color:#a6e22e&#34;&gt;convertWord&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convertWord&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (toUpper (head s))&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;(tail s)

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; readFile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;
    putStr &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; convert name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compile and execute with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;ghc -O2 -o normal Normal.hs
time ./normal &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This takes about 17 seconds.  Let&amp;rsquo;s see if we can do any better.  When you
complain about Strings in Haskell being slow on some neckbeard forum, people
will tell you to use &lt;code&gt;Data.Text&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Main.hs&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Main &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Char
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; T
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text.IO &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; X

&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unlines &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (map convertLine) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines

&lt;span style=&#34;color:#a6e22e&#34;&gt;convertLine&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convertLine&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unwords &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (map convertWord) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;words

&lt;span style=&#34;color:#a6e22e&#34;&gt;convertWord&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convertWord&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cons (toUpper (&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head s)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail s)

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readFile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;putStr &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; convert name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is mostly the same as above.  Instead of using the &lt;code&gt;String&lt;/code&gt; type to work
with text, we use the &lt;code&gt;Data.Text.Text&lt;/code&gt; type.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;ghc -O2 -o main Main.hs
time ./main &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How did it do?  One entire minute, that&amp;rsquo;s 5 times slower.  And it uses obscene
amounts of memory (around 600MB on my machine).  Let&amp;rsquo;s use lazy IO when reading
the file, maybe it will improve.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- change this&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; T
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text.IO &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; X

&lt;span style=&#34;color:#75715e&#34;&gt;-- to this&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text.Lazy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; T
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text.Lazy.IO &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This clocks in at 27 seconds.  Much better than the non-lazy version.  Next
thing to try is to ignore unicode and go for the ultimate, bare-metal speed.
Let&amp;rsquo;s use &lt;code&gt;ByteString&lt;/code&gt; instead of &lt;code&gt;Text&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Byte &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Char
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; B
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString.Char8 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; C

&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unlines &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (map convertLine) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines

&lt;span style=&#34;color:#a6e22e&#34;&gt;convertLine&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convertLine&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unwords &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; (map convertWord) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;words

&lt;span style=&#34;color:#a6e22e&#34;&gt;convertWord&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convertWord&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cons (toUpper (&lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head s)) (&lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail s)

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readFile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;putStr &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; convert name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hm, not that much better.  27 seconds.  That&amp;rsquo;s about as good as the lazy
version when using &lt;code&gt;Text&lt;/code&gt;.  Let&amp;rsquo;s see if we can squeeze more perfomance out
of this with a lazy &lt;code&gt;ByteString&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- change this&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; B
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString.Char8 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; C

&lt;span style=&#34;color:#75715e&#34;&gt;-- to this&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString.Lazy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; B
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString.Lazy.Char8 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This takes about 10 seconds.  Awesome.  This is the best I can do with Haskell.
10 seconds to process 1.2 million lines of text.  I guess that&amp;rsquo;s not too bad.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;EDIT&lt;!-- raw HTML omitted --&gt;: Someone &lt;a href=&#34;http://www.reddit.com/r/haskell/comments/120h6i/why%5Fis%5Fthis%5Fsimple%5Ftext%5Fprocessing%5Fprogram%5Fso/c6r6rm1&#34;&gt;pointed out on Reddit&lt;/a&gt; that this whole thing can be
accomplished as a simple one-liner.  This is actually a pretty elegant
solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Main &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Char
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text.Lazy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; T
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text.Lazy.IO &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; X

&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Text&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scanl (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;a b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isSpace a &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; toUpper b &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; b) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readFile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;putStr &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; convert name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This clocks in at 8.5 seconds.  Not bad at all.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;EDIT 5&lt;!-- raw HTML omitted --&gt;: Someone pointed out that I didn&amp;rsquo;t include a version of the
one-liner that uses &lt;code&gt;ByteString&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Main &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Char
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString.Char8 &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; T

&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ByteString&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scanl (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;a b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isSpace a &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; toUpper b &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; b) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readFile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;putStr &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; convert name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This clocks in at 3.5s on my machine.  Pretty fast!&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s try this in Python&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;(data):
    lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([process_line(line) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines])


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_line&lt;/span&gt;(line):
    words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
    new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;capitalize() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; words]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(new)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; process(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Execute with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ time python main.py &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Six seconds!  Six!  How can a dynamic language be so much faster than compiled
Haskell?&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;EDIT 4&lt;!-- raw HTML omitted --&gt;: There has been some discussion on Reddit about being able to
accomplish this task in only one line in Haskell.  It&amp;rsquo;s actually possible in
Python, too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This clocks in at 2 seconds.&lt;/p&gt;
&lt;h2 id=&#34;javascript-and-v8&#34;&gt;Javascript and V8&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// main.js
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;capitalize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toUpperCase&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processLine&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;capitalize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processLine&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lines&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;);
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Execute it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ time node main.js &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wait for it!  4.5 seconds.  I have no words.&lt;/p&gt;
&lt;h2 id=&#34;how-about-go&#34;&gt;How about Go?&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;EDIT 3&lt;!-- raw HTML omitted --&gt;: (Add this section.  Looks like this post is turning into a language
shootout, le sigh).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Put this into &lt;code&gt;title.go&lt;/code&gt;, compile and run with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ go build title.go
$ time ./title &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is around 2 seconds.  Pretty crazy performance.  Only twice the time
compared to C.&lt;/p&gt;
&lt;h2 id=&#34;how-about-c&#34;&gt;How about C?&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;EDIT 2&lt;!-- raw HTML omitted --&gt;: (Add this section)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/andrewstwrt&#34;&gt;Andrew Stewart&lt;/a&gt; has graciously written a C version of this program.  Like he
&lt;a href=&#34;https://twitter.com/andrewstwrt/status/261282584263286784&#34;&gt;said&lt;/a&gt;, you should do all of your scripting in C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// script.c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; filename[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;;
    FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(filename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (file &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(fgets(line, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; line, file) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
        line[strcspn (line, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lengthOfLine &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(line);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lengthOfLine; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isalpha(line[i])) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;word) {
                line[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;) toupper (line[i]);
                word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            }
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            }
        }

        printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, line);
        }

        fclose(file);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        perror(filename);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compile and run this with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ gcc -o script script.c
$ time ./script &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course, this is ripping fast.  It takes about 1 second (1.05-1.15, never
below 1).&lt;/p&gt;
&lt;h2 id=&#34;recap&#34;&gt;Recap&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Haskell - String              17s
Haskell - Text                60s
Haskell - Text (Lazy)         27s
Haskell - ByteString          27s
Haskell - ByteString (Lazy)   10s
Haskell - Text, scanl (Lazy)  8.5s
Haskell - ByteString, scanl   3.5s

Python -                      6s
Python - One line, titl()     2s

Javascript &amp;amp; V8               4.5s

Go                            2s

C                             1s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not sure if I want to continue learning Haskell after this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Learning Clojure</title>
      <link>https://honza.ca/2012/08/on-learning-clojure/</link>
      <pubDate>Sun, 26 Aug 2012 22:45:00 -0300</pubDate>
      
      <guid>https://honza.ca/2012/08/on-learning-clojure/</guid>
      <description>&lt;h2 id=&#34;prefix-notation&#34;&gt;Prefix notation&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a big fan of the prefix notation.  It makes everything appear the same
(if-statements, function calls , etc).  I like how it removes the need for
operator precedence rules.&lt;/p&gt;
&lt;h2 id=&#34;all-the-parentheses&#34;&gt;All the parentheses&lt;/h2&gt;
&lt;p&gt;Once you get into learning Clojure and you have written a small application,
you don&amp;rsquo;t really see the parens anymore.  Sure, sometimes you still get the
&lt;em&gt;Unbalanced parens&lt;/em&gt; error but those are easy to spot.  If you are afraid of
learning a LISP because of this, don&amp;rsquo;t worry, you&amp;rsquo;ll be fine.&lt;/p&gt;
&lt;h2 id=&#34;jvm&#34;&gt;JVM&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s just say that the start-up time of the JVM isn&amp;rsquo;t the fastest.  This makes
Clojure effectively useless for writing utility scripts.  However, the JVM is a
robust platform that runs your code really fast.  With Clojure, you get all the
benefits of the JVM: garbage collection, JIT, uberjars, etc.  Using Java
libraries in Clojure is usually pretty straightforward if you know the basics
of Java (but the code isn&amp;rsquo;t the prettiest).  This is great because some of the
lower level stuff doesn&amp;rsquo;t have to be reimplemented (think SHA1 digests,
sockets, etc).&lt;/p&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;The language itself seems to be documented pretty well.  I haven&amp;rsquo;t had any
issues when trying to find the signature for a built-in function.  However, the
community isn&amp;rsquo;t exactly known for writing documentation.  Most of the time, you
find a library on Github and you are left to read the source.  If you are
lucky, you are told what to import and a few basic examples.  Good
documentation is something I take for granted coming from the Python world.&lt;/p&gt;
&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;
&lt;p&gt;While you can certainly find a lot of good libraries for doing common things,
one area is still painful to develop for: the web.  Clojure still needs a
Django-like web framework that has all the batteries included.  Right now, the
only popular web framework is Noir and it&amp;rsquo;s more like Sinatra or Flask.
Without a Django-like platform, you end up reinventing all the common things
for every application: authentication, form validation, ORM, etc.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really like the language.  I like the functional aspects of it and the
immutability.  I like lazy sequences and refs.  What I don&amp;rsquo;t like is that the
community and the ecosystem is still a bit young and immature.  I find myself
waiting for stuff to happen before I can use this language more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Rackspace deleted my server</title>
      <link>https://honza.ca/2012/02/how-rackspace-deleted-my-server/</link>
      <pubDate>Wed, 15 Feb 2012 08:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/02/how-rackspace-deleted-my-server/</guid>
      <description>&lt;p&gt;I have been with Rackspace for a while now and never had problems.  The server
has been fast and responsive and their prices are great.  However, what
happened yesterday blew my mind and totally made me change how I view server
providers as a whole&amp;mdash;including the likes of AWS and Heroku.&lt;/p&gt;
&lt;p&gt;Here is how it went down.&lt;/p&gt;
&lt;h2 id=&#34;2-07pm-cst&#34;&gt;2:07pm CST&lt;/h2&gt;
&lt;p&gt;I got an email from one of my administrators that the front end was
unreachable.  I immediately tried to visit the web application in my browser,
log into the machine via SSH and ping the server IP address.  All failed.  I
went on the Rackspace Cloud Server Live Chat to raise the issue with them.&lt;/p&gt;
&lt;h2 id=&#34;2-48pm-cst&#34;&gt;2:48pm CST&lt;/h2&gt;
&lt;p&gt;I was told to open a ticket through the admin console.  So I did and I handed
the ticket number to the operator who said they&amp;rsquo;d pass it on to operations.&lt;/p&gt;
&lt;h2 id=&#34;5-05pm-cst&#34;&gt;5:05pm CST&lt;/h2&gt;
&lt;p&gt;I got a reply on the ticket.  All it says is &lt;em&gt;we&amp;rsquo;re working on it&lt;/em&gt;.  At this
point, I&amp;rsquo;m freaking out because I have been down for over three hours.&lt;/p&gt;
&lt;h2 id=&#34;6-00pm-cst&#34;&gt;6:00pm CST&lt;/h2&gt;
&lt;p&gt;Still no word from Rackspace.  I got on the phone and explained the issue and
that I didn&amp;rsquo;t feel it was being taken seriously.  The operator got the account
manager on the phone who in turn got a &lt;em&gt;tech guy&lt;/em&gt; on the call.  They said that
the VM wasn&amp;rsquo;t built properly when I first created it like 6 months ago and that
at that time it was queued up to be deleted and rebuilt.  It took this long to
finally come down the queue and actually get deleted.  They said they would
rebuild the server and let me keep the same IP and that I would get an email
with new credentials.&lt;/p&gt;
&lt;h2 id=&#34;6-17pm-cst&#34;&gt;6:17pm CST&lt;/h2&gt;
&lt;p&gt;I received said email and started to restore the server.  Luckily, I had a
working Chef script which made this very simple to do.  I think I was back
online in about 30 minutes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Everyone has been really nice and apologetic.  They even gave me a month&amp;rsquo;s
credit to cover the damages.  I still think Rackspace is great but this whole
incident made me realize that anything can fail and that you should design your
application for easy recovery.  And test your backups!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remap CapsLock to something useful</title>
      <link>https://honza.ca/2012/02/remap-capslock-to-something-useful/</link>
      <pubDate>Tue, 07 Feb 2012 09:30:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/02/remap-capslock-to-something-useful/</guid>
      <description>&lt;p&gt;Arguably, CapsLock is &lt;a href=&#34;http://capsoff.org/&#34;&gt;the most useless key&lt;/a&gt; on your keyboard. I honestly
can&amp;rsquo;t remember the last time I had a real use for it. If are a programmer, you
should remap it to something more useful. The rest of this post will describe
how to remap your CapsLock on a Mac OSX installation.&lt;/p&gt;
&lt;h2 id=&#34;what-we-are-going-to-do&#34;&gt;What we are going to do&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a heavy vim user and reaching for the Esc key all the is a pain. We will
remap the CapsLock to Esc. However, I want to be able to use it for something
else if I&amp;rsquo;m not in vim. We will set it up so that when you hit CapsLock on its
own, it will send Esc. However, if you hold CapsLock and press another key, it
will send Ctrl. That way you can do things like Ctrl+F, etc.&lt;/p&gt;
&lt;p&gt;On Mac OSX, you will want to do use &lt;a href=&#34;https://pqrs.org/osx/karabiner/&#34;&gt;Karabiner&lt;/a&gt;. It&amp;rsquo;s an excellent
piece of software that will allow you to take control of your keyboard.&lt;/p&gt;
&lt;h2 id=&#34;settings&#34;&gt;Settings&lt;/h2&gt;
&lt;p&gt;Once you have installed KeyRemap4MacBook, go to System Preferences and select
the Keyboard submenu. Hit the Modifier Keys button and remap CapsLock to Ctrl.
You will have to do this once for every keyboard that you use.&lt;/p&gt;
&lt;p&gt;Next, head over to the KeyRemap4MacBook settings. The magical setting you are
looking for is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;Control_L to Control_L
    (+ When you type Control_L only, send Escape)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How not to depend on PyPI</title>
      <link>https://honza.ca/2012/02/how-not-to-depend-on-pypi/</link>
      <pubDate>Sat, 04 Feb 2012 20:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/02/how-not-to-depend-on-pypi/</guid>
      <description>&lt;p&gt;When deploying a Django application, you often use a &lt;code&gt;requirements.txt&lt;/code&gt; file
that contains a list of the application&amp;rsquo;s dependencies. During deployment, your
provisioning system will &lt;code&gt;pip install&lt;/code&gt; all of those to make sure that your
application runs as desired.&lt;/p&gt;
&lt;p&gt;The format of a typical &lt;code&gt;requirements.txt&lt;/code&gt; files isn&amp;rsquo;t unlike the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;django==1.3.1
psycopg2==2.4.4
Fabric==1.3.3
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, &lt;code&gt;pip&lt;/code&gt; will go to the &lt;a href=&#34;http://pypi.python.org&#34;&gt;Python Package Index&lt;/a&gt; (PyPI) and look for
that package there.&lt;/p&gt;
&lt;p&gt;Unfortunately, PyPI has been known to be down or slow at times; and you want
your deployments to be as smooth as possible.&lt;/p&gt;
&lt;h2 id=&#34;what-you-can-do&#34;&gt;What you can do&lt;/h2&gt;
&lt;p&gt;Instead of depending on PyPI for a production application, you can host the
packages that your application needs yourself. It&amp;rsquo;s actually surpringly easy to
do. Your existing deployment strategy can easily be modified to remove the
dependency.&lt;/p&gt;
&lt;p&gt;First, we will create a freeze of your requirements. This will look into your
environment and figure out which version of which package you will need for the
production environment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ pip freeze -r requirements.txt &amp;gt; freeze.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have the list of packages, you can tell &lt;code&gt;pip&lt;/code&gt; to download all the
packages into a directory without installing them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ pip install -d pypi -r freeze.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will download all packages from &lt;code&gt;freeze.txt&lt;/code&gt; into the &lt;code&gt;pypi/&lt;/code&gt;
directory.&lt;/p&gt;
&lt;p&gt;The next step is to upload all these packages to a publicly accessible server
that can serve static files. This can anything from S3, Cloudfiles or even
Github pages. I like to place all of these packages into a &lt;code&gt;packages/&lt;/code&gt;
directory. You will also need a simple index file to go with your packages. All
the index file needs to is provide a list of HTML links to those packages. The
index will be used by &lt;code&gt;pip&lt;/code&gt; to locate the package source distribution.&lt;/p&gt;
&lt;p&gt;I have put together a simple Fabric task that will read the contents of the
&lt;code&gt;pypi/&lt;/code&gt; directory and create this index file for you.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_index&lt;/span&gt;():
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls pypi&amp;#39;&lt;/span&gt;, capture&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
    packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

    html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span&gt;

    links &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; package &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; packages:
        link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;packages/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (package, package)
        links&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(link)

    links &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(links)

    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(html &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; links)
    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Upload the index file to your server and you&amp;rsquo;re ready to deploy. Instead of the
usual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will run this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;$ pip install -r freeze.txt -f http://yourPypiHost.com/index.html --no-index
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will completely ignore PyPI and only use your index when locating
packages. This way your deploys will be faster and more reliable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrading your Django media files to use a CDN</title>
      <link>https://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn/</link>
      <pubDate>Tue, 17 Jan 2012 08:45:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn/</guid>
      <description>&lt;p&gt;I was using &lt;a href=&#34;http://readthedocs.org/docs/django-filebrowser/en/latest/&#34;&gt;django-filebrowser&lt;/a&gt; on a project and my Rackspace VM quickly ran
out of disk space. Since the site isn&amp;rsquo;t getting much traffic at all, I didn&amp;rsquo;t
want to pay extra for a bigger VM. Instead, I decided to move all of the user
uploaded media to &lt;a href=&#34;http://www.rackspace.com/cloud/cloud%5Fhosting%5Fproducts/files/&#34;&gt;Rackspace Cloudfiles&lt;/a&gt;. It&amp;rsquo;s super cheap and they have a
nice API.&lt;/p&gt;
&lt;p&gt;Now, the challenge was to make the transition from a filebrowser-based system.
First of all, I knew I was going to use &lt;a href=&#34;http://django-storages.readthedocs.org/en/latest/index.html&#34;&gt;django-storages&lt;/a&gt; as the new storage
class for my class. I played around with it on the side and it worked like a
charm.&lt;/p&gt;
&lt;p&gt;Next, I wrote a quick little Python script to upload all of the files to
Cloudfiles. Since the filenames didn&amp;rsquo;t change at all, I could just write a
South migration that would strip the &lt;code&gt;/uploads&lt;/code&gt; part and be done with it.&lt;/p&gt;
&lt;p&gt;I had a look at the Django documentation to see what exactly a &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/ref/models/fields/#filefield&#34;&gt;FileField&lt;/a&gt; was.
It turns out it takes a Django &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/ref/files/file/#django.core.files.File&#34;&gt;File&lt;/a&gt; object which in turn is a thin wrapper
around the Python built-in file object. This didn&amp;rsquo;t sound exactly easy to do. I
would have to open a remote file with Python&amp;rsquo;s &lt;code&gt;open(&#39;file.mp3&#39;)&lt;/code&gt; and have
Django inspect it for size and file type. This is clunky at best if you
remember that this will have to live in a South migration.&lt;/p&gt;
&lt;p&gt;Also worth noting is the fact that filebrowser&amp;rsquo;s model field is a subclass of
&lt;code&gt;CharField&lt;/code&gt; and has no special file-related properties or methods.&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t use the &lt;code&gt;DEFAULT_STORAGE_CLASS&lt;/code&gt; setting because filebrowser will
start yelling at you. Instead, you specify the storage class right in the new
model field.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; storages.backends.mosso &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; cloudfiles_upload_to, CloudFilesStorage
cloudfiles_storage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CloudFilesStorage()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Item&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    old_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FileBrowseField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, blank&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
    new_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FileField(upload_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cloudfiles_upload_to,
            storage&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cloudfiles_storage, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can go and write your migration and Django won&amp;rsquo;t yell at you. Now we go
back to the problem outlined above. How do you create an instance of &lt;code&gt;File&lt;/code&gt;
to pass to &lt;code&gt;item.new_field&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After hours of reading the source and debugging, I realized that you can simply
pass in the filename as a string and the storage class will do the right thing.
It&amp;rsquo;s actually really simple and painless. Your data migration might look
something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
    item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;old_field&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url)
    item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, I was already somewhat overjoyed that this would in fact be easy and then I
discovered that the change from filebrowser to django-storages doesn&amp;rsquo;t require
a schema migration. This means that if your file names are the same there is no
database change needed at all. How cool is that?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Node.js modules</title>
      <link>https://honza.ca/2012/01/writing-node.js-modules/</link>
      <pubDate>Thu, 05 Jan 2012 14:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2012/01/writing-node.js-modules/</guid>
      <description>&lt;p&gt;To say that node.js has enjoyed a great deal of positive publicity in the last
few months would most certainly be an understatement. New node.js-related
projects are popping up all over the place, and there seems to be this notion
that if you aren&amp;rsquo;t using it you&amp;rsquo;re not cool enough.&lt;/p&gt;
&lt;p&gt;Over the Christmas holidays, I sat down to sort out my photo library and I
wanted to make a web photo gallery to share the images with family and friends.
Being a mainly Python programmer, I wrote a Python script that will go through
all of my photos and create smaller versions and thumbnails of the images that
are suitable for the web. I think I have around 1500 images at the moment and
it took a good 20 minutes to convert everything using Python Imaging Library.&lt;/p&gt;
&lt;p&gt;I was rather frustrated with the performance. I think the reason for the
slowness was the fact that the images were processed sequentially, one by one.
What if I could modify my program to process more than one image at a time.
This would certainly speed by the process. Then I thought about using threads
in Python and I think I threw up in my mouth a little.&lt;/p&gt;
&lt;p&gt;Then I remembered Node.js. It&amp;rsquo;s supposed to be all asynchronous and
non-blocking. Perfect match. So I wrote a thumbnailer in node.&lt;/p&gt;
&lt;p&gt;Essentially, it&amp;rsquo;s a worker queue that resizes images. You give it a source and
destination directories and a number of workers and run it. The total time went
from 20 minutes to 2 using about 5 workers. Much better, eh?&lt;/p&gt;
&lt;p&gt;I decided to open source the project because I couldn&amp;rsquo;t find any node.js
projects that do something even remotely similar. It&amp;rsquo;s called &lt;a href=&#34;https://github.com/honza/node-thumbnail&#34;&gt;node-thumbnail&lt;/a&gt;
and you can find it on both Github and npmjs.&lt;/p&gt;
&lt;p&gt;So what does the API look like?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;thumb&lt;/span&gt;({
  &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;source/path&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;destination&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dest/path&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;concurrency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
  }, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;All done!&amp;#39;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Data-driven javascript applications</title>
      <link>https://honza.ca/2011/10/data-driven-javascript-applications/</link>
      <pubDate>Tue, 25 Oct 2011 11:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/10/data-driven-javascript-applications/</guid>
      <description>&lt;p&gt;Over the last few weeks, I have been trying to think of a way to design medium
to large client-heavy web applications. There are many projects and ideas
floating around that are meant to help you with this and I have had a look at
quite a few of them. I don&amp;rsquo;t mean to say that I found the best one &amp;mdash; just one
that I like.&lt;/p&gt;
&lt;p&gt;I want to talk about data-driven applications. What I mean is that everything
you do somehow manipulates or shows specific data. Let me describe what I mean
by a way of example. I have been working on a piece of photo gallery software
called &lt;code&gt;rembrant&lt;/code&gt;. The interface for actually organizing your images into
albums is very client-heavy.&lt;/p&gt;
&lt;p&gt;The user interface is similar to that of iPhoto. The larger panel displays a
grid of small thumbnails. The sidebar shows a list of albums and a count of
selected images.&lt;/p&gt;
&lt;p&gt;When the application loads, it makes two calls to the server: one to get a list
of all images (image models, including metadata), and a second to get album
information. Everything else in the UI is based on these two lists. The list of
albums and the image grid are pretty self-explanatory.&lt;/p&gt;
&lt;p&gt;Once the browser has this data, we can start building out the &lt;em&gt;views&lt;/em&gt;. A view
is a little windows, or a perspective upon a piece of data. It&amp;rsquo;s meant to
display the data in a meaningful way to the user. For example, in our
application, there is a list of albums in the sidebar. These are represented as
list items with anchor tags:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SidebarView&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Backbone&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;View&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt;({
  &lt;span style=&#34;color:#a6e22e&#34;&gt;el&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#sidebar&amp;#39;&lt;/span&gt;),

  &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;click #new-album-link&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newAlbum&amp;#39;&lt;/span&gt;
  },

  &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
  },

  &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;album&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;albumView&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SidebarAlbumView&lt;/span&gt;({
      &lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;album&lt;/span&gt;
    });
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;el&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;albumView&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;el&lt;/span&gt;);
  },

  &lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;models&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;models&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here you can see we are binding the view to an existing DOM element with an ID
of &lt;em&gt;sidebar&lt;/em&gt;. The &lt;code&gt;@collection&lt;/code&gt; variable is the collection of albums we spoke
about earlier. The view subscribes to the collection&amp;rsquo;s &lt;em&gt;reset&lt;/em&gt; and &lt;em&gt;add&lt;/em&gt;
events. When a new album is added to the collection, the view will
automatically update itself. Also, the &lt;em&gt;events&lt;/em&gt; hash allows us to bind event
handlers to DOM elements in the sidebar.&lt;/p&gt;
&lt;p&gt;You may have noticed that I&amp;rsquo;m using Backbone to actually structure the
application. I find that Backbone provides a good compromise between structure
and freedom to do as you please. To be honest, it took me a good while to wrap
my head around what Backbone is trying to do for you. It may seem a little
wordy at times but you shouldn&amp;rsquo;t expect your application to consist of little
code.&lt;/p&gt;
&lt;p&gt;Now, suppose we wanted to add a count to each album list item which would
indicate how many photos are currently in that album. This is easily done by
inspecting the photos collection. Backbone provides a simple way to filter your
collection based on predefined criteria. To get all photos that belong to the
album with an ID of &lt;code&gt;1&lt;/code&gt;, we would do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PhotoCollection&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Backbone&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Collection&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt;({
  &lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Photo&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/photos&amp;#39;&lt;/span&gt;,

  &lt;span style=&#34;color:#a6e22e&#34;&gt;byAlbum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;photo&lt;/span&gt;) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;photo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;albums&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    });
  }
});

&lt;span style=&#34;color:#75715e&#34;&gt;// collection is an instance of PhotoCollection
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;photos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;byAlbum&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, this is very simple and elegant. Now, if a photo is deleted, it
will be removed from the collection. This will be reflected both in the grid
and in the sidebar. It will all work automatically because all of the views are
looking at the same date. They are subscribed to the data&amp;rsquo;s events and react
accordingly.&lt;/p&gt;
&lt;p&gt;The nice thing is that you don&amp;rsquo;t have to worry about changing classes, binding
data to DOM elements, attaching click handlers, making AJAX requests, none of
this. The difficult part about this approach is deciding what your elementary
data is and how you should get it. In the case of &lt;code&gt;rembrant&lt;/code&gt; it was pretty
simple.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Chef with small Django apps</title>
      <link>https://honza.ca/2011/09/using-chef-with-small-django-apps/</link>
      <pubDate>Tue, 20 Sep 2011 20:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/09/using-chef-with-small-django-apps/</guid>
      <description>&lt;p&gt;This year at &lt;a href=&#34;http://djangocon.us&#34;&gt;DjangoCon&lt;/a&gt;, it seemed like everybody was talking about automatic
deployments and namely &lt;a href=&#34;http://www.opscode.com/chef/&#34;&gt;Chef&lt;/a&gt;. After coming home from the conference, I spent
a considerable amount of time learning chef and thinking about how it can be
best used with small to medium size Django apps. In this post, I will walk you
through how Chef works and how it can help you make awesome web apps.&lt;/p&gt;
&lt;p&gt;When I say small apps, I mean single-server deployments. This means that your
web server, your database, memcached, rabbitmq, etc is installed on a single
Ubuntu VM. When learning Chef, I found that most of the available tutorials
focus on multi-server setups and are too complex for ordinary apps.&lt;/p&gt;
&lt;p&gt;Unfortunately, Chef is written in Ruby and it can be a little tricky to debug
since all the tracebacks are meaningless to a Python developer. However, don&amp;rsquo;t
despair, you can usually tell pretty quickly what&amp;rsquo;s going on. To test your
deployment, we will be using &lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; which is an awesome tool for running
virtual machines on your development machine.&lt;/p&gt;
&lt;h2 id=&#34;what-we-will-install&#34;&gt;What we will install&lt;/h2&gt;
&lt;p&gt;Our Django application will be deployed using the following:&lt;/p&gt;
&lt;h3 id=&#34;nginx&#34;&gt;nginx&lt;/h3&gt;
&lt;h3 id=&#34;gunicorn&#34;&gt;gunicorn&lt;/h3&gt;
&lt;h3 id=&#34;postgresql&#34;&gt;postgresql&lt;/h3&gt;
&lt;h3 id=&#34;memcached&#34;&gt;memcached&lt;/h3&gt;
&lt;h3 id=&#34;rabbitmq&#34;&gt;rabbitmq&lt;/h3&gt;
&lt;h3 id=&#34;git&#34;&gt;git&lt;/h3&gt;
&lt;p&gt;Your development machine will need to have &lt;a href=&#34;http://docs.fabfile.org/en/1.2.2/index.html&#34;&gt;Fabric&lt;/a&gt; installed.&lt;/p&gt;
&lt;h2 id=&#34;how-chef-works&#34;&gt;How Chef works&lt;/h2&gt;
&lt;p&gt;Chef is a tool that is installed on your server. You give it a bunch
configuration files and tell it to provision server with the necessary packages
and settings. This means that our automatic deployment will have to parts: Chef
configuration files for the sever, and several Fabric tasks to install Chef
remotely and start the provisioning process.&lt;/p&gt;
&lt;p&gt;So, to configure Chef, we will create a &lt;em&gt;deploy&lt;/em&gt; directory inside our project&amp;rsquo;s
repository. I like to keep the following structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ls -a
.git coolapp docs deploy README.md Vagrantfile fabfile.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;hellip; where &lt;em&gt;coolapp&lt;/em&gt; is your Django project. We will focus on the &lt;em&gt;deploy&lt;/em&gt;
directory and the &lt;em&gt;fabfile&lt;/em&gt;. Chef is a cook how prepares your server for
dinner. So, Chef needs some cookbooks and recipes. Each cookbook is a directory
that contains various configuration files for a specific application that you
want installed. So for example, you will have a &lt;em&gt;PostgreSQL cookbook&lt;/em&gt; and a
&lt;em&gt;nginx cookbook&lt;/em&gt;. The  deploy directory will contain a directory called
&lt;em&gt;cookbooks&lt;/em&gt; which will contain all other cookbooks. Now, the good news is that
you don&amp;rsquo;t have to make the cookbooks yourself. &lt;a href=&#34;http://www.opscode.com&#34;&gt;Opscode&lt;/a&gt;, the company behind
Chef, maintains a large selection of cookbooks on &lt;a href=&#34;https://github.com/opscode/cookbooks&#34;&gt;Github&lt;/a&gt;. You can copy and
paste the cookbooks you need for you project. We will need the following:&lt;/p&gt;
&lt;h3 id=&#34;build-essential--for-building-from-source&#34;&gt;build-essential (for building from source)&lt;/h3&gt;
&lt;h3 id=&#34;erlang--rabbitmq-depends-on-this&#34;&gt;erlang (rabbitmq depends on this)&lt;/h3&gt;
&lt;h3 id=&#34;git&#34;&gt;git&lt;/h3&gt;
&lt;h3 id=&#34;memcached&#34;&gt;memcached&lt;/h3&gt;
&lt;h3 id=&#34;nginx&#34;&gt;nginx&lt;/h3&gt;
&lt;h3 id=&#34;postgresql&#34;&gt;postgresql&lt;/h3&gt;
&lt;h3 id=&#34;python--for-virtualenv-and-python-header-files&#34;&gt;python (for virtualenv and python header files)&lt;/h3&gt;
&lt;h3 id=&#34;rabbitmq&#34;&gt;rabbitmq&lt;/h3&gt;
&lt;h2 id=&#34;cookbooks&#34;&gt;Cookbooks&lt;/h2&gt;
&lt;p&gt;Each cookbook contains a &lt;em&gt;recipes&lt;/em&gt; directory. Each recipe tells Chef how this
particular application is to be installed and configured. For example, it will
tell nginx to create an entry in &lt;em&gt;sites-available&lt;/em&gt; and &lt;em&gt;sites-enabled&lt;/em&gt;. Or, it
will restart PostreSQL when it&amp;rsquo;s done being installed.&lt;/p&gt;
&lt;p&gt;There is also a &lt;em&gt;files&lt;/em&gt; directory and a &lt;em&gt;templates&lt;/em&gt; directory. Templates are
Ruby templates which define a particular configuration file. For example, in
order for Chef to be able to properly configure nginx with the proper server
name, it needs to know on what domain your application will be hosted. More on
this later, but there is a master file which has all your settings in it and
Chef reads from that and substitutes the necessary values. The &lt;em&gt;files&lt;/em&gt;
directory contains files that need no further modification and can be copied
over verbatim.&lt;/p&gt;
&lt;h2 id=&#34;node-dot-json&#34;&gt;node.json&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;node.json&lt;/em&gt; file is a per project file that specifies certain values for
Chef to use. For example, you can tell Chef what you want your PostgreSQL
database to be called, what the name of your django project is, etc. It has a
simple JSON syntax.&lt;/p&gt;
&lt;h2 id=&#34;your-app-s-recipe&#34;&gt;Your app&amp;rsquo;s recipe&lt;/h2&gt;
&lt;p&gt;Your application is going to need a simple recipe. This means creating a
cookbook bearing your project&amp;rsquo;s name and creating a &lt;em&gt;recipes&lt;/em&gt; directory within
in. The recipe should be called &lt;em&gt;default.rb&lt;/em&gt; and all it needs to include is a
list of applications to install. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Example django app cookbook&lt;/span&gt;

execute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update apt repos&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apt-get update&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;
include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build-essential&amp;#39;&lt;/span&gt;
include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;postgresql::server&amp;#39;&lt;/span&gt;
include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;memcached&amp;#39;&lt;/span&gt;
include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;runit&amp;#39;&lt;/span&gt;
include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git&amp;#39;&lt;/span&gt;

execute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;restart postgres&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudo /etc/init.d/postgresql-8.4 restart&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

execute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;create-database&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;createdb -U postgres -O postgres &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:dbname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see it&amp;rsquo;s pretty simple. We update Ubuntu&amp;rsquo;s repositories, include some
recipes, restart PostgreSQL and create a new database.&lt;/p&gt;
&lt;h2 id=&#34;start-the-engines&#34;&gt;Start the engines&lt;/h2&gt;
&lt;p&gt;At this point, you can try out your configuration with Vagrant. To help you
out, I have create a &lt;a href=&#34;https://github.com/honza/django-chef&#34;&gt;template&lt;/a&gt; project on Github that you can download and
use out of the box.&lt;/p&gt;
&lt;p&gt;The next big part is writing the Fabric scripts. You will want the following
tasks:&lt;/p&gt;
&lt;h3 id=&#34;install-chef&#34;&gt;Install Chef&lt;/h3&gt;
&lt;h3 id=&#34;transfer-the-cookbooks-directory-to-the-server&#34;&gt;Transfer the cookbooks directory to the server&lt;/h3&gt;
&lt;h3 id=&#34;dl-class-docutils&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;creating-a-virtualenv&#34;&gt;Creating a virtualenv&lt;/h3&gt;
&lt;h3 id=&#34;installing-requirements&#34;&gt;Installing requirements&lt;/h3&gt;
&lt;h3 id=&#34;syncing-the-database&#34;&gt;Syncing the database&lt;/h3&gt;
&lt;h3 id=&#34;running-migrations&#34;&gt;Running migrations&lt;/h3&gt;
&lt;h3 id=&#34;starting-gunicorn&#34;&gt;Starting gunicorn&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;deploy&#34;&gt;Deploy&lt;/h3&gt;
&lt;p&gt;You can see how I implemented mine &lt;a href=&#34;https://github.com/honza/django-chef/blob/master/fabfile.py&#34;&gt;here&lt;/a&gt;. I recommend that you use Fabric&amp;rsquo;s
&lt;em&gt;roledefs&lt;/em&gt; which will allow you to specify vagrant as the host:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ fab -R vagrant bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-real-thing&#34;&gt;The real thing&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;ve tested your application in Vagrant so you are ready to deploy to a
server. All that&amp;rsquo;s left to do is create a new &lt;em&gt;roledef&lt;/em&gt; in the &lt;em&gt;fabfile&lt;/em&gt; and
run it!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I am by no means a Chef expert&amp;mdash;I learned how to use it a few days ago. If you
have any feedback, do let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google APIs - Y U NO WORK</title>
      <link>https://honza.ca/2011/09/google-apis-y-u-no-work/</link>
      <pubDate>Tue, 13 Sep 2011 21:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/09/google-apis-y-u-no-work/</guid>
      <description>&lt;p&gt;Recently, at &lt;a href=&#34;http://www.sheepdoginc.ca&#34;&gt;SheepDogInc&lt;/a&gt;, I have been working with various Google APIs,
especially the Calendar API. The state of these APIs is rather &lt;em&gt;unfortunate&lt;/em&gt;.
Google is a web giant and you&amp;rsquo;d think that their APIs would be state-of-the-art
given the number of professionals they employ.&lt;/p&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Before we go anywhere, let me just talk about the documentation for a minute.
As an open-source software author and advocate, I always encourage developers
to write extensive and good documentation. Somehow, Google didn&amp;rsquo;t get the demo.
Most of their documentation is sparse, incorrect and out-of-date. If you would
like to know what data a call returns, you&amp;rsquo;re better off just making the call
and inspecting the response. This will actually save you time because the docs
are probably wrong anyway.&lt;/p&gt;
&lt;h2 id=&#34;reliability&#34;&gt;Reliability&lt;/h2&gt;
&lt;p&gt;Google is like the master of scalability. They have an estimated one million
servers world-wide. And yet, they cannot consistently return a 200 to an API
call. I have written horrible, horrible glue code and hacky workarounds to
account for this unpredictability. Sometimes you will get a response, sometimes
it will timeout, sometime you will get a 404&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;engineering&#34;&gt;Engineering&lt;/h2&gt;
&lt;p&gt;With all these amazing engineers, can Google really not make a better API?
Honestly, if I was in a position to hire a person who worked on the Google API
team, I would think twice. Seriously &amp;mdash; test your app, keep your docs
up-to-date, and mainly, stop pissing me off!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DjangoCon 2011 Take-Aways</title>
      <link>https://honza.ca/2011/09/djangocon-2011-take-aways/</link>
      <pubDate>Sat, 10 Sep 2011 21:30:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/09/djangocon-2011-take-aways/</guid>
      <description>&lt;p&gt;My employer, &lt;a href=&#34;http://www.sheepdoginc.ca/&#34;&gt;SheepDogInc&lt;/a&gt;, sent me and a colleague of mine to &lt;a href=&#34;http://djangocon.us/&#34;&gt;DjangoCon
2011&lt;/a&gt;. It was my first developer conference and I had a blast. Here a few
quick points about what the conference has clarified for me.&lt;/p&gt;
&lt;h2 id=&#34;deploying-django&#34;&gt;Deploying Django&lt;/h2&gt;
&lt;p&gt;Despite the Django official documentation&amp;rsquo;s recommendation to use Apache and
mod_wsgi, most people seem to deploy Django with nginx and gunicorn. This has
been a pleasant surprise to me because I like it but though that it was too
simple (or less robust than Apache).&lt;/p&gt;
&lt;h2 id=&#34;provisioning-servers&#34;&gt;Provisioning servers&lt;/h2&gt;
&lt;p&gt;It seemed that everybody was talking about &lt;a href=&#34;http://www.opscode.com/chef/&#34;&gt;Chef&lt;/a&gt; and automatic deployments.
Instead of manually connecting to a server via ssh, you can run one command
which will install all the necessary packages for your application (nginx,
postgresql, etc) and configure them. It makes the whole process less
error-prone. Also, you&amp;rsquo;re more likely to spin up a new VM on your development
machine to try things out because you don&amp;rsquo;t have to thing about setting it up.
Especially with tools like &lt;a href=&#34;http://vagrantup.com/&#34;&gt;vagrant&lt;/a&gt;, it&amp;rsquo;s dead easy.&lt;/p&gt;
&lt;h2 id=&#34;pronouncing-things&#34;&gt;Pronouncing things&lt;/h2&gt;
&lt;p&gt;When you read names of technical products, you can&amp;rsquo;t always be sure how it&amp;rsquo;s
supposed to be pronounced.&lt;/p&gt;
&lt;h3 id=&#34;pypi-pie-pee-eye&#34;&gt;PyPI: pie-pee-eye&lt;/h3&gt;
&lt;h3 id=&#34;pypy-pie-pie&#34;&gt;PyPy: pie-pie&lt;/h3&gt;
&lt;h3 id=&#34;wsgi-wizz-gy&#34;&gt;wsgi: wizz-gy&lt;/h3&gt;
&lt;h3 id=&#34;nginx-engine-x&#34;&gt;nginx: engine-x&lt;/h3&gt;
&lt;p&gt;Did you go to DjangoCon 2011? What are your thoughts?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I love reStructuredText</title>
      <link>https://honza.ca/2011/07/why-i-love-restructuredtext/</link>
      <pubDate>Tue, 19 Jul 2011 14:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/07/why-i-love-restructuredtext/</guid>
      <description>&lt;p&gt;A lot of geeks are using Markdown as their markup generation tool today. It&amp;rsquo;s
simple, effective and used everywhere. It allows you to focus on your content
and not on the HTML code that will be used to display the content on a web
page. I have used Markdown extensively and its simplicity is appealing to me.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://docutils.sourceforge.net/&#34;&gt;reStructuredText&lt;/a&gt; is similar to Markdown. If you know Markdown, it&amp;rsquo;s dead
simple to learn to use RST. So, why bother? There are many things it can do
that Markdown simple wasn&amp;rsquo;t designed to do.&lt;/p&gt;
&lt;p&gt;Let me give you a bit of a background. As a programmer, I like to write and
save documents in text files, using the vim editor. This way I can easily keep
track of different versions of those documents and I will always be able to
open them. The problem is that most non-technical people, such as my family or
perhaps your clients, are trained to use Word documents or PDF files. Most
computer users wouldn&amp;rsquo;t know what to do with that file and wouldn&amp;rsquo;t understand
the syntax. I was looking for a way to write my documents in text files and
still be able to share those with others via Word/PDF. At first, I set up
simple LaTex templates. Then, I thought about writing a script to parse
Markdown files to PDF via ReportLab. All very cumbersome and not quite right.&lt;/p&gt;
&lt;p&gt;Then, I dicovered RST. It&amp;rsquo;s written in Python which means that any
customizations won&amp;rsquo;t be impossible. When I installed it, I was surprised that
it came with a set of command line tools to parse RST files to other common
formats such as:&lt;/p&gt;
&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;
&lt;h2 id=&#34;pdf-via-latex&#34;&gt;PDF via Latex&lt;/h2&gt;
&lt;h2 id=&#34;odt--openoffice-format&#34;&gt;ODT (OpenOffice format)&lt;/h2&gt;
&lt;p&gt;I played around a bit with the tools and found them useful, but not great. The
default formatting was ugly and it seemed like it would take too much work to
manually edit the embedded CSS/Latex/ODT styles.&lt;/p&gt;
&lt;p&gt;I read through the documentation more and found out that you can set up global
or project specific configuration files that RST parsers will look for by
default. The syntax is simple and effective. This way, you only set up your
styles once and then all you have to do to convert those styles is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ rst2html.py doc.rst &amp;gt; doc.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;RST is extensible and you can configure it to do almost anything you want. Once
good example is Pygments syntax highlighting. You can add a new directive and
automatically run your code examples through Pygments. Or, you can customize
the LaTex writer to use a specific font, page size and lots more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I don&#39;t like the Ruby community</title>
      <link>https://honza.ca/2011/06/why-i-dont-like-the-ruby-community/</link>
      <pubDate>Mon, 20 Jun 2011 20:20:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/06/why-i-dont-like-the-ruby-community/</guid>
      <description>&lt;p&gt;I write Python and Javascript code. I use Django and jQuery. And I cringe every
time I have to run &lt;code&gt;gem install x&lt;/code&gt;. I only have a limited understanding of
Ruby and hardly any of Ruby on Rails. It seems disorganized to me and hard to
process. All this is fine &amp;ndash; I don&amp;rsquo;t have to use any of it if I don&amp;rsquo;t like it,
right?&lt;/p&gt;
&lt;p&gt;I always knew there was something wrong with the way Ruby works. I don&amp;rsquo;t mean
wrong like murdering children, I just mean wrong like I don&amp;rsquo;t know why things
are the way they are. There are a lot of talented Ruby programmers and I don&amp;rsquo;t
mean to dismiss that.&lt;/p&gt;
&lt;p&gt;Recently, though, I came across a tweet that I made me realize what it was that
I didn&amp;rsquo;t like about Ruby. It was like a small revelation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markup is markup, not Ruby. JavaScript is JavaScript, not Ruby. CSS is CSS,
not Ruby. Get that in your head before I slap you. - &lt;a href=&#34;https://twitter.com/#!/ara%5Fp/status/81425173965832193&#34;&gt;@ara_p&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you get it? &lt;a href=&#34;http://ruby-doc.org/stdlib/libdoc/erb/rdoc/classes/ERB.html&#34;&gt;ERB&lt;/a&gt; is Ruby with some html-like fragments mixed in.
&lt;a href=&#34;http://jashkenas.github.com/coffee-script/&#34;&gt;CoffeeScript&lt;/a&gt; is a Ruby-like language that compiles to Javascript. &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; is
a Ruby-like language for writing css files.&lt;/p&gt;
&lt;p&gt;Before you know it, everything will be in Ruby.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Ruby gems into virtualenv</title>
      <link>https://honza.ca/2011/06/install-ruby-gems-into-virtualenv/</link>
      <pubDate>Fri, 10 Jun 2011 11:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/06/install-ruby-gems-into-virtualenv/</guid>
      <description>&lt;p&gt;You are a Python developer and every time you have to install a Ruby gem you
throw up in your mouth a little. Wouldn&amp;rsquo;t it be nice if you could install Ruby
gems into your virtualenv? Yeah, it would.&lt;/p&gt;
&lt;p&gt;Stick this in your virtualenv&amp;rsquo;s &lt;code&gt;postactivate&lt;/code&gt; script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export GEM_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$VIRTUAL_ENV&lt;span style=&#34;color:#e6db74&#34;&gt;/gems&amp;#34;&lt;/span&gt;
export GEM_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$GEM_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;/bin&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! You&amp;rsquo;re welcome. :)&lt;/p&gt;
&lt;h2 id=&#34;credit&#34;&gt;Credit&lt;/h2&gt;
&lt;p&gt;Give credit where credit is due. I stole this idea from &lt;a href=&#34;http://twitter.com/idangazit&#34;&gt;Idan Gazit&lt;/a&gt; and
made it better.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying Django with nginx and gunicorn</title>
      <link>https://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn/</link>
      <pubDate>Mon, 30 May 2011 09:15:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn/</guid>
      <description>&lt;p&gt;The amazing Django &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/howto/deployment/modwsgi/&#34;&gt;documentation&lt;/a&gt; recommends that you use Apache and modwsgi
to deploy your webapp. While this is certainly not bad advice, you may not want
to use Apache after all. Apache is a beast that eats up a lot of memory, is
kind of slow and can&amp;rsquo;t handle as much traffic. As a fun alternative, I would
like to talk about deploying Django on nginx using the &lt;a href=&#34;http://gunicorn.org/&#34;&gt;gunicorn&lt;/a&gt; web server.&lt;/p&gt;
&lt;p&gt;Just a quick note before we start: this isn&amp;rsquo;t an out-there deployment option. I
spoke to one of the gunicorn developers and was told that every django hosting
company (think ep.io) uses this setup.&lt;/p&gt;
&lt;h2 id=&#34;get-your-server-ready&#34;&gt;Get your server ready&lt;/h2&gt;
&lt;p&gt;I use Rackspace for small, single server web apps. I created an Ubuntu 10.10
instance with 256MB of RAM. Then, I created a user for my app and added my ssh
key to &lt;code&gt;authorized_keys&lt;/code&gt;. Basic stuff.&lt;/p&gt;
&lt;h2 id=&#34;install-nginx&#34;&gt;Install nginx&lt;/h2&gt;
&lt;p&gt;Installing nginx couldn&amp;rsquo;t be simpler. Latest stable release is provided via a
ppa repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo apt-get install python-software-properties -y
$ sudo -s
$ apt-add-repository ppa:nginx/stable
$ apt-get update
$ apt-get install nginx
$ exit
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;project-structure&#34;&gt;Project structure&lt;/h2&gt;
&lt;p&gt;The user under which the app will run is &lt;code&gt;webapp&lt;/code&gt;, so I checkout my app in
&lt;code&gt;/home/webapp&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;/home/webapp/app
/home/webapp/app/static
/home/webapp/env
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that I&amp;rsquo;m using &lt;code&gt;virtualenv&lt;/code&gt; to deploy this app.&lt;/p&gt;
&lt;h2 id=&#34;configure-nginx-and-gunicorn&#34;&gt;Configure nginx and gunicorn&lt;/h2&gt;
&lt;p&gt;The following two files can be distributed with your project.&lt;/p&gt;
&lt;p&gt;nginx.conf:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;server {
    listen 80;
    server_name webapp.org;

    access_log /home/webapp/access.log;
    error_log /home/webapp/error.log;

    location /static {
        root /home/webapp/app;
    }

    location / {
        proxy_pass http://127.0.0.1:8888;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, I symlinked &lt;code&gt;nginx.conf&lt;/code&gt; to the server&amp;rsquo;s &lt;code&gt;sites-enabled&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo ln -s /home/webapp/app/nginx.conf /etc/nginx/sites-enable/webapp.org
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This sets up nginx to directly serve the applications&amp;rsquo;s static files (css, js,
etc.). Everything else is proxied to the gunicorn server.&lt;/p&gt;
&lt;p&gt;Now gunicorn is a Python HTTP server. It&amp;rsquo;s super simple and effective. I
installed it into the app&amp;rsquo;s environment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ (env) pip install gunicorn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;gunicorn.conf.py:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:8888&amp;#34;&lt;/span&gt;
logfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/webapp/gunicorn.log&amp;#34;&lt;/span&gt;
workers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! The config files are simple and easy to read.&lt;/p&gt;
&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;p&gt;I then collected all the static files into the &lt;code&gt;static&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ (env) python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I restarted  nginx:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo /etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, I ran the &lt;code&gt;gunicorn&lt;/code&gt; server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ (env) cd /home/webapp/app
$ (env) gunicorn_django -D -c gunicorn.conf.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And I was good to go.&lt;/p&gt;
&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;
&lt;p&gt;You may have to change the permissions on the &lt;code&gt;static&lt;/code&gt; directory. Also, the
command above starts &lt;code&gt;gunicorn&lt;/code&gt; as a deamon - a better way would be to use a
monitoring service to start it. Think &lt;code&gt;runit&lt;/code&gt; or &lt;code&gt;supervisord&lt;/code&gt;. Also, I
didn&amp;rsquo;t include any database specific configurations since that&amp;rsquo;s indentical to
an Apache deployment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The importance of git rebase</title>
      <link>https://honza.ca/2011/05/the-importance-of-git-rebase/</link>
      <pubDate>Sat, 14 May 2011 14:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/the-importance-of-git-rebase/</guid>
      <description>&lt;p&gt;Git isn&amp;rsquo;t just something you have to put up with when working with other
developers. Git is a wonderful tool that allows you to manage your code, its
evolution and help you recover from mistakes should they arise. One of the
things that people are intimidated by is &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at an example. You&amp;rsquo;re working on a team with two other developers.
You have a blessed repository that sits on your company&amp;rsquo;s server. Everyone is
working on the same project but on slightly different tasks. Everyone is
working on the master branch. You write a bit of code here and there, you
commit a bunch of times and then it&amp;rsquo;s time to share your code with the rest of
the team by pushing it up to the shared repository.&lt;/p&gt;
&lt;p&gt;You run &lt;code&gt;git push&lt;/code&gt; but receive an error saying that there are changes on the
server and your commit cannot be fast-forwarded. No big deal, right? You run
&lt;code&gt;git pull&lt;/code&gt; to download the changes that you don&amp;rsquo;t have and automatically
merge your changes in. Then you can &lt;code&gt;git push&lt;/code&gt; again and it will work just
fine.&lt;/p&gt;
&lt;p&gt;The problem is that it makes the history of your project messy.&lt;/p&gt;
&lt;p&gt;#+BEGIN_SRC console&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The modern web developer and open source licenses</title>
      <link>https://honza.ca/2011/05/the-modern-web-developer-and-open-source-licenses/</link>
      <pubDate>Tue, 03 May 2011 19:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/the-modern-web-developer-and-open-source-licenses/</guid>
      <description>&lt;p&gt;The world of open source is full of wonders. People write code for free and
make it available for free for anyone to use. If you write a quick little
program on the weekend, it&amp;rsquo;s usually because there is a need that has to be
filled. There&amp;rsquo;s a repetitive task that you wish you didn&amp;rsquo;t have to do so you
write a short program to do it for you.&lt;/p&gt;
&lt;p&gt;Web development can be hard. You have to worry about your database, your
server-side code, your client-side templates and javascript and it all has to
magically work together. We web developers have created a ton of tools to help
us get the job done. And those of us who are really commited to the best and
most reliable software make what we create in our spare time available for
everyone else to use. We share the awesome idea we had in hopes that someone
had the same problem and we could help them solve it. Massive projects like
Django and Ruby on Rails come to mind. jQuery and Prototype. Fabric and
Capistrano. The list just goes on.&lt;/p&gt;
&lt;p&gt;The world of open source is full of wonders. All of this is possible by
releasing our code under a license. And not just any license. If you were to
publish your code online without describing how it can be used, by default you
are reserving all the rights to yourself. Nobody else can legally use it. You
as the creator have the right and responsibility to decide how your code will
be used.&lt;/p&gt;
&lt;p&gt;I was introduced to the world of open source by Linux and the GNU movement. For
the longest time, I would claim that the only true open source license is the
&lt;a href=&#34;http://www.gnu.org/licenses/gpl.html&#34;&gt;GPL&lt;/a&gt;. It&amp;rsquo;s a great license. It ensures that your software will never be used
in a non-free way (free as in freedom). It works great for medium to large
scale pieces of software, such as the Linux kernel or git. The two are self
contained and don&amp;rsquo;t usually have any dependencies.&lt;/p&gt;
&lt;p&gt;However, the more I moved from desktop software development towards developing
for the web, the more I found myself frustrated and confused by the GPL. If a
user downloads a web page generated by a GPL-covered web framework, do I need
to also make available to the user the code that generated the page? If I use
jQuery on my page (which is released under the GPL) and my scripts use it, do I
have to provide non-minified versions of my scripts? Can I legally use a
GPL-covered web framework to build a website for client and not make the source
code available?&lt;/p&gt;
&lt;p&gt;There are plenty more options to think about and my head starts to hurt every
time I try to make a sense of it all.&lt;/p&gt;
&lt;p&gt;I believe that the General Public License is &lt;em&gt;unsuitable&lt;/em&gt; for web-based
projects such as web frameworks, javascript libraries, etc. In a modern web
application, there are way too many moving parts created by different parties.
It&amp;rsquo;s the web developer&amp;rsquo;s job to find the best tools to get their job done. I
believe that the best tools available today are of the open source variety
(MS SQL server, anyone?).&lt;/p&gt;
&lt;p&gt;I was reading Jeff Atwood&amp;rsquo;s &lt;a href=&#34;http://www.codinghorror.com/blog/2007/04/pick-a-license-any-license.html&#34;&gt;article&lt;/a&gt; on software licenses and became
convinced that I should abandon the GPL for my projects. After all, I want
people to use my software and making them try and understand the intricacies of
the legal language of the GPL is unnecessary. Starting today, I will make my
projects available under the terms of a more permissive license. My current
favorites are:&lt;/p&gt;
&lt;h2 id=&#34;bsd&#34;&gt;&lt;a href=&#34;http://www.opensource.org/licenses/bsd-license&#34;&gt;BSD&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;mit&#34;&gt;&lt;a href=&#34;http://www.opensource.org/licenses/mit-license.php&#34;&gt;MIT&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;wtfpl&#34;&gt;&lt;a href=&#34;http://sam.zoy.org/wtfpl/&#34;&gt;WTFPL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;They are all short and easy to understand. Peoples&amp;rsquo; time is expensive, let&amp;rsquo;s
not waste it.&lt;/p&gt;
&lt;p&gt;If you are a developer and you maintain a project that&amp;rsquo;s useful for making the
web a better place, I would ask that you consider using a permissive license
for your project.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Update (2012-01-09):&lt;!-- raw HTML omitted --&gt; After reading Van Lindberg&amp;rsquo;s &lt;a href=&#34;http://shop.oreilly.com/product/9780596517960.do&#34;&gt;book&lt;/a&gt; on Open source
licenses, I have learned that the WTFPL isn&amp;rsquo;t a good idea. It doesn&amp;rsquo;t actually
do anything in terms of legal protection or warranty.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtual machines for Django developers</title>
      <link>https://honza.ca/2011/04/virtual-machines-for-django-developers/</link>
      <pubDate>Tue, 19 Apr 2011 12:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/04/virtual-machines-for-django-developers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; is a tool for building and distributing virtualized
development environments. It&amp;rsquo;s based on VirtualBox VMs. This article describes
how this Ruby tool can be useful to Django developers.&lt;/p&gt;
&lt;h2 id=&#34;why-vagrant&#34;&gt;Why vagrant?&lt;/h2&gt;
&lt;p&gt;The modern web developer works on many different projects. Each project has a
unique set of requirements, dependencies and package versions needed for that
project to succeed. Keeping all of these libraries in check is difficult.
&lt;code&gt;virtualenv&lt;/code&gt; is a tool that creates isolated environments for Python
packages. Vagrant takes this approach a step further. You can virtualize the
entire server.&lt;/p&gt;
&lt;p&gt;Just as each Django project will have a &lt;code&gt;requirements.txt&lt;/code&gt; file which lists
the project&amp;rsquo;s &lt;code&gt;pip&lt;/code&gt; dependencies, your project will now have a
&lt;code&gt;Vagrantfile&lt;/code&gt; and a &lt;code&gt;cookbooks&lt;/code&gt; directory. The &lt;code&gt;Vagrantfile&lt;/code&gt; describes
how the VM should be created and the &lt;code&gt;cookbooks&lt;/code&gt; directory contains
instructions on what packages to install. For example, in the &lt;code&gt;Vagrantfile&lt;/code&gt;
you will specify a VM which runs an Ubuntu server with 256MB of RAM and your
&lt;code&gt;cookbooks&lt;/code&gt; directory will tell vagrant to install apache2, git, postgresql
and memcached.&lt;/p&gt;
&lt;p&gt;Getting started with vagrant is simple.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;vagrant is distributed as a Ruby gem and you can install it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;gem install vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, you will download a base box that I made for you. It&amp;rsquo;s an Ubuntu 10.10
server with minimal configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;vagrant box add vagrant-ubuntu http://honza.ca/downloads/vagrant-ubuntu.box
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will take a while so you may want to get a beverage.&lt;/p&gt;
&lt;p&gt;Next, you will create a directory that will hold your project and initialize it
for vagrant.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;cd ~/Code
mkdir webapp
cd webapp
vagrant init vagrant-ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a &lt;code&gt;Vagrantfile&lt;/code&gt; in that directory.&lt;/p&gt;
&lt;p&gt;And then run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to actually build and boot the environment. This might take a few minutes.&lt;/p&gt;
&lt;p&gt;After this, your environment is running. Your environment is a headless
virtualbox instance.  You can &lt;code&gt;ssh&lt;/code&gt; into the box by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will notice that your project directory (&lt;code&gt;webapp&lt;/code&gt;) is mounted inside the
environment under &lt;code&gt;/vagrant&lt;/code&gt;. Any changes to either directory will affect the
other.&lt;/p&gt;
&lt;p&gt;You can shutdown your environment with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;vagrant halt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Destroy it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;vagrant destroy
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;provisioning&#34;&gt;Provisioning&lt;/h2&gt;
&lt;p&gt;Next, you will install some packages into the VM. You will install some common
Django packages: PostreSQL, Apache, WSGI, memcached and git.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;cd ~/Code/webapp
git clone git@github.com:honza/cookbooks.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This downloads all kinds of cookbooks ready for our use. We will create a
custom cookbook inside that directory where we will define what packages we
want:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;cd cookbooks
mkdir webapp
cd webapp
mkdir recipes
touch recipes/default.rb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now open up the &lt;code&gt;default.rb&lt;/code&gt; file and enter the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;postgresql::server&amp;#34;&lt;/span&gt;
require_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apache2&amp;#34;&lt;/span&gt;
include_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apache2::&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;node&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:django&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:web_server&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
require_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;
require_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memcached&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And modify your &lt;code&gt;Vagrantfile&lt;/code&gt; to use the cookbooks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vagrant-ubuntu&amp;#34;&lt;/span&gt;
    config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color:#e6db74&#34;&gt;:chef_solo&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;chef&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      chef&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cookbooks_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cookbooks&amp;#34;&lt;/span&gt;
      chef&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_recipe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webapp&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the configuration changes to take effect, you need to run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;vagrant reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OK, that concludes our quick introduction to Vagrant. I hope you see how this
can be beneficial and how simple it is to get started.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why you should be using CoffeeScript</title>
      <link>https://honza.ca/2011/04/why-you-should-be-using-coffeescript/</link>
      <pubDate>Mon, 11 Apr 2011 16:45:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/04/why-you-should-be-using-coffeescript/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;ve heard of CoffeeScript. Everyone is talking about it, it seems.
It&amp;rsquo;s a beautiful language with a simple syntax that you use to write
Javascript. CoffeeScript compiles to Javascript. Here is why I think you should
be using it:&lt;/p&gt;
&lt;h2 id=&#34;readability&#34;&gt;Readability&lt;/h2&gt;
&lt;p&gt;CoffeeScript is designed to be beautiful and readable. There is no unnecessary
fluff. Less syntax boilerplate, fewer mistakes. Compare:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// regular javascript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Shakespeare&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// coffeescript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;William Shakespeare&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Indentation is also important in CoffeeScript - just like in Python. This makes
closures and blocks easier to spot.&lt;/p&gt;
&lt;h2 id=&#34;valid-code&#34;&gt;Valid Code&lt;/h2&gt;
&lt;p&gt;There are many different coding styles when it comes to writing Javascript. The
good thing about CoffeeScript is that the Javascript it generates is valid - it
passes &lt;a href=&#34;http://www.javascriptlint.com/&#34;&gt;Javascript Lint&lt;/a&gt;. And if your code isn&amp;rsquo;t valid CoffeeScript, it
won&amp;rsquo;t compile. It&amp;rsquo;s a win-win. This is perhaps my favorite feature.&lt;/p&gt;
&lt;h2 id=&#34;easy-class-inheritance&#34;&gt;Easy class inheritance&lt;/h2&gt;
&lt;p&gt;This is just great. It reminds me of Python and Ruby:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;
    constructor: &lt;span style=&#34;color:#a6e22e&#34;&gt;(@name) -&amp;gt;&lt;/span&gt;

    move: &lt;span style=&#34;color:#a6e22e&#34;&gt;(meters) -&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; moved &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;meters&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m.&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;
    move: &lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whoof...&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compiles to this in Javascript:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__hasProp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasOwnProperty&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;__extends&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;__hasProp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)) &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;];
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ctor&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;; }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;ctor&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ctor&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;__super__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;;
};
&lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meters&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; moved &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;meters&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m.&amp;#34;&lt;/span&gt;));
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;;
})();
&lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;__super__&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arguments&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;__extends&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whoof...&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;__super__&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dog&lt;/span&gt;;
})();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quite a difference, huh? Think how much time you&amp;rsquo;d need to understand each
version and make any changes required. In my mind, this encourages better code
organization and structure.&lt;/p&gt;
&lt;h2 id=&#34;node-dot-js-awesomeness&#34;&gt;Node.js awesomeness&lt;/h2&gt;
&lt;p&gt;CoffeeScript comes with a Node.js utility, &lt;code&gt;coffee&lt;/code&gt;. You can write your
Node.js code in CoffeeScript and run it with &lt;code&gt;coffee file.js&lt;/code&gt;. The utility
wraps the CoffeeScript compiler and the &lt;code&gt;node&lt;/code&gt; executable. This way, you can
whip up a quick server in no time. Genius.&lt;/p&gt;
&lt;h2 id=&#34;easy-debugging&#34;&gt;Easy debugging&lt;/h2&gt;
&lt;p&gt;With tools like &lt;a href=&#34;http://code.google.com/webtoolkit/&#34;&gt;Google Web Toolkit&lt;/a&gt;, your code compiles to &lt;em&gt;minified&lt;/em&gt;
javascript. Non-minified code is obviously easier (possible?) to read and debug.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSLint syntax checker for vim</title>
      <link>https://honza.ca/2011/04/jslint-syntax-checker-for-vim/</link>
      <pubDate>Tue, 05 Apr 2011 09:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/04/jslint-syntax-checker-for-vim/</guid>
      <description>&lt;p&gt;Douglas Crockford&amp;rsquo;s &lt;a href=&#34;http://www.jslint.com/&#34;&gt;JSLint&lt;/a&gt; script is almost a golden standard when it comes
to checking the syntax and general sanity of your javascript files. Being lazy
by nature, I got tired of copying and pasting my code into the web form.&lt;/p&gt;
&lt;p&gt;I wanted to be able to run the JSLint tool from the command line. JSLint itself
is written in javascript. It&amp;rsquo;s a 6000-line beast. How do you run a javascript
library as a command line utility? The answer is &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wrote a quick little script that takes a single argument (your file) and runs
JSLint over it, printing any errors to the console. I call it &lt;code&gt;jslintnode.js&lt;/code&gt;
and the code is on &lt;a href=&#34;https://github.com/honza/jslintnode.js&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well, checking my files from the command line is certainly better than using
the web interface. But I still have to run it over and over. As you may know,
I&amp;rsquo;m fanatical &lt;a href=&#34;http://www.vim.org&#34;&gt;vim&lt;/a&gt; user. There is a cool plugin called &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt; which
runs through the file you are editing each time you save it. It puts little
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; characters next to the line you are editing which tells you that you
screwed up and need to fix that line.&lt;/p&gt;
&lt;p&gt;However, by default, syntastic uses the &lt;code&gt;jsl&lt;/code&gt; utility to check javascript
files. With a little bit of work, you can modify the original script to use our
&lt;code&gt;jslintnode.js&lt;/code&gt; utility.&lt;/p&gt;
&lt;p&gt;Go into the &lt;code&gt;/syntax_checkers/&lt;/code&gt; directory and open up the &lt;code&gt;javascript.vim&lt;/code&gt;
file.&lt;/p&gt;
&lt;p&gt;Change this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;executable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jsl&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;executable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jslintnode.js&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And replace the body of the &lt;code&gt;SyntaxCheckers_javascript_GetLocList()&lt;/code&gt; function
with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeprg&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jslintnode.js &amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shellescape&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;expand&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errorformat&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%W%f(%l): lint warning: %m,%-Z%p^,%W%f(%l): warning: %m,%-Z%p^,%E%f(%l): SyntaxError: %m,%-Z%p^,%-G&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SyntasticMake&lt;/span&gt;({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;makeprg&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;makeprg&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errorformat&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;errorformat&lt;/span&gt; })&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save and restart vim.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. Now as you&amp;rsquo;re editing any javascript files you will get instant
feedback as to the quality of your code as judged by JSLint. And remember that
&lt;em&gt;JSLint will hurt your feelings&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7 ways Github has changed the open source world</title>
      <link>https://honza.ca/2011/03/7-ways-github-has-changed-the-open-source-world/</link>
      <pubDate>Sat, 05 Mar 2011 21:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/03/7-ways-github-has-changed-the-open-source-world/</guid>
      <description>&lt;p&gt;As the guys at &lt;a href=&#34;http://thechangelog.com&#34;&gt;the changelog&lt;/a&gt; say, the world of open source is changing fast
and you have to keep up. I believe that Github has been very influential when
it comes to making open source more accessible. How has Github changed the
world of open source?&lt;/p&gt;
&lt;h2 id=&#34;force-projects-to-include-a-good-readme&#34;&gt;Force projects to include a good README&lt;/h2&gt;
&lt;p&gt;Apart from the directory structure and files, the most prominent element on the
page is your README file. If you don&amp;rsquo;t have one, the page looks kind of weird. As
an administrator, if you don&amp;rsquo;t add a README file, Github will start yelling at
you.&lt;/p&gt;
&lt;h2 id=&#34;unified-place-for-all-your-projects&#34;&gt;Unified place for all your projects&lt;/h2&gt;
&lt;p&gt;When I come across a cool project, I like to see what other stuff the author
has been hacking on. The best example I think is &lt;a href=&#34;http://github.com/tpope&#34;&gt;tpope&lt;/a&gt; who is a famous
vim plugin creator. When you go to his profile page on Github, you can see all
of the plugins he has ever written and published.&lt;/p&gt;
&lt;h2 id=&#34;code-discussions&#34;&gt;Code discussions&lt;/h2&gt;
&lt;p&gt;Yes, you can discuss the project on IRC or on mailing lists. Those aren&amp;rsquo;t
exactly user friendly, and it&amp;rsquo;s hard to discuss code that way. Github makes it
easy for you to submit a pull request and have others comment on your code.&lt;/p&gt;
&lt;h2 id=&#34;publish-your-hacks-with-ease&#34;&gt;Publish your hacks with ease&lt;/h2&gt;
&lt;p&gt;Did you just write a patch that greatly improves an existing project? Fork it
and publish it in minutes. If you notify the original project, you can get
helpful feedback on your hacks. This encourages people to publish their code
even if it&amp;rsquo;s never merged into the original project.&lt;/p&gt;
&lt;h2 id=&#34;judge-how-active-a-project-is&#34;&gt;Judge how active a project is&lt;/h2&gt;
&lt;p&gt;Github makes it easy to quickly look through a project&amp;rsquo;s history to see how
active it is. In no time, you can tell how many people commit to it and how
often. Also, the number of watchers/forks in the corner gives you a pretty good
idea of how many people are actually using the project. This is possibly my
favorite feature. Open source developers don&amp;rsquo;t need to waste their time
exploring libraries that aren&amp;rsquo;t maintained.&lt;/p&gt;
&lt;h2 id=&#34;discover-new-projects&#34;&gt;Discover new projects&lt;/h2&gt;
&lt;p&gt;Smart people come up with clever things all the time. If they share their code
on Github, you can find it in the Explore Github section. I can&amp;rsquo;t remember how
many times I&amp;rsquo;ve discovered a cool project this way. My favorite example is
&lt;a href=&#34;https://github.com/jashkenas/coffee-script&#34;&gt;CoffeeScript&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;follow-the-development-of-your-favorite-projects&#34;&gt;Follow the development of your favorite projects&lt;/h2&gt;
&lt;p&gt;When you first log in, you are presented with a list of changes that were made
to the projects you follow. This projects has a new release, this bug was
fixed. etc. Invaluable.&lt;/p&gt;
&lt;p&gt;What are your thoughts? Any favorite features of Github?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Convert Vim Colorschemes To Pygments Themes</title>
      <link>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</link>
      <pubDate>Fri, 25 Feb 2011 22:26:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes/</guid>
      <description>&lt;p&gt;Recently, I have grown to love &lt;a href=&#34;http://pygments.org&#34;&gt;Pygments&lt;/a&gt;. It gives you syntax
highlighting in the browser without heavy Javascript files. It supports just
about any programming language on the planet and it&amp;rsquo;s just plain awesome. The
only thing that it&amp;rsquo;s lacking is good color schemes. It comes with a dozen
themes that will certainly do the trick, but if you&amp;rsquo;re used to looking at
pretty code in your favorite editor, the code examples on your website will
look a little dull.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to go out on a limb here and assume you have a favorite colorscheme.
I found a script that will turn a vim colorscheme into a Pygments theme. It
didn&amp;rsquo;t work perfectly out of the box so I patched it. You can download it
&lt;a href=&#34;https://github.com/honza/vim2pygments&#34;&gt;here&lt;/a&gt;. Copy your vim colorscheme to the same directory as the script and run
it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ python vim2pygments.py molokai.vim &amp;gt; molokai.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will produce a Python file containing a simple style class that Pygments
can use. Next step is to download Pygments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ hg clone http://dev.pocoo.org/hg/pygments-main pygments
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then you will install your new theme:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ cd pygments
$ cp ../molokai.py pygments/styles/molokai.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OK, now for the fun part. We will use Pygments to generate the CSS file that
you will then use on your website:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ./pygmentize -S molokai -f html -a .highlight &amp;gt; molokai.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are a TextMate user, you might be able to get your favorite theme done,
too. A lot of popular Vim colorschemes are inspired by TextMate. Sunburst,
mustang and idle fingers come to mind. Just find a Vim version and you&amp;rsquo;re good
to go.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How My Website Works</title>
      <link>https://honza.ca/2011/01/how-my-website-works/</link>
      <pubDate>Sat, 22 Jan 2011 21:18:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/01/how-my-website-works/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;ve heard of static site generators like Jekyll (Ruby) or Hyde
(Python). The benefits are obvious - your site is hosted on a cheap shared
hosting and it can easily survive the Digg/Slashdot/Reddit effect. There is no
database latency - the browser requests a file on the server and gets it back
immediately.&lt;/p&gt;
&lt;h2 id=&#34;update--2011-02-27&#34;&gt;Update (2011-02-27):&lt;/h2&gt;
&lt;p&gt;While I still use a static generator to power my site, it&amp;rsquo;s not a different
engine. I got tired of launching a django server just to write a post. I wrote
a new static site generator called &lt;a href=&#34;https://github.com/honza/socrates&#34;&gt;Socrates&lt;/a&gt;. Each post is now a separate
file written in Markdown. Socrates then runs through those files and creates a
site for me. I&amp;rsquo;m still using django templates. What follows is the original
post.&lt;/p&gt;
&lt;h2 id=&#34;django&#34;&gt;django&lt;/h2&gt;
&lt;p&gt;The site is a simple django blog. There is nothing really of note when it comes
to django-specific coding. I run the django server locally when I&amp;rsquo;m editing or
adding articles. It provides a nice UI. It also lets me easily preview the site
without generating anything.&lt;/p&gt;
&lt;h2 id=&#34;static-generator&#34;&gt;static generator&lt;/h2&gt;
&lt;p&gt;When I&amp;rsquo;m happy with the state of the website and want to publish it, I run the
static generator. It&amp;rsquo;s contained in the &lt;code&gt;generate.py&lt;/code&gt; file. It runs through
all possible urls and for each one it generates a static file. Each file is a
complete HTML page that the user&amp;rsquo;s browser will download. The folder structure
is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/2010/
    /02/
        post-one.html
        post-two.html
/2011/
    ..
        ..
/about/
    index.html
index.html
/page/
    /2/
        index.html
/category/
    /android/
        index.html
    /code/
        index.html
    ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You get the idea. This way, with an &lt;code&gt;.htaccess&lt;/code&gt; file we can have the
following URL structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/2010/02/post-one/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ftp-deploy-script&#34;&gt;FTP deploy script&lt;/h2&gt;
&lt;p&gt;And the final piece is the &lt;code&gt;deploy.py&lt;/code&gt; script. It looks at the deploy
directory, and with a little help from git, it figures out what files were
changed since the last deploy. It then takes those files and throws them up on
the server. A normal shared hosting.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can check out the code on &lt;a href=&#34;https://github.com/honza/honza.github.com&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Development disappointments</title>
      <link>https://honza.ca/2011/01/android-development-disappointments/</link>
      <pubDate>Tue, 18 Jan 2011 18:23:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/01/android-development-disappointments/</guid>
      <description>&lt;p&gt;The Android platform is the latest buzz in the smartphone world. I have
previously written on why I prefer Android over iPhone. In this article, we
will talk a little bit about what it&amp;rsquo;s like to develop native applications for
Android.&lt;/p&gt;
&lt;p&gt;Android SDK uses Java. I know Java but it&amp;rsquo;s not my favorite. After working with
Python and Django for months, going back to Java isn&amp;rsquo;t exactly easy. But it&amp;rsquo;s
not undoable either.&lt;/p&gt;
&lt;p&gt;Being from the Czech republic, I thought I would try to target the Czech
market. Android is starting to get really big over there. I decided to write a
simple news reader application for one of the leading news portals called iDnes
(&amp;ldquo;eToday&amp;rdquo;). The application downloads an RSS feed, parses it and displays a
list of news articles to the user. The user has the option to choose their
topic, and to manually refresh the application to get new articles.&lt;/p&gt;
&lt;p&gt;Not very complicated at all. It took me a few evenings to put it together. The
development process was quite fun. The Android SDK integration into Eclipse is
awesome. It tells you when you have to implement additional methods, or
automatically adds your imports when it&amp;rsquo;s needed. As part of the SDK, you get a
simulator for all kinds of versions of Android (from 1.5 to 2.2). This way, you
can test your application on various versions of the API.&lt;/p&gt;
&lt;p&gt;I read all the articles on packaging and distributing. I made sure my
application was backwards compatible. I tried to follow their guidelines for
app icons as much as I could (well, I suck at graphic design). I exported the
applications, signed it, aligned it and uploaded it to the Android Market.&lt;/p&gt;
&lt;p&gt;I was excited. I did it. I published my first Android applications. But then
came the disappointment.&lt;/p&gt;
&lt;p&gt;My app started to get a lot of bad comments in the market. People complained
that the application didn&amp;rsquo;t do anything, and they couldn&amp;rsquo;t read any news, etc.
I didn&amp;rsquo;t come across any errors like that during testing. If the applications
doesn&amp;rsquo;t have internet, it will tell the user it doesn&amp;rsquo;t have internet. If there
is a problem, it will let them know.&lt;/p&gt;
&lt;p&gt;As a developer and author, I feel there is no way for me to receive helpful
information about the errors the users are getting when they are interacting
with the application.&lt;/p&gt;
&lt;p&gt;OK, that&amp;rsquo;s it. If you have any comments or suggestions, do let me know in the
comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Use Twitter OAuth On Android</title>
      <link>https://honza.ca/2010/09/how-to-use-twitter-oauth-on-android/</link>
      <pubDate>Tue, 28 Sep 2010 22:31:00 -0300</pubDate>
      
      <guid>https://honza.ca/2010/09/how-to-use-twitter-oauth-on-android/</guid>
      <description>&lt;p&gt;If you are developing an application for the Android platform, and you need to
interact with the Twitter API, you now have to use OAuth to authenticate the
user. In this article, we will have a look on how you can do that.&lt;/p&gt;
&lt;h2 id=&#34;what-is-oauth&#34;&gt;What is OAuth?&lt;/h2&gt;
&lt;p&gt;OAuth is a way of accessing a user&amp;rsquo;s data (e.g. tweets) without asking for the
user&amp;rsquo;s username and password. Your application opens the Twitter website which
will ask the user if they want to allow you to access their data. If they do,
they are taken back to the application and can start using it. You can find
more about OAuth all over the web.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;There are a couple of .jars that you will need for this to work.&lt;/p&gt;
&lt;h3 id=&#34;signpost-commonshttp4-1-dot-2-dot-1-dot-1-dot-jar&#34;&gt;signpost-commonshttp4-1.2.1.1.jar&lt;/h3&gt;
&lt;h3 id=&#34;signpost-core-1-dot-2-dot-1-dot-1-dot-jar&#34;&gt;signpost-core-1.2.1.1.jar&lt;/h3&gt;
&lt;p&gt;You can download them &lt;a href=&#34;https://github.com/kaeppler/signpost&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;basic-activity&#34;&gt;Basic Activity&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we have an activity running where the user can start the
authentication process. There is nothing special about this activity, except
for some text and a button. When the user clicks the button, the OAuth process
will be started. From the button&amp;rsquo;s &lt;code&gt;onClickListener()&lt;/code&gt; we will call the
&lt;code&gt;startOAuth()&lt;/code&gt; method of our activity.&lt;/p&gt;
&lt;p&gt;We will add a few attributes to our activity. Let&amp;rsquo;s call the activity Main.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; CommonsHttpOAuthConsumer httpOauthConsumer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OAuthProvider httpOauthprovider&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String consumerKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String consumerSecret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String CALLBACKURL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app://twitter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;consumerKey&lt;/code&gt; and &lt;code&gt;consumerSecret&lt;/code&gt; will store your app&amp;rsquo;s unique keys that
you will get from Twitter. &lt;code&gt;CALLBACK&lt;/code&gt; is a little different. This is used
when the application is authorized on the web, and the control is returned back
to the Main activity. For the mobile browser to be able to call the application
and tell it that the OAuth business has gone well, it needs a call back. Both
app and twitter can be exchanged for anything else.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s have a look at the &lt;code&gt;startOAuth()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    httpOauthConsumer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CommonsHttpOAuthConsumer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;consumerKey&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; consumerSecret&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    httpOauthprovider &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DefaultOAuthProvider&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://twitter.com/oauth/request_token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://twitter.com/oauth/access_token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                                            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://twitter.com/oauth/authorize&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    String authUrl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; httpOauthprovider&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;retrieveRequestToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;httpOauthConsumer&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; CALLBACKURL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Open the browser
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    startActivity&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Intent&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ACTION_VIEW&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Uri&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;authUrl&lt;span style=&#34;color:#f92672&#34;&gt;)));&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LENGTH_LONG&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we create the necessary OAuth objects which will in turn generate the
unique authenticating URL. Once we have the URL we open the browser and point
it to that URL. The user will be presented with a dialog asking them to allow
or to deny your application access.&lt;/p&gt;
&lt;p&gt;In order for our activity to be able to receive the callback, we need to add a
few things the Android manifest file. Change the applications definition to the
following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;activity&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Main&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:launchMode=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;singleInstance&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.action.VIEW&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.category.DEFAULT&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.category.BROWSABLE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;data&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:scheme=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:host=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twitter&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that if you changed the app and twitter in the &lt;code&gt;CALLBACK&lt;/code&gt; variable
above, you will need to make sure that the change is reflected here. This
basically allows the activity to receive data from a foreign source - our
browser.&lt;/p&gt;
&lt;p&gt;Now we need to catch the callback and handle it. We do that by overriding the
&lt;code&gt;onNewIntent()&lt;/code&gt; method of our Main activity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onNewIntent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Intent intent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onNewIntent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    Uri uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; intent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;//Check if you got NewIntent event due to Twitter Call back only
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uri &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; uri&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;startsWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CALLBACKURL&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

        String verifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uri&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getQueryParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;oauth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;signpost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OAuth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OAUTH_VERIFIER&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;// this will populate token and token_secret in consumer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
            httpOauthprovider&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;retrieveAccessToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;httpOauthConsumer&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; verifier&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            String userKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; httpOauthConsumer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getToken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            String userSecret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; httpOauthConsumer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getTokenSecret&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;// Save user_key and user_secret in user preferences and return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
            SharedPreferences settings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getBaseContext&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSharedPreferences&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_app_prefs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            SharedPreferences&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Editor&lt;/span&gt; editor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; settings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            editor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user_key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; userKey&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            editor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user_secret&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; userSecret&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            editor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Do something if the callback comes from elsewhere
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK, there&amp;rsquo;s quite a bit there. We extract the data that the browser sent back
to us. This data is used to verify that the authentication was successful and
that we can now access the user&amp;rsquo;s data. From the data, we get the user&amp;rsquo;s key
and their secret. We save that into the application&amp;rsquo;s shared preferences file
and return.&lt;/p&gt;
&lt;p&gt;Now we are good to go. We can make authenticated requests to Twitter API on
behalf of the user.&lt;/p&gt;
&lt;p&gt;For example, to get the user&amp;rsquo;s home timeline, you would do something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;HttpGet get &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HttpGet&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://api.twitter.com/version/statuses/home_timeline.json&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
HttpParams params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BasicHttpParams&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
HttpProtocolParams&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setUseExpectContinue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
get&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// sign the request to authenticate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;httpOauthConsumer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;get&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
String responsex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;get&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BasicResponseHandler&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
JSONArray array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; JSONArray&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;responsex&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the array variable is a list of the latest tweets in the user&amp;rsquo;s home timeline.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Posterous-style Blogging On App Engine</title>
      <link>https://honza.ca/2010/07/posterous-style-blogging-on-app-engine/</link>
      <pubDate>Wed, 07 Jul 2010 22:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2010/07/posterous-style-blogging-on-app-engine/</guid>
      <description>&lt;p&gt;Posterous has been getting a lot of attention lately. Its simplicity appeals to
a wide range of users and more and more users are switching over from other
well-established blogging platforms such as Blogger or WordPress. In this
article, we will have a look at how you can replicate the Posterous
functionality on App Engine.&lt;/p&gt;
&lt;p&gt;In case you don&amp;rsquo;t know what Posterous is, it&amp;rsquo;s very simple. It&amp;rsquo;s a blogging
tool like Google&amp;rsquo;s Bloggeror Wordpress.com. What makes it different from the
other services is its ridiculous simplicity. With Posterous, you don&amp;rsquo;t need to
create an account. That&amp;rsquo;s because you create new posts by emailing your post to
Posterous. It creates links for you, images sent as attachments will be
transformed into galleries, etc.&lt;/p&gt;
&lt;p&gt;I like Posterous, but my website has a lot of custom programming on the
back-end so I&amp;rsquo;m very hesitant to switch over. And besides, I like to know how
things work behind the scenes. I thought it might be fun to create a system
similar to Posterous&amp;rsquo; for my own blog which is, of course, hosted on App
Engine.&lt;/p&gt;
&lt;p&gt;Here is what we are going to do. I want to be able to send an email to my own
blog and have it turn it into a post and publish it to the blog.&lt;/p&gt;
&lt;p&gt;OK, let&amp;rsquo;s start with the post model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Post&lt;/span&gt;(db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringProperty()
    body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TextProperty()
    added &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DateTimeProperty(auto_now_add&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
    author &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringProperty()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Very straight forward. You have your title, body, author and when the post was
published.&lt;/p&gt;
&lt;p&gt;In order to enable incoming email, you need to add a couple of lines of code to
your &lt;code&gt;app.yaml&lt;/code&gt; file. In addition to your regular handlers, add the
following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;inbound_services&lt;/span&gt;:
- mail

&lt;span style=&#34;color:#66d9ef&#34;&gt;handlers&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;url&lt;/span&gt;: /_ah/mail/.&lt;span style=&#34;color:#e6db74&#34;&gt;+
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  script: main.py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first line enables incoming email for your application. The second part is
the important part. On App Engine, an incoming email message is processed as a
HTTP POST request. Since it&amp;rsquo;s a regular HTTP request, we will need a handler
for it in the &lt;code&gt;app.yaml&lt;/code&gt; file. You have several options here. You can create
a catch-all handler for all incoming email addresses (like I&amp;rsquo;ve done above), or
create seperate handlers for different addresses.&lt;/p&gt;
&lt;p&gt;The email address that we will use is in the following format:
&lt;a href=&#34;mailto:your%5Fstring@appid.appspotmail.com&#34;&gt;your_string@appid.appspotmail.com&lt;/a&gt;. You should substitute the appid with your
app&amp;rsquo;s ID. The string before the &amp;lsquo;@&amp;rsquo; symbol can be set to anything you want.&lt;/p&gt;
&lt;p&gt;With this out of the way, we are ready to write the actual email handler. This
will go into your &lt;code&gt;main.py&lt;/code&gt; file which you defined in the &lt;code&gt;app.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, some imports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; email
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.appengine.ext.webapp.mail_handlers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; InboundMailHandler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, you add the following to the list of URL mappings in the instantiation of
the application class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;application &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webapp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WSGIApplication([
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, Index),
    EmailHandler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mapping()
    ], debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here EmailHandler is the request handler class that will handle the incoming
email. The &lt;code&gt;mapping()&lt;/code&gt; method will map all of the addresses and send all of
them to this handler class. It&amp;rsquo;s just a convenience method, no magic here.&lt;/p&gt;
&lt;p&gt;Now, finally, onto the actual handler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmailHandler&lt;/span&gt;(InboundMailHandler):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;receive&lt;/span&gt;(self, mail_message):
        post &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Post()
        post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mail_message&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subject
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; content_type, body &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mail_message&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bodies():
            post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; body&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()
        post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;author &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Smith&amp;#39;&lt;/span&gt;
        post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is actually very simple. The incoming email message is saved in the
&lt;code&gt;mail_message&lt;/code&gt; variable and you can access all of the usual email metadata as
its properties (e.g. mail_message.sender). So, we create a new post, take the
email&amp;rsquo;s subject and set it as the post&amp;rsquo;s title. The &lt;code&gt;bodies()&lt;/code&gt; method
extracts the body of the email and the &lt;code&gt;decode()&lt;/code&gt; function will decode the
actual body. Then we set the author and save the post in the datastore.&lt;/p&gt;
&lt;p&gt;Often you will want to include a link in your post, or create a list. This is
easily accomplished with HTML tags. However, HTML tags are a pain, so you might
want to use something like Markdown.&lt;/p&gt;
&lt;p&gt;Adding markdown support is super easy. Download the Python
&lt;a href=&#34;http://code.google.com/p/python-markdown2/&#34;&gt;Markdown library&lt;/a&gt; and put the &lt;code&gt;markdown2.py&lt;/code&gt; file in your app&amp;rsquo;s root
directory. Then import it in your &lt;code&gt;main.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; markdown2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And change the following line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; body&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;post&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; markdown2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;markdown(body&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a very simple yet effective technique and it will allow you to create
post from anywhere. I hope you&amp;rsquo;ve enjoyed the post. Let me know if you have any
suggestions on how to improve it.&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;The complete code for this app is available on &lt;a href=&#34;https://github.com/honza/Posterous-App-Engine&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
