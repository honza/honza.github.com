<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Honza Pokorny</title>
    <link>https://honza.ca/categories/git/</link>
    <description>Recent content in git on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 May 2012 12:30:00 -0300</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I use git</title>
      <link>https://honza.ca/2012/05/how-i-use-git/</link>
      <pubDate>Fri, 11 May 2012 12:30:00 -0300</pubDate>
      
      <guid>https://honza.ca/2012/05/how-i-use-git/</guid>
      <description>&lt;p&gt;Recently, I have noticed that there are quite a few wrappers around git to give
you a nicer interface to work with.  The new commands promise to be easy to
remember and make your life less frustrating.  I find these a little silly
because git on its own is a great tool.  Here I&amp;rsquo;m going to describe how I use
git to convince you (and myself) that it&amp;rsquo;s not that hard.&lt;/p&gt;
&lt;h2 id=&#34;cloning&#34;&gt;Cloning&lt;/h2&gt;
&lt;p&gt;This couldn&amp;rsquo;t be any simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git clone git://github.com/honza/dotfiles.git
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;committing&#34;&gt;Committing&lt;/h2&gt;
&lt;p&gt;Once I have cloned a repo, I start to make changes.  To see what files I have
changed, I run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or to see what actual changes I made&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git diff
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, when I&amp;rsquo;m ready to commit, I stage the files.  The index is one of my
favorite features of git.  It lets me decide what changes I want to commit.
Maybe I correct something as I work on something else.  Those things aren&amp;rsquo;t
related so they shouldn&amp;rsquo;t go into the same commit.  I grew up on Mercurial and
not having the index in Mercurial now really bothers me.&lt;/p&gt;
&lt;p&gt;To stage all changed files, I do&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git add -u
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I decide that the changes I made are stupid and I want to get rid of them, I
do&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git checkout .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To make sure all staged changes are the right ones&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git diff --cached
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;stashing&#34;&gt;Stashing&lt;/h2&gt;
&lt;p&gt;I often stash my code.  Sometimes you need to look at some code in a different
branch, sometimes I notice something is broken and I want to see if I broke it
or not.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git stash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will stash your changes.  To get it back I do&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And also, often I will see what I had stashed&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;branches&#34;&gt;Branches&lt;/h2&gt;
&lt;p&gt;Creating new branches is simple and cheap&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git checkout -b new_branch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Delete a branch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git branch -d branch_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or delete a branch on a remote server&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git push origin :branch_name
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rebasing&#34;&gt;Rebasing&lt;/h2&gt;
&lt;p&gt;I have &lt;a href=&#34;http://honza.ca/2011/05/the-importance-of-git-rebase&#34;&gt;written&lt;/a&gt; on
rebasing before.  It makes your history much nicer.  Any time I pull code from
a remote repository, I do&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git pull --rebase
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or, if it&amp;rsquo;s a specific branch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git pull --rebase origin dev
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bisecting&#34;&gt;Bisecting&lt;/h2&gt;
&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; the bisect commnad in git.  You can use it to determine which commit
introduced a bug.  This is especially useful if you have a comprehensive test
suite.  For example, the latest commit is broken and you remember that all
tests where passing in version 1.2.  This example uses Django.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
git bisect run python manage.py test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Git will then keep running your tests until it finds the first commit that&amp;rsquo;s
broken.&lt;/p&gt;
&lt;h2 id=&#34;merging&#34;&gt;Merging&lt;/h2&gt;
&lt;p&gt;When a feature branch is finished, I merge it into master with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git checkout master
git merge --no-ff feature
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;viewing-history&#34;&gt;Viewing history&lt;/h2&gt;
&lt;p&gt;For viewing history, I really like the following command&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git log --pretty=format:&amp;quot;%h - %an, %ar : %s&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gives you the commit SHA, then the author&amp;rsquo;s name, how long ago it was made
and a brief, one-line summary of the changes.  I have it aliased as &lt;code&gt;gitl&lt;/code&gt;.
I also use a simple graph to see the relationships between branches&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git log --oneline --graph
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;upgrading-all-submodules-in-a-project&#34;&gt;Upgrading all submodules in a project&lt;/h2&gt;
&lt;p&gt;This one is great, too.  I use it to upgrade all of my vim plugins.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git submodule foreach git pull
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;pulling-and-pushing&#34;&gt;Pulling and pushing&lt;/h2&gt;
&lt;p&gt;This is pretty straight forward&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git pull
git pull origin dev

git push
git push origin dev
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Once you learn what git calls what, it&amp;rsquo;s pretty easy to just google the thing
you&amp;rsquo;re trying to do.  I&amp;rsquo;m definitely not an expert but this gets me by.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The importance of git rebase</title>
      <link>https://honza.ca/2011/05/the-importance-of-git-rebase/</link>
      <pubDate>Sat, 14 May 2011 14:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2011/05/the-importance-of-git-rebase/</guid>
      <description>&lt;p&gt;Git isn&amp;rsquo;t just something you have to put up with when working with other
developers. Git is a wonderful tool that allows you to manage your code, its
evolution and help you recover from mistakes should they arise. One of the
things that people are intimidated by is &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at an example. You&amp;rsquo;re working on a team with two other developers.
You have a blessed repository that sits on your company&amp;rsquo;s server. Everyone is
working on the same project but on slightly different tasks. Everyone is
working on the master branch. You write a bit of code here and there, you
commit a bunch of times and then it&amp;rsquo;s time to share your code with the rest of
the team by pushing it up to the shared repository.&lt;/p&gt;
&lt;p&gt;You run &lt;code&gt;git push&lt;/code&gt; but receive an error saying that there are changes on the
server and your commit cannot be fast-forwarded. No big deal, right? You run
&lt;code&gt;git pull&lt;/code&gt; to download the changes that you don&amp;rsquo;t have and automatically
merge your changes in. Then you can &lt;code&gt;git push&lt;/code&gt; again and it will work just
fine.&lt;/p&gt;
&lt;p&gt;The problem is that it makes the history of your project messy.&lt;/p&gt;
&lt;p&gt;#+BEGIN_SRC console&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7 ways Github has changed the open source world</title>
      <link>https://honza.ca/2011/03/7-ways-github-has-changed-the-open-source-world/</link>
      <pubDate>Sat, 05 Mar 2011 21:00:00 -0400</pubDate>
      
      <guid>https://honza.ca/2011/03/7-ways-github-has-changed-the-open-source-world/</guid>
      <description>&lt;p&gt;As the guys at &lt;a href=&#34;http://thechangelog.com&#34;&gt;the changelog&lt;/a&gt; say, the world of open source is changing fast
and you have to keep up. I believe that Github has been very influential when
it comes to making open source more accessible. How has Github changed the
world of open source?&lt;/p&gt;
&lt;h2 id=&#34;force-projects-to-include-a-good-readme&#34;&gt;Force projects to include a good README&lt;/h2&gt;
&lt;p&gt;Apart from the directory structure and files, the most prominent element on the
page is your README file. If you don&amp;rsquo;t have one, the page looks kind of weird. As
an administrator, if you don&amp;rsquo;t add a README file, Github will start yelling at
you.&lt;/p&gt;
&lt;h2 id=&#34;unified-place-for-all-your-projects&#34;&gt;Unified place for all your projects&lt;/h2&gt;
&lt;p&gt;When I come across a cool project, I like to see what other stuff the author
has been hacking on. The best example I think is &lt;a href=&#34;http://github.com/tpope&#34;&gt;tpope&lt;/a&gt; who is a famous
vim plugin creator. When you go to his profile page on Github, you can see all
of the plugins he has ever written and published.&lt;/p&gt;
&lt;h2 id=&#34;code-discussions&#34;&gt;Code discussions&lt;/h2&gt;
&lt;p&gt;Yes, you can discuss the project on IRC or on mailing lists. Those aren&amp;rsquo;t
exactly user friendly, and it&amp;rsquo;s hard to discuss code that way. Github makes it
easy for you to submit a pull request and have others comment on your code.&lt;/p&gt;
&lt;h2 id=&#34;publish-your-hacks-with-ease&#34;&gt;Publish your hacks with ease&lt;/h2&gt;
&lt;p&gt;Did you just write a patch that greatly improves an existing project? Fork it
and publish it in minutes. If you notify the original project, you can get
helpful feedback on your hacks. This encourages people to publish their code
even if it&amp;rsquo;s never merged into the original project.&lt;/p&gt;
&lt;h2 id=&#34;judge-how-active-a-project-is&#34;&gt;Judge how active a project is&lt;/h2&gt;
&lt;p&gt;Github makes it easy to quickly look through a project&amp;rsquo;s history to see how
active it is. In no time, you can tell how many people commit to it and how
often. Also, the number of watchers/forks in the corner gives you a pretty good
idea of how many people are actually using the project. This is possibly my
favorite feature. Open source developers don&amp;rsquo;t need to waste their time
exploring libraries that aren&amp;rsquo;t maintained.&lt;/p&gt;
&lt;h2 id=&#34;discover-new-projects&#34;&gt;Discover new projects&lt;/h2&gt;
&lt;p&gt;Smart people come up with clever things all the time. If they share their code
on Github, you can find it in the Explore Github section. I can&amp;rsquo;t remember how
many times I&amp;rsquo;ve discovered a cool project this way. My favorite example is
&lt;a href=&#34;https://github.com/jashkenas/coffee-script&#34;&gt;CoffeeScript&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;follow-the-development-of-your-favorite-projects&#34;&gt;Follow the development of your favorite projects&lt;/h2&gt;
&lt;p&gt;When you first log in, you are presented with a list of changes that were made
to the projects you follow. This projects has a new release, this bug was
fixed. etc. Invaluable.&lt;/p&gt;
&lt;p&gt;What are your thoughts? Any favorite features of Github?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
