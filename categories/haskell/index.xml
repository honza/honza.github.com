<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on Honza Pokorny</title>
    <link>https://honza.ca/categories/haskell/</link>
    <description>Recent content in Haskell on Honza Pokorny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Nov 2015 11:25:00 -0400</lastBuildDate>
    
	<atom:link href="https://honza.ca/categories/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Language choice</title>
      <link>https://honza.ca/2015/11/language-choice/</link>
      <pubDate>Mon, 02 Nov 2015 11:25:00 -0400</pubDate>
      
      <guid>https://honza.ca/2015/11/language-choice/</guid>
      <description>Warning: this is a rant
Recently, I have made great progress in my journey towards Haskell enlightenment. I finally see how many of the little pieces of the Haskell puzzle fit together. At this point, I feel empowered to go forth and write useful programs. I read through the source of Scotty the web framework the other day, and I was very pleasantly surprised that I understood how it works. I absolutely love Haskell.</description>
    </item>
    
    <item>
      <title>Building a Redis clone in Haskell</title>
      <link>https://honza.ca/2015/09/building-a-redis-clone-in-haskell/</link>
      <pubDate>Thu, 03 Sep 2015 12:00:00 -0300</pubDate>
      
      <guid>https://honza.ca/2015/09/building-a-redis-clone-in-haskell/</guid>
      <description>In this post, we will attempt to make a simplified clone of Redis in Haskell. Here is a set of requirements that we will aim to fullfill:
get and set operations Multi-threaded Atomic Redis compatible (implement the Redis protocol) We should be able to use the redis-cli tool to connect to our server and issue commands to it.
We are going to omit many features that Redis has. For example, there will be no disk persistence.</description>
    </item>
    
    <item>
      <title>Programming languages in a nutshell</title>
      <link>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</link>
      <pubDate>Wed, 18 Feb 2015 10:34:00 -0400</pubDate>
      
      <guid>https://honza.ca/2015/02/programming-languages-in-a-nutshell/</guid>
      <description>Python, Ruby concurrency lol packaging lol Golang lol if you don&amp;rsquo;t like typing err := y u no generics lol imports Haskell need PhD will never be mainstream Idris only for concating lists Erlang lol syntax Javascript javascript Rust how do I do x this week? Clojure let me know when the program has started running lol if you want to build a secure thing on the web Scala lol if you think this actually improves java PHP which of these 10 fns should I use?</description>
    </item>
    
    <item>
      <title>Haskell vs Clojure syntax</title>
      <link>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</link>
      <pubDate>Tue, 12 Feb 2013 16:33:00 -0400</pubDate>
      
      <guid>https://honza.ca/2013/02/haskell-vs-clojure-syntax/</guid>
      <description>Clojure has virtually zero syntax. What I mean by that is that all structures look the same: the first item in a list is the function and the rest are the arguments. This is true for variable assignment, if statements, data structures and functions themselves.
(+ 1 2) (defn greet [name] (str &amp;quot;Hello &amp;quot; name)) (def user-count 334)  However, before you can do anything useful in Haskell, you must learn all kinds of crazy syntax: function definitions, pattern matching, do forms, functors, monads, typeclasses, &amp;hellip;</description>
    </item>
    
    <item>
      <title>Haskell Strings</title>
      <link>https://honza.ca/2012/10/haskell-strings/</link>
      <pubDate>Wed, 24 Oct 2012 10:01:00 -0300</pubDate>
      
      <guid>https://honza.ca/2012/10/haskell-strings/</guid>
      <description>It continues to amaze me how bad Haskell is at processing strings. One of the reasons I wanted to learn Haskell was to be able to write short, dynamic-language-like programs that execute fast once compiled. Somehow rather, Haskell has failed to deliver on its promise of bare metal speed. I mostly write scripts and utilities meant to run on my machine&amp;mdash;these scripts mostly process text. Read a file, parse it and spit something out.</description>
    </item>
    
  </channel>
</rss>