<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title>Honza Pokorny - Thoughts on web development</title>
    <link href="http://honza.ca/atom.xml" rel="self"/>
    <link href="http://honza.ca"/>
    <updated>2013-06-26T00:19:04Z</updated>
    <id>http://honza.ca</id>

    
        <entry>
            <title>Tweetable verses</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/06/tweetable-verses"/>
            <updated>2013-06-25T21:00:00Z</updated>
            <published>2013-06-25T21:00:00Z</published>
            <id>http://honza.ca/2013/06/tweetable-verses</id>

            <content type="html">
                <div class="section" id="tweetable-verses">
<h1>Tweetableverses</h1>
<p>Tweetable here means that it fits into a 140 character tweet, including the
reference.  The text used to create this list is the <span class="caps">ESV</span>translation.</p>
<p>Total results:17257</p>
<div class="section" id="genesis">
<h2>Genesis</h2>
<p>1:1, 1:3, 1:4, 1:5, 1:6, 1:8, 1:10, 1:13, 1:15, 1:16, 1:17, 1:18, 1:19, 1:23, 1:27, 2:1, 2:3, 2:6, 2:8, 2:10, 2:11, 2:12, 2:13, 2:14, 2:15, 2:16, 2:17, 2:18, 2:22, 2:24, 2:25, 3:2, 3:4, 3:5, 3:9, 3:10, 3:11, 3:12, 3:13, 3:18, 3:20, 3:21, 3:23, 4:1, 4:2, 4:3, 4:5, 4:6, 4:8, 4:9, 4:10, 4:11, 4:12, 4:13, 4:16, 4:18, 4:19, 4:20, 4:21, 4:22, 4:24, 4:26, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:7, 5:8, 5:9, 5:10, 5:11, 5:12, 5:13, 5:14, 5:15, 5:16, 5:17, 5:18, 5:19, 5:20, 5:21, 5:22, 5:23, 5:24, 5:25, 5:26, 5:27, 5:28, 5:30, 5:31, 5:32, 6:1, 6:2, 6:3, 6:6, 6:8, 6:9, 6:10, 6:11, 6:12, 6:14, 6:15, 6:21, 6:22, 7:3, 7:5, 7:6, 7:7, 7:8, 7:9, 7:10, 7:12, 7:15, 7:16, 7:17, 7:18, 7:19, 7:20, 7:22, 7:24, 8:2, 8:3, 8:4, 8:6, 8:7, 8:8, 8:10, 8:12, 8:14, 8:15, 8:16, 8:18, 8:19, 8:22, 9:1, 9:3, 9:4, 9:6, 9:7, 9:8, 9:9, 9:13, 9:14, 9:17, 9:18, 9:19, 9:20, 9:21, 9:22, 9:24, 9:25, 9:26, 9:27, 9:28, 9:29, 10:1, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:12, 10:13, 10:14, 10:15, 10:16, 10:17, 10:18, 10:20, 10:21, 10:22, 10:23, 10:24, 10:26, 10:27, 10:28, 10:29, 10:30, 10:31, 11:1, 11:2, 11:5, 11:7, 11:8, 11:10, 11:11, 11:12, 11:13, 11:14, 11:15, 11:16, 11:17, 11:18, 11:19, 11:20, 11:21, 11:22, 11:23, 11:24, 11:25, 11:26, 11:27, 11:28, 11:30, 11:32, 12:1, 12:2, 12:4, 12:6, 12:9, 12:10, 12:11, 12:12, 12:13, 12:14, 12:15, 12:17, 12:18, 12:19, 12:20, 13:1, 13:2, 13:4, 13:5, 13:11, 13:12, 13:13, 13:15, 13:17, 14:1, 14:3, 14:4, 14:6, 14:11, 14:12, 14:18, 14:19, 14:20, 14:21, 14:22, 14:23, 15:3, 15:4, 15:6, 15:7, 15:8, 15:11, 15:12, 15:14, 15:15, 15:16, 15:17, 15:19, 15:20, 15:21, 16:1, 16:7, 16:9, 16:14, 16:15, 16:16, 17:2, 17:3, 17:4, 17:6, 17:11, 17:15, 17:18, 17:21, 17:22, 17:24, 17:25, 17:26, 18:1, 18:3, 18:4, 18:6, 18:7, 18:9, 18:11, 18:12, 18:13, 18:15, 18:16, 18:17, 18:18, 18:20, 18:22, 18:23, 18:26, 18:27, 18:29, 18:33, 19:5, 19:6, 19:7, 19:10, 19:18, 19:21, 19:22, 19:23, 19:24, 19:25, 19:26, 19:27, 19:32, 19:36, 19:37, 19:38, 20:1, 20:2, 20:4, 20:10, 20:12, 20:15, 20:17, 20:18, 21:1, 21:2, 21:3, 21:4, 21:5, 21:6, 21:7, 21:8, 21:9, 21:11, 21:13, 21:15, 21:18, 21:19, 21:20, 21:21, 21:22, 21:24, 21:25, 21:26, 21:27, 21:28, 21:29, 21:30, 21:31, 21:33, 21:34, 22:1, 22:4, 22:8, 22:10, 22:11, 22:15, 22:18, 22:19, 22:20, 22:21, 22:22, 22:23, 22:24, 23:1, 23:3, 23:5, 23:7, 23:12, 23:14, 23:18, 23:20, 24:1, 24:4, 24:6, 24:9, 24:12, 24:13, 24:17, 24:18, 24:20, 24:21, 24:23, 24:24, 24:25, 24:26, 24:28, 24:29, 24:34, 24:36, 24:38, 24:39, 24:42, 24:50, 24:51, 24:52, 24:55, 24:56, 24:57, 24:58, 24:59, 24:62, 24:64, 24:66, 25:1, 25:2, 25:3, 25:4, 25:5, 25:7, 25:8, 25:10, 25:11, 25:12, 25:14, 25:15, 25:17, 25:19, 25:24, 25:25, 25:27, 25:28, 25:29, 25:30, 25:31, 25:32, 25:33, 26:2, 26:5, 26:6, 26:11, 26:12, 26:13, 26:14, 26:16, 26:17, 26:19, 26:21, 26:23, 26:26, 26:27, 26:30, 26:31, 26:32, 26:33, 26:35, 27:2, 27:3, 27:5, 27:6, 27:7, 27:8, 27:10, 27:11, 27:12, 27:13, 27:14, 27:16, 27:17, 27:18, 27:23, 27:24, 27:26, 27:28, 27:32, 27:35, 27:43, 27:44, 28:1, 28:3, 28:7, 28:8, 28:10, 28:16, 28:19, 28:21, 29:1, 29:4, 29:5, 29:6, 29:9, 29:11, 29:12, 29:14, 29:16, 29:17, 29:18, 29:19, 29:20, 29:21, 29:22, 29:23, 29:24, 29:26, 29:27, 29:28, 29:29, 29:30, 29:31, 30:4, 30:5, 30:6, 30:7, 30:9, 30:10, 30:11, 30:12, 30:13, 30:17, 30:18, 30:19, 30:21, 30:22, 30:23, 30:24, 30:25, 30:26, 30:28, 30:29, 30:34, 30:36, 30:39, 30:42, 30:43, 31:2, 31:3, 31:4, 31:6, 31:7, 31:9, 31:11, 31:14, 31:15, 31:17, 31:19, 31:20, 31:21, 31:22, 31:23, 31:28, 31:30, 31:31, 31:40, 31:44, 31:45, 31:46, 31:47, 31:48, 31:49, 31:51, 32:1, 32:2, 32:3, 32:8, 32:13, 32:14, 32:15, 32:21, 32:23, 32:24, 32:26, 32:27, 32:29, 32:31, 33:2, 33:3, 33:4, 33:6, 33:7, 33:8, 33:9, 33:12, 33:16, 33:20, 34:1, 34:3, 34:4, 34:6, 34:9, 34:10, 34:13, 34:15, 34:17, 34:18, 34:20, 34:26, 34:27, 34:28, 34:29, 34:31, 35:6, 35:8, 35:9, 35:12, 35:13, 35:15, 35:17, 35:18, 35:19, 35:20, 35:21, 35:23, 35:24, 35:25, 35:26, 35:27, 35:28, 36:1, 36:3, 36:4, 36:5, 36:8, 36:9, 36:10, 36:11, 36:12, 36:13, 36:15, 36:16, 36:19, 36:20, 36:21, 36:22, 36:23, 36:25, 36:26, 36:27, 36:28, 36:29, 36:30, 36:31, 36:32, 36:33, 36:34, 36:36, 36:37, 36:38, 36:41, 36:42, 37:1, 37:5, 37:6, 37:11, 37:12, 37:15, 37:16, 37:18, 37:19, 37:21, 37:23, 37:24, 37:26, 37:29, 37:30, 37:31, 37:34, 37:36, 38:2, 38:3, 38:4, 38:5, 38:6, 38:7, 38:10, 38:13, 38:15, 38:17, 38:19, 38:27, 38:30, 39:2, 39:3, 39:7, 39:10, 39:11, 39:12, 39:13, 39:16, 39:17, 39:18, 39:21, 40:2, 40:3, 40:4, 40:6, 40:7, 40:9, 40:12, 40:18, 40:19, 40:21, 40:22, 40:23, 41:1, 41:2, 41:4, 41:5, 41:6, 41:7, 41:9, 41:10, 41:11, 41:13, 41:16, 41:17, 41:18, 41:19, 41:20, 41:22, 41:23, 41:25, 41:26, 41:28, 41:29, 41:31, 41:32, 41:33, 41:37, 41:38, 41:39, 41:41, 41:47, 41:52, 41:53, 41:57, 42:1, 42:3, 42:4, 42:5, 42:8, 42:10, 42:11, 42:12, 42:14, 42:17, 42:18, 42:20, 42:23, 42:26, 42:29, 42:30, 42:31, 43:1, 43:3, 43:4, 43:6, 43:10, 43:13, 43:17, 43:19, 43:20, 43:22, 43:25, 43:27, 43:28, 43:31, 44:3, 44:5, 44:6, 44:7, 44:9, 44:10, 44:11, 44:12, 44:13, 44:14, 44:19, 44:21, 44:22, 44:23, 44:24, 44:25, 44:27, 44:28, 44:29, 44:34, 45:2, 45:5, 45:7, 45:12, 45:13, 45:14, 45:15, 45:16, 45:17, 45:20, 45:24, 45:25, 45:28, 46:1, 46:2, 46:4, 46:8, 46:9, 46:10, 46:11, 46:13, 46:14, 46:16, 46:17, 46:18, 46:19, 46:21, 46:22, 46:23, 46:24, 46:25, 46:28, 46:30, 46:33, 47:2, 47:5, 47:7, 47:8, 47:10, 47:16, 47:21, 47:25, 47:28, 47:31, 48:1, 48:2, 48:3, 48:8, 48:11, 48:12, 48:18, 49:2, 49:3, 49:5, 49:12, 49:13, 49:14, 49:16, 49:17, 49:18, 49:19, 49:20, 49:21, 49:22, 49:23, 49:27, 49:31, 49:32, 50:1, 50:2, 50:6, 50:9, 50:12, 50:16, 50:18, 50:19, 50:21, 50:22, 50:25,50:26</p>
</div>
<div class="section" id="exodus">
<h2>Exodus</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:6, 1:8, 1:9, 1:13, 1:15, 1:17, 1:18, 1:20, 1:21, 2:1, 2:2, 2:4, 2:7, 2:8, 2:12, 2:17, 2:18, 2:19, 2:20, 2:21, 2:22, 2:24, 2:25, 3:3, 3:4, 3:5, 3:10, 3:11, 3:14, 3:19, 3:20, 3:21, 4:2, 4:3, 4:8, 4:11, 4:12, 4:13, 4:16, 4:17, 4:19, 4:22, 4:23, 4:24, 4:26, 4:27, 4:29, 4:30, 5:5, 5:6, 5:7, 5:9, 5:11, 5:12, 5:13, 5:15, 5:17, 5:18, 5:20, 5:22, 6:2, 6:3, 6:4, 6:9, 6:10, 6:11, 6:17, 6:18, 6:19, 6:21, 6:22, 6:24, 6:26, 6:27, 6:28, 6:29, 6:30, 7:1, 7:3, 7:6, 7:7, 7:8, 7:12, 7:13, 7:14, 7:18, 7:23, 7:24, 7:25, 8:1, 8:2, 8:4, 8:6, 8:7, 8:10, 8:11, 8:12, 8:13, 8:14, 8:15, 8:18, 8:23, 8:25, 8:27, 8:30, 8:32, 9:2, 9:5, 9:12, 9:16, 9:17, 9:20, 9:21, 9:26, 9:28, 9:30, 9:31, 9:32, 9:35, 10:4, 10:8, 10:16, 10:17, 10:18, 10:20, 10:22, 10:25, 10:27, 10:29, 11:4, 11:6, 11:9, 12:1, 12:2, 12:5, 12:7, 12:8, 12:9, 12:10, 12:20, 12:24, 12:25, 12:26, 12:28, 12:32, 12:33, 12:38, 12:40, 12:41, 12:43, 12:44, 12:45, 12:47, 12:49, 12:50, 12:51, 13:1, 13:4, 13:6, 13:8, 13:10, 13:11, 13:16, 13:20, 13:22, 14:1, 14:3, 14:6, 14:7, 14:14, 14:15, 14:18, 14:23, 14:30, 15:3, 15:4, 15:5, 15:6, 15:7, 15:8, 15:10, 15:11, 15:12, 15:14, 15:15, 15:18, 15:23, 15:24, 16:2, 16:5, 16:11, 16:13, 16:14, 16:17, 16:19, 16:21, 16:24, 16:25, 16:26, 16:27, 16:28, 16:30, 16:34, 16:36, 17:4, 17:8, 17:10, 17:11, 17:13, 17:15, 17:16, 18:2, 18:3, 18:6, 18:11, 18:13, 18:15, 18:17, 18:23, 18:24, 18:26, 18:27, 19:4, 19:7, 19:10, 19:11, 19:14, 19:15, 19:17, 19:19, 19:22, 19:25, 20:1, 20:2, 20:3, 20:6, 20:8, 20:9, 20:12, 20:13, 20:14, 20:15, 20:16, 20:19, 20:21, 20:23, 20:25, 20:26, 21:1, 21:2, 21:3, 21:5, 21:7, 21:9, 21:10, 21:11, 21:12, 21:14, 21:15, 21:16, 21:17, 21:18, 21:20, 21:21, 21:23, 21:24, 21:25, 21:26, 21:27, 21:30, 21:31, 21:33, 21:34, 22:1, 22:2, 22:4, 22:12, 22:13, 22:15, 22:17, 22:18, 22:19, 22:20, 22:21, 22:22, 22:23, 22:24, 22:26, 22:28, 23:1, 23:3, 23:4, 23:6, 23:7, 23:8, 23:9, 23:10, 23:14, 23:17, 23:18, 23:20, 23:25, 23:26, 23:28, 23:30, 23:32, 24:2, 24:5, 24:6, 24:9, 24:11, 24:13, 24:15, 24:18, 25:1, 25:3, 25:4, 25:5, 25:6, 25:7, 25:8, 25:9, 25:13, 25:14, 25:15, 25:16, 25:17, 25:18, 25:21, 25:24, 25:25, 25:26, 25:27, 25:28, 25:30, 25:34, 25:35, 25:36, 25:37, 25:38, 25:39, 25:40, 26:3, 26:7, 26:14, 26:15, 26:16, 26:17, 26:18, 26:20, 26:21, 26:22, 26:23, 26:26, 26:28, 26:30, 26:32, 26:34, 27:5, 27:6, 27:7, 27:8, 27:12, 27:13, 27:14, 27:15, 27:17, 27:19, 28:2, 28:5, 28:6, 28:7, 28:9, 28:10, 28:13, 28:14, 28:16, 28:17, 28:18, 28:19, 28:20, 28:22, 28:23, 28:24, 28:26, 28:31, 28:33, 28:34, 28:36, 28:37, 28:40, 28:42, 29:3, 29:4, 29:6, 29:7, 29:8, 29:10, 29:11, 29:14, 29:15, 29:16, 29:17, 29:18, 29:19, 29:29, 29:31, 29:38, 29:39, 29:43, 29:44, 29:45, 30:1, 30:5, 30:7, 30:11, 30:14, 30:17, 30:19, 30:22, 30:24, 30:25, 30:26, 30:27, 30:28, 30:29, 30:30, 30:31, 30:33, 30:35, 30:38, 31:1, 31:2, 31:3, 31:4, 31:5, 31:7, 31:8, 31:9, 31:12, 32:3, 32:9, 32:14, 32:16, 32:17, 32:21, 32:22, 32:25, 32:28, 32:32, 32:33, 32:35, 33:4, 33:6, 33:14, 33:15, 33:18, 33:20, 33:21, 33:22, 33:23, 34:5, 34:8, 34:12, 34:13, 34:14, 34:17, 34:19, 34:21, 34:22, 34:23, 34:30, 34:31, 34:32, 34:33, 35:3, 35:4, 35:6, 35:7, 35:8, 35:9, 35:10, 35:11, 35:12, 35:13, 35:14, 35:16, 35:17, 35:18, 35:20, 35:26, 35:27, 35:28, 35:31, 35:32, 35:33, 35:34, 36:4, 36:5, 36:7, 36:10, 36:14, 36:16, 36:18, 36:19, 36:20, 36:21, 36:22, 36:23, 36:25, 36:26, 36:27, 36:28, 36:29, 36:30, 36:31, 36:33, 36:34, 37:2, 37:3, 37:4, 37:5, 37:6, 37:7, 37:10, 37:11, 37:12, 37:13, 37:14, 37:15, 37:20, 37:21, 37:22, 37:23, 37:24, 37:26, 37:28, 37:29, 38:2, 38:4, 38:5, 38:6, 38:7, 38:9, 38:10, 38:13, 38:14, 38:16, 38:20, 38:22, 38:28, 38:29, 39:2, 39:4, 39:9, 39:10, 39:11, 39:12, 39:13, 39:15, 39:16, 39:17, 39:19, 39:22, 39:24, 39:27, 39:28, 39:31, 39:34, 39:35, 39:36, 39:37, 39:38, 39:39, 39:42, 40:1, 40:2, 40:3, 40:4, 40:6, 40:7, 40:8, 40:11, 40:12, 40:13, 40:14, 40:16, 40:17, 40:18, 40:19, 40:20, 40:22, 40:23, 40:24, 40:25, 40:26, 40:27, 40:28, 40:30, 40:31, 40:32, 40:34, 40:36,40:37</p>
</div>
<div class="section" id="leviticus">
<h2>Leviticus</h2>
<p>1:1, 1:4, 1:6, 1:7, 1:8, 1:10, 1:14, 1:16, 2:3, 2:5, 2:6, 2:7, 2:10, 2:15, 3:7, 3:11, 3:12, 3:16, 4:1, 4:5, 4:11, 4:16, 4:17, 4:19, 4:23, 4:29, 4:32, 5:5, 5:14, 5:19, 6:1, 6:3, 6:8, 6:11, 6:13, 6:14, 6:19, 6:23, 6:24, 6:26, 6:29, 7:1, 7:3, 7:5, 7:6, 7:10, 7:11, 7:13, 7:17, 7:19, 7:22, 7:23, 7:26, 7:27, 7:28, 7:31, 7:32, 8:1, 8:3, 8:4, 8:5, 8:6, 8:8, 8:10, 8:12, 8:17, 8:18, 8:19, 8:20, 8:22, 8:27, 8:32, 8:34, 8:36, 9:1, 9:6, 9:8, 9:11, 9:12, 9:13, 9:14, 9:16, 9:20, 9:21, 10:2, 10:5, 10:8, 10:10, 10:11, 10:20, 11:1, 11:3, 11:5, 11:6, 11:7, 11:8, 11:11, 11:12, 11:14, 11:15, 11:16, 11:17, 11:18, 11:19, 11:20, 11:23, 11:24, 11:25, 11:28, 11:30, 11:31, 11:33, 11:36, 11:37, 11:38, 11:39, 11:41, 11:45, 12:1, 12:3, 13:1, 13:9, 13:14, 13:15, 13:16, 13:18, 13:19, 13:22, 13:24, 13:29, 13:35, 13:38, 13:40, 13:41, 13:44, 13:47, 13:48, 13:50, 14:1, 14:2, 14:5, 14:15, 14:26, 14:27, 14:30, 14:32, 14:33, 14:35, 14:38, 14:39, 14:43, 14:46, 14:47, 14:49, 14:50, 14:54, 14:55, 14:56, 14:57, 15:1, 15:2, 15:4, 15:5, 15:9, 15:16, 15:17, 15:21, 15:23, 15:28, 15:32, 16:1, 16:6, 16:7, 16:8, 16:9, 16:22, 16:25, 16:28, 16:30, 16:31, 17:1, 17:3, 17:16, 18:1, 18:2, 18:4, 18:5, 18:6, 18:8, 18:12, 18:13, 18:14, 18:15, 18:16, 18:18, 18:19, 18:20, 18:21, 18:22, 18:25, 18:27, 18:28, 18:29, 19:1, 19:2, 19:3, 19:4, 19:5, 19:7, 19:11, 19:12, 19:14, 19:21, 19:24, 19:25, 19:26, 19:27, 19:28, 19:30, 19:31, 19:32, 19:33, 19:35, 19:37, 20:1, 20:7, 20:8, 20:15, 20:21, 20:26, 21:2, 21:3, 21:4, 21:5, 21:9, 21:11, 21:13, 21:15, 21:16, 21:18, 21:19, 21:20, 21:22, 21:24, 22:1, 22:7, 22:8, 22:10, 22:12, 22:15, 22:16, 22:17, 22:19, 22:20, 22:26, 22:28, 22:29, 22:30, 22:31, 22:33, 23:1, 23:5, 23:7, 23:9, 23:19, 23:23, 23:25, 23:26, 23:29, 23:30, 23:31, 23:33, 23:35, 23:42, 23:44, 24:1, 24:4, 24:5, 24:6, 24:8, 24:12, 24:13, 24:15, 24:17, 24:18, 24:19, 24:20, 24:21, 24:22, 25:1, 25:3, 25:7, 25:12, 25:13, 25:14, 25:17, 25:18, 25:19, 25:20, 25:21, 25:23, 25:24, 25:26, 25:32, 25:34, 25:36, 25:37, 25:38, 25:39, 25:40, 25:42, 25:43, 25:48, 25:51, 25:53, 25:54, 26:2, 26:3, 26:7, 26:9, 26:10, 26:11, 26:12, 26:14, 26:18, 26:19, 26:21, 26:23, 26:24, 26:27, 26:28, 26:29, 26:31, 26:32, 26:38, 27:1, 27:4, 27:9, 27:12, 27:13, 27:15, 27:17, 27:20, 27:22, 27:24, 27:25, 27:29, 27:31,27:34</p>
</div>
<div class="section" id="numbers">
<h2>Numbers</h2>
<p>1:3, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:10, 1:11, 1:12, 1:13, 1:14, 1:15, 1:16, 1:17, 1:19, 1:21, 1:23, 1:25, 1:27, 1:29, 1:31, 1:33, 1:35, 1:37, 1:39, 1:41, 1:43, 1:46, 1:47, 1:48, 1:49, 1:52, 1:54, 2:1, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:11, 2:13, 2:14, 2:15, 2:16, 2:19, 2:20, 2:21, 2:22, 2:23, 2:24, 2:26, 2:27, 2:28, 2:29, 2:30, 2:31, 2:33, 3:1, 3:2, 3:3, 3:5, 3:6, 3:7, 3:9, 3:11, 3:14, 3:15, 3:16, 3:17, 3:18, 3:19, 3:20, 3:21, 3:22, 3:23, 3:24, 3:28, 3:29, 3:30, 3:33, 3:34, 3:37, 3:42, 3:43, 3:44, 3:48, 3:49, 3:50, 3:51, 4:1, 4:2, 4:3, 4:4, 4:6, 4:10, 4:13, 4:17, 4:18, 4:20, 4:21, 4:22, 4:24, 4:29, 4:35, 4:36, 4:38, 4:39, 4:40, 4:42, 4:43, 4:44, 4:48, 5:1, 5:4, 5:5, 5:9, 5:10, 5:11, 5:12, 5:16, 5:23, 5:28, 5:29, 5:31, 6:1, 6:4, 6:6, 6:8, 6:10, 6:16, 6:22, 6:23, 6:24, 6:25, 6:26, 6:27, 7:4, 7:6, 7:7, 7:11, 7:12, 7:14, 7:15, 7:16, 7:18, 7:20, 7:21, 7:22, 7:24, 7:26, 7:27, 7:28, 7:30, 7:32, 7:33, 7:34, 7:36, 7:38, 7:39, 7:40, 7:42, 7:44, 7:45, 7:46, 7:48, 7:50, 7:51, 7:52, 7:54, 7:56, 7:57, 7:58, 7:60, 7:62, 7:63, 7:64, 7:66, 7:68, 7:69, 7:70, 7:72, 7:74, 7:75, 7:76, 7:78, 7:80, 7:81, 7:82, 8:1, 8:2, 8:3, 8:5, 8:6, 8:9, 8:10, 8:13, 8:14, 8:18, 8:23, 8:25, 9:2, 9:4, 9:8, 9:9, 9:16, 10:1, 10:3, 10:4, 10:5, 10:7, 10:13, 10:15, 10:16, 10:17, 10:18, 10:19, 10:20, 10:21, 10:23, 10:24, 10:26, 10:27, 10:28, 10:30, 10:32, 10:34, 10:36, 11:2, 11:3, 11:5, 11:6, 11:7, 11:9, 11:13, 11:14, 11:15, 11:19, 11:23, 11:27, 11:28, 11:30, 11:34, 11:35, 12:1, 12:2, 12:3, 12:7, 12:9, 12:11, 12:12, 12:13, 12:16, 13:1, 13:4, 13:5, 13:6, 13:7, 13:8, 13:9, 13:10, 13:11, 13:12, 13:13, 13:14, 13:15, 13:16, 13:17, 13:18, 13:19, 13:21, 13:24, 13:25, 13:27, 14:1, 14:4, 14:5, 14:6, 14:8, 14:12, 14:15, 14:17, 14:20, 14:21, 14:23, 14:26, 14:28, 14:32, 14:37, 14:38, 14:39, 14:41, 14:42, 15:1, 15:2, 15:6, 15:7, 15:8, 15:9, 15:10, 15:11, 15:12, 15:13, 15:16, 15:17, 15:18, 15:19, 15:21, 15:22, 15:27, 15:32, 15:33, 15:34, 15:36, 15:37, 15:40, 15:41, 16:4, 16:6, 16:8, 16:12, 16:16, 16:20, 16:21, 16:23, 16:24, 16:25, 16:29, 16:31, 16:34, 16:35, 16:36, 16:43, 16:44, 16:45, 16:48, 16:49, 16:50, 17:1, 17:3, 17:4, 17:7, 17:11, 17:12, 17:13, 18:5, 18:10, 18:14, 18:18, 18:22, 18:25, 19:1, 19:3, 19:5, 19:6, 19:8, 19:11, 19:15, 19:17, 19:22, 20:2, 20:3, 20:4, 20:7, 20:9, 20:18, 20:20, 20:21, 20:22, 20:23, 20:25, 20:27, 20:29, 21:6, 21:10, 21:11, 21:12, 21:14, 21:15, 21:17, 21:19, 21:20, 21:21, 21:25, 21:27, 21:30, 21:31, 21:32, 21:35, 22:1, 22:2, 22:3, 22:9, 22:10, 22:12, 22:14, 22:15, 22:16, 22:17, 22:19, 22:21, 22:24, 22:37, 22:39, 22:40, 22:41, 23:1, 23:2, 23:5, 23:6, 23:8, 23:12, 23:15, 23:16, 23:18, 23:20, 23:22, 23:25, 23:26, 23:28, 23:29, 23:30, 24:2, 24:3, 24:4, 24:5, 24:11, 24:12, 24:15, 24:18, 24:19, 24:22, 24:23, 24:24, 24:25, 25:1, 25:2, 25:3, 25:5, 25:9, 25:10, 25:12, 25:16, 25:17, 26:1, 26:3, 26:6, 26:7, 26:8, 26:11, 26:13, 26:14, 26:16, 26:17, 26:18, 26:19, 26:21, 26:22, 26:23, 26:24, 26:25, 26:27, 26:28, 26:30, 26:31, 26:32, 26:34, 26:36, 26:39, 26:40, 26:41, 26:43, 26:45, 26:46, 26:47, 26:48, 26:49, 26:50, 26:51, 26:52, 26:53, 26:55, 26:56, 26:60, 26:61, 27:5, 27:6, 27:9, 27:10, 27:12, 27:13, 27:15, 27:16, 27:18, 27:19, 27:20, 27:23, 28:1, 28:4, 28:5, 28:6, 28:10, 28:16, 28:17, 28:18, 28:21, 28:22, 28:23, 28:25, 28:28, 28:29, 28:30, 29:3, 29:4, 29:5, 29:7, 29:10, 29:15, 29:16, 29:17, 29:19, 29:20, 29:22, 29:23, 29:25, 29:26, 29:28, 29:29, 29:31, 29:32, 29:34, 29:35, 29:37, 29:38, 29:40, 30:1, 30:3, 30:6, 30:9, 30:10, 30:13, 30:15, 31:1, 31:2, 31:4, 31:5, 31:7, 31:10, 31:11, 31:13, 31:15, 31:17, 31:18, 31:20, 31:22, 31:24, 31:25, 31:27, 31:29, 31:31, 31:32, 31:33, 31:34, 31:35, 31:36, 31:37, 31:38, 31:39, 31:40, 31:41, 31:42, 31:43, 31:44, 31:45, 31:46, 31:51, 31:53, 32:3, 32:6, 32:7, 32:8, 32:10, 32:12, 32:16, 32:18, 32:20, 32:21, 32:23, 32:24, 32:25, 32:26, 32:27, 32:30, 32:31, 32:34, 32:35, 32:36, 32:37, 32:38, 32:39, 32:40, 32:41, 32:42, 33:5, 33:6, 33:7, 33:10, 33:11, 33:12, 33:13, 33:14, 33:15, 33:16, 33:17, 33:18, 33:19, 33:20, 33:21, 33:22, 33:23, 33:24, 33:25, 33:26, 33:27, 33:28, 33:29, 33:30, 33:31, 33:32, 33:33, 33:34, 33:35, 33:36, 33:37, 33:39, 33:41, 33:42, 33:43, 33:44, 33:45, 33:46, 33:47, 33:48, 33:49, 33:50, 33:51, 33:53, 33:56, 34:1, 34:5, 34:6, 34:7, 34:8, 34:9, 34:10, 34:15, 34:16, 34:18, 34:19, 34:20, 34:21, 34:22, 34:23, 34:24, 34:25, 34:26, 34:27, 34:28, 34:29, 35:1, 35:7, 35:9, 35:10, 35:13, 35:14, 35:16, 35:19, 35:20, 35:22, 35:24, 35:26, 35:29, 35:31, 36:10,36:11</p>
</div>
<div class="section" id="deuteronomy">
<h2>Deuteronomy</h2>
<p>1:2, 1:5, 1:6, 1:9, 1:10, 1:12, 1:13, 1:14, 1:18, 1:20, 1:23, 1:24, 1:26, 1:29, 1:30, 1:32, 1:34, 1:35, 1:37, 1:38, 1:40, 1:45, 1:46, 2:2, 2:3, 2:10, 2:11, 2:13, 2:15, 2:16, 2:17, 2:18, 2:20, 2:26, 2:27, 2:32, 2:33, 2:35, 3:5, 3:7, 3:9, 3:15, 3:22, 3:23, 3:25, 3:29, 4:4, 4:7, 4:8, 4:17, 4:18, 4:22, 4:24, 4:28, 4:33, 4:35, 4:41, 4:44, 4:48, 4:49, 5:2, 5:3, 5:4, 5:6, 5:7, 5:10, 5:12, 5:13, 5:17, 5:18, 5:19, 5:20, 5:30, 6:4, 6:5, 6:6, 6:8, 6:9, 6:12, 6:13, 6:14, 6:16, 6:19, 6:23, 7:3, 7:11, 7:14, 7:17, 7:18, 7:21, 7:23, 8:4, 8:5, 8:6, 8:8, 8:10, 8:12, 8:13, 8:17, 9:8, 9:11, 9:13, 9:17, 9:20, 9:22, 9:24, 9:29, 10:7, 10:13, 10:14, 10:16, 10:18, 10:19, 10:20, 10:21, 11:1, 11:3, 11:5, 11:7, 11:15, 11:16, 11:20, 11:26, 11:27, 11:32, 12:4, 12:8, 12:9, 12:13, 12:16, 12:19, 12:22, 12:23, 12:24, 12:32, 13:1, 13:11, 13:12, 14:1, 14:3, 14:4, 14:5, 14:6, 14:9, 14:10, 14:11, 14:12, 14:13, 14:14, 14:15, 14:16, 14:17, 14:18, 14:19, 14:20, 14:22, 14:25, 14:27, 15:1, 15:3, 15:8, 15:13, 15:20, 15:22, 15:23, 16:5, 16:9, 16:12, 16:17, 16:21, 16:22, 17:13, 18:2, 18:4, 18:7, 18:8, 18:11, 18:13, 18:17, 18:19, 18:21, 19:2, 19:7, 19:16, 19:18, 19:19, 19:20, 19:21, 20:2, 20:4, 20:9, 20:10, 20:12, 20:13, 20:15, 21:2, 21:7, 21:9, 21:10, 21:11, 21:12, 21:22, 22:1, 22:10, 22:11, 22:12, 22:13, 22:16, 22:18, 22:20, 22:23, 22:28, 22:30, 23:1, 23:6, 23:8, 23:9, 23:11, 23:12, 23:15, 23:17, 23:22, 24:2, 24:6, 24:9, 24:10, 24:11, 24:12, 24:17, 24:22, 25:4, 25:8, 25:10, 25:12, 25:13, 25:14, 25:16, 25:17, 26:4, 26:6, 26:9, 27:1, 27:5, 27:7, 27:8, 27:11, 27:13, 27:14, 27:16, 27:17, 27:18, 27:21, 27:23, 27:24, 27:25, 27:26, 28:2, 28:3, 28:5, 28:6, 28:10, 28:16, 28:17, 28:19, 28:23, 28:24, 28:27, 28:28, 28:34, 28:37, 28:38, 28:41, 28:42, 28:43, 28:44, 28:46, 28:50, 28:60, 28:66, 29:3, 29:4, 29:6, 29:8, 29:9, 29:12, 29:14, 29:15, 29:16, 29:17, 29:24, 29:26, 29:27, 30:7, 30:8, 30:11, 30:14, 30:15, 30:17, 31:1, 31:15, 31:22, 31:24, 31:25, 31:30, 32:1, 32:3, 32:9, 32:12, 32:16, 32:18, 32:19, 32:23, 32:26, 32:28, 32:29, 32:31, 32:33, 32:34, 32:37, 32:40, 32:44, 32:45, 32:48, 33:1, 33:4, 33:5, 33:6, 33:14, 33:15, 33:18, 33:20, 33:22, 33:25, 33:26, 33:28, 34:2, 34:3, 34:5, 34:7, 34:10,34:12</p>
</div>
<div class="section" id="joshua">
<h2>Joshua</h2>
<p>1:1, 1:3, 1:6, 1:10, 1:12, 1:16, 1:17, 2:2, 2:6, 2:8, 2:17, 2:20, 3:2, 3:5, 3:9, 3:11, 3:12, 4:1, 4:2, 4:4, 4:6, 4:11, 4:13, 4:15, 4:16, 4:17, 4:20, 4:21, 4:22, 5:2, 5:3, 5:8, 5:11, 6:1, 6:2, 6:3, 6:7, 6:12, 6:14, 6:27, 7:4, 7:8, 7:10, 7:16, 7:20, 7:22, 8:7, 8:10, 8:12, 8:15, 8:17, 8:23, 8:25, 8:28, 8:30, 8:32, 9:2, 9:3, 9:5, 9:7, 9:8, 9:14, 9:20, 9:25, 9:26, 10:4, 10:7, 10:9, 10:14, 10:15, 10:16, 10:17, 10:18, 10:22, 10:29, 10:31, 10:33, 10:34, 10:36, 10:38, 10:41, 10:42, 10:43, 11:5, 11:7, 11:9, 11:13, 11:18, 11:22, 12:4, 12:9, 12:10, 12:11, 12:12, 12:13, 12:14, 12:15, 12:16, 12:17, 12:18, 12:19, 12:20, 12:21, 12:22, 12:23, 12:24, 13:2, 13:5, 13:7, 13:10, 13:11, 13:15, 13:17, 13:18, 13:19, 13:20, 13:24, 13:26, 13:28, 13:32, 13:33, 14:2, 14:5, 14:8, 14:13, 15:2, 15:4, 15:14, 15:15, 15:16, 15:17, 15:20, 15:22, 15:23, 15:24, 15:25, 15:26, 15:27, 15:28, 15:29, 15:30, 15:31, 15:32, 15:33, 15:34, 15:35, 15:36, 15:37, 15:38, 15:39, 15:40, 15:41, 15:42, 15:43, 15:44, 15:45, 15:46, 15:48, 15:49, 15:50, 15:51, 15:52, 15:53, 15:54, 15:55, 15:56, 15:57, 15:58, 15:59, 15:60, 15:61, 15:62, 16:2, 16:4, 16:7, 17:5, 17:12, 17:13, 18:2, 18:18, 18:21, 18:22, 18:23, 18:24, 18:25, 18:26, 18:27, 19:2, 19:3, 19:4, 19:5, 19:6, 19:7, 19:11, 19:14, 19:15, 19:16, 19:17, 19:18, 19:19, 19:20, 19:21, 19:23, 19:24, 19:25, 19:26, 19:28, 19:30, 19:31, 19:32, 19:35, 19:36, 19:37, 19:38, 19:39, 19:40, 19:41, 19:42, 19:43, 19:44, 19:45, 19:46, 19:48, 20:1, 20:2, 21:8, 21:12, 21:14, 21:15, 21:17, 21:18, 21:19, 21:22, 21:23, 21:24, 21:25, 21:26, 21:28, 21:29, 21:30, 21:31, 21:33, 21:35, 21:36, 21:37, 21:39, 21:42, 21:45, 22:1, 22:6, 22:26, 23:8, 23:10, 23:11, 24:5, 24:10, 24:16, 24:21, 24:23, 24:24, 24:25, 24:28,24:29</p>
</div>
<div class="section" id="judges">
<h2>Judges</h2>
<p>1:2, 1:5, 1:6, 1:11, 1:12, 1:13, 1:18, 1:20, 1:22, 1:23, 1:26, 1:28, 1:29, 1:32, 1:34, 1:36, 2:4, 2:5, 2:6, 2:8, 2:11, 2:13, 2:16, 2:21, 2:22, 2:23, 3:5, 3:11, 3:14, 3:16, 3:17, 3:18, 3:21, 3:23, 3:26, 3:29, 3:30, 3:31, 4:1, 4:4, 4:8, 4:10, 4:12, 4:20, 4:23, 5:1, 5:2, 5:3, 5:5, 5:6, 5:7, 5:8, 5:9, 5:10, 5:12, 5:13, 5:18, 5:20, 5:21, 5:22, 5:24, 5:25, 5:27, 5:29, 6:1, 6:6, 6:7, 6:12, 6:14, 6:16, 6:17, 6:23, 6:34, 6:36, 6:40, 7:9, 7:10, 7:17, 7:21, 7:23, 8:4, 8:9, 8:11, 8:13, 8:17, 8:23, 8:29, 8:30, 8:31, 8:33, 9:8, 9:10, 9:11, 9:12, 9:13, 9:14, 9:17, 9:21, 9:22, 9:26, 9:30, 9:32, 9:34, 9:39, 9:40, 9:41, 9:42, 9:46, 9:47, 9:50, 9:52, 9:53, 9:55, 9:56, 10:2, 10:3, 10:5, 10:13, 10:14, 10:16, 11:1, 11:4, 11:5, 11:6, 11:10, 11:14, 11:15, 11:16, 11:28, 11:30, 11:32, 11:40, 12:7, 12:8, 12:10, 12:11, 12:12, 12:13, 12:14, 13:4, 13:10, 13:12, 13:13, 13:15, 13:17, 13:18, 13:21, 13:22, 13:24, 13:25, 14:1, 14:7, 14:10, 14:11, 14:20, 15:3, 15:7, 15:8, 15:9, 15:15, 15:17, 15:20, 16:1, 16:4, 16:10, 16:16, 16:22, 17:1, 17:5, 17:6, 17:7, 17:11, 17:12, 17:13, 18:4, 18:5, 18:6, 18:8, 18:11, 18:13, 18:15, 18:16, 18:21, 18:31, 19:7, 19:13, 19:14, 19:20, 19:21, 20:7, 20:8, 20:9, 20:11, 20:14, 20:16, 20:17, 20:19, 20:21, 20:24, 20:27, 20:29, 20:41, 20:43, 20:44, 20:46, 20:47, 21:1, 21:2, 21:4, 21:6, 21:9, 21:11, 21:13, 21:15, 21:17, 21:20,21:25</p>
</div>
<div class="section" id="ruth">
<h2>Ruth</h2>
<p>1:3, 1:4, 1:5, 1:10, 1:14, 1:15, 1:18, 1:20, 2:1, 2:5, 2:15, 2:16, 2:17, 3:1, 3:2, 3:5, 3:6, 3:8, 3:9, 3:12, 4:2, 4:8, 4:13, 4:16, 4:18, 4:19, 4:20, 4:21,4:22</p>
</div>
<div class="section" id="samuel">
<h2>1Samuel</h2>
<p>1:4, 1:5, 1:6, 1:10, 1:12, 1:14, 1:16, 1:17, 1:21, 1:25, 1:27, 1:28, 2:2, 2:4, 2:6, 2:7, 2:11, 2:12, 2:18, 2:23, 2:24, 2:26, 3:2, 3:3, 3:4, 3:7, 3:10, 3:12, 3:16, 3:18, 3:19, 3:20, 3:21, 4:9, 4:11, 4:12, 4:14, 4:15, 4:22, 5:1, 5:2, 5:12, 6:1, 6:10, 6:11, 6:16, 7:4, 7:5, 7:11, 7:15, 7:16, 8:1, 8:2, 8:3, 8:4, 8:6, 8:9, 8:10, 8:13, 8:14, 8:15, 8:17, 8:19, 8:20, 8:21, 9:10, 9:11, 9:15, 9:17, 9:18, 9:23, 9:25, 10:4, 10:6, 10:7, 10:9, 10:13, 10:15, 10:17, 10:20, 10:26, 11:6, 11:8, 11:13, 11:14, 12:4, 12:13, 12:16, 12:21, 12:24, 12:25, 13:1, 13:9, 13:10, 13:20, 13:23, 14:5, 14:7, 14:8, 14:9, 14:16, 14:18, 14:23, 14:25, 14:31, 14:35, 14:38, 14:42, 14:44, 14:46, 14:48, 14:51, 15:4, 15:5, 15:7, 15:8, 15:10, 15:13, 15:14, 15:16, 15:25, 15:27, 15:29, 15:31, 15:34, 16:6, 16:8, 16:9, 16:10, 16:14, 16:15, 16:17, 16:19, 16:20, 16:21, 16:22, 17:6, 17:10, 17:11, 17:14, 17:15, 17:16, 17:19, 17:21, 17:22, 17:24, 17:27, 17:29, 17:30, 17:31, 17:32, 17:38, 17:41, 17:42, 17:53, 17:54, 17:56, 18:2, 18:3, 18:7, 18:9, 18:11, 18:12, 18:14, 18:15, 18:16, 18:20, 18:24, 18:28, 18:29, 19:6, 19:12, 19:13, 19:14, 19:15, 19:16, 19:19, 20:4, 20:7, 20:10, 20:11, 20:14, 20:16, 20:17, 20:18, 20:20, 20:22, 20:23, 20:24, 20:28, 20:32, 20:33, 20:35, 20:36, 20:39, 20:40, 21:3, 21:10, 21:12, 21:14, 22:4, 22:10, 22:12, 22:16, 22:20, 22:21, 22:23, 23:1, 23:6, 23:8, 23:9, 23:15, 23:16, 23:18, 23:21, 23:27, 23:29, 24:1, 24:5, 24:9, 24:12, 24:13, 24:14, 24:17, 24:20, 24:22, 25:1, 25:4, 25:5, 25:6, 25:9, 25:12, 25:16, 25:19, 25:22, 25:23, 25:27, 25:32, 25:38, 25:43, 25:44, 26:4, 26:9, 26:13, 26:18, 26:22, 27:2, 27:4, 27:6, 27:7, 28:4, 28:5, 28:6, 28:10, 28:11, 28:16, 28:25, 29:7, 30:4, 30:5, 30:7, 30:10, 30:18, 30:25, 30:27, 30:28, 30:29, 30:30, 30:31, 31:1, 31:3, 31:5, 31:6, 31:8, 31:10, 31:11,31:13</p>
</div>
<div class="section" id="id1">
<h2>2Samuel</h2>
<p>1:1, 1:3, 1:5, 1:7, 1:8, 1:9, 1:11, 1:14, 1:15, 1:17, 1:18, 1:19, 1:24, 1:25, 1:27, 2:2, 2:3, 2:6, 2:8, 2:9, 2:11, 2:12, 2:14, 2:17, 2:18, 2:19, 2:20, 2:28, 2:31, 3:2, 3:4, 3:5, 3:6, 3:9, 3:11, 3:15, 3:17, 3:20, 3:30, 3:32, 3:33, 3:36, 3:38, 4:1, 4:3, 5:1, 5:4, 5:7, 5:9, 5:10, 5:11, 5:14, 5:15, 5:16, 5:18, 5:21, 5:22, 5:25, 6:1, 6:4, 6:8, 6:9, 6:13, 6:14, 6:15, 6:23, 7:1, 7:2, 7:3, 7:4, 7:5, 7:13, 7:15, 7:16, 7:17, 7:20, 7:24, 7:28, 8:1, 8:3, 8:5, 8:7, 8:8, 8:9, 8:12, 8:13, 8:15, 8:16, 8:17, 8:18, 9:1, 9:5, 9:8, 9:12, 9:13, 10:1, 10:7, 10:10, 10:13, 10:15, 11:5, 11:6, 11:7, 11:9, 11:14, 11:16, 11:18, 11:19, 11:22, 11:26, 12:2, 12:6, 12:12, 12:14, 12:15, 12:16, 12:23, 12:25, 12:26, 12:27, 12:29, 13:1, 13:3, 13:7, 13:11, 13:14, 13:17, 13:21, 13:22, 13:26, 13:27, 13:30, 13:35, 13:37, 13:38, 13:39, 14:1, 14:3, 14:4, 14:5, 14:8, 14:10, 14:12, 14:21, 14:23, 14:27, 14:28, 14:31, 15:1, 15:3, 15:5, 15:6, 15:9, 15:13, 15:15, 15:16, 15:17, 15:26, 15:28, 15:29, 15:33, 15:37, 16:7, 16:14, 16:15, 16:17, 16:19, 16:20, 16:22, 17:1, 17:4, 17:5, 17:7, 17:19, 17:24, 17:26, 17:28, 18:1, 18:6, 18:8, 18:10, 18:15, 18:16, 18:21, 18:30, 19:1, 19:3, 19:4, 19:12, 19:15, 19:16, 19:21, 19:23, 19:25, 19:29, 19:30, 19:33, 19:34, 19:36, 20:4, 20:5, 20:9, 20:13, 20:16, 20:18, 20:20, 20:24, 20:25, 20:26, 21:11, 21:21, 21:22, 22:2, 22:4, 22:5, 22:6, 22:7, 22:8, 22:9, 22:10, 22:11, 22:12, 22:13, 22:14, 22:15, 22:17, 22:18, 22:19, 22:20, 22:21, 22:22, 22:23, 22:24, 22:25, 22:26, 22:27, 22:28, 22:29, 22:30, 22:31, 22:32, 22:33, 22:34, 22:35, 22:36, 22:37, 22:38, 22:39, 22:40, 22:41, 22:42, 22:43, 22:45, 22:46, 22:47, 22:48, 22:49, 22:50, 22:51, 23:2, 23:3, 23:6, 23:7, 23:14, 23:15, 23:19, 23:22, 23:23, 23:24, 23:25, 23:26, 23:27, 23:28, 23:29, 23:30, 23:31, 23:32, 23:33, 23:34, 23:35, 23:36, 23:37, 23:38, 23:39, 24:8, 24:11, 24:12, 24:19,24:23</p>
</div>
<div class="section" id="kings">
<h2>1Kings</h2>
<p>1:1, 1:4, 1:7, 1:10, 1:12, 1:14, 1:16, 1:18, 1:22, 1:24, 1:26, 1:28, 1:29, 1:31, 1:36, 1:43, 1:46, 1:49, 1:50, 2:1, 2:2, 2:6, 2:10, 2:12, 2:14, 2:16, 2:17, 2:18, 2:21, 2:23, 2:25, 2:41, 2:43, 2:45, 3:2, 3:3, 3:5, 3:10, 3:13, 3:16, 3:19, 3:24, 3:25, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:8, 4:9, 4:10, 4:11, 4:14, 4:15, 4:16, 4:17, 4:18, 4:20, 4:22, 4:23, 4:26, 4:29, 4:30, 4:32, 5:2, 5:4, 5:10, 5:13, 5:15, 5:16, 5:17, 6:2, 6:4, 6:9, 6:10, 6:11, 6:13, 6:14, 6:17, 6:18, 6:19, 6:23, 6:25, 6:26, 6:28, 6:30, 6:31, 6:33, 6:35, 6:36, 6:37, 7:1, 7:3, 7:4, 7:5, 7:10, 7:11, 7:13, 7:19, 7:22, 7:27, 7:28, 7:33, 7:34, 7:37, 7:43, 7:44, 7:46, 7:47, 8:2, 8:3, 8:7, 8:10, 8:11, 8:12, 8:13, 8:14, 8:17, 8:19, 8:26, 8:40, 8:41, 8:45, 8:49, 8:51, 8:55, 8:57, 8:60, 8:62, 9:1, 9:2, 9:10, 9:12, 9:14, 9:17, 9:18, 9:23, 9:26, 9:27, 9:28, 10:3, 10:4, 10:6, 10:8, 10:14, 10:16, 10:18, 10:20, 10:23, 10:24, 10:27, 10:28, 11:3, 11:5, 11:6, 11:8, 11:12, 11:14, 11:15, 11:16, 11:17, 11:23, 11:30, 11:35, 11:37, 11:39, 11:42, 12:1, 12:3, 12:5, 12:12, 12:13, 12:17, 12:19, 12:22, 12:25, 12:26, 12:29, 12:30, 12:31, 13:7, 13:10, 13:13, 13:15, 13:16, 13:19, 13:20, 13:23, 13:27, 13:30, 13:34, 14:1, 14:3, 14:12, 14:16, 14:17, 14:23, 14:25, 14:28, 14:30, 15:1, 15:2, 15:6, 15:8, 15:9, 15:10, 15:11, 15:12, 15:14, 15:16, 15:21, 15:28, 15:32, 15:34, 16:1, 16:6, 16:10, 16:17, 16:25, 16:28, 16:30, 16:32, 17:2, 17:3, 17:4, 17:5, 17:6, 17:7, 17:8, 17:9, 17:11, 17:15, 17:22, 17:24, 18:2, 18:3, 18:8, 18:9, 18:11, 18:14, 18:15, 18:16, 18:17, 18:20, 18:22, 18:28, 18:35, 18:39, 18:41, 18:46, 19:1, 19:5, 19:8, 19:12, 20:2, 20:3, 20:4, 20:8, 20:11, 20:18, 20:19, 20:21, 20:24, 20:26, 20:37, 20:38, 20:41, 20:43, 21:1, 21:3, 21:5, 21:9, 21:12, 21:14, 21:17, 21:23, 21:25, 21:28, 22:1, 22:2, 22:5, 22:7, 22:9, 22:14, 22:18, 22:21, 22:25, 22:26, 22:28, 22:29, 22:33, 22:36, 22:37, 22:40, 22:41, 22:44, 22:46, 22:47, 22:48,22:53</p>
</div>
<div class="section" id="id2">
<h2>2Kings</h2>
<p>1:1, 1:5, 1:7, 1:18, 2:1, 2:13, 2:18, 2:20, 2:22, 2:25, 3:3, 3:5, 3:6, 3:8, 3:10, 3:15, 3:16, 3:18, 4:3, 4:5, 4:9, 4:11, 4:12, 4:14, 4:15, 4:17, 4:18, 4:19, 4:20, 4:21, 4:23, 4:28, 4:32, 4:33, 4:37, 4:44, 5:3, 5:4, 5:9, 5:16, 5:19, 6:1, 6:2, 6:3, 6:4, 6:5, 6:7, 6:13, 6:14, 6:16, 6:21, 6:24, 6:26, 6:27, 6:31, 7:11, 7:14, 7:20, 8:7, 8:11, 8:17, 8:20, 8:22, 8:25, 8:28, 9:4, 9:8, 9:9, 9:10, 9:23, 9:28, 9:29, 9:30, 9:31, 9:32, 9:34, 9:35, 10:3, 10:4, 10:12, 10:16, 10:18, 10:20, 10:26, 10:27, 10:28, 10:32, 10:35, 10:36, 11:1, 11:3, 11:6, 11:10, 11:13, 11:16, 11:21, 12:2, 12:3, 12:5, 12:6, 12:8, 12:14, 12:20, 13:9, 13:13, 13:15, 13:16, 13:20, 13:22, 13:24, 14:1, 14:4, 14:5, 14:12, 14:17, 14:18, 14:20, 14:21, 14:22, 14:29, 15:1, 15:3, 15:4, 15:8, 15:10, 15:11, 15:22, 15:32, 15:34, 15:37, 16:1, 16:4, 16:12, 16:16, 16:19, 17:2, 17:3, 17:5, 17:10, 17:12, 17:14, 17:18, 17:19, 17:22, 17:30, 17:38, 17:39, 17:40, 18:1, 18:3, 18:6, 18:8, 18:15, 18:20, 18:29, 18:33, 18:36, 19:5, 19:8, 19:17, 19:24, 19:27, 19:30, 19:31, 19:33, 19:34, 19:36, 20:2, 20:4, 20:7, 20:10, 20:16, 20:21, 21:4, 21:5, 21:10, 21:20, 21:21, 21:22, 21:23, 21:25, 21:26, 22:7, 22:10, 22:11, 22:15, 23:1, 23:14, 23:23, 23:32, 23:37, 24:4, 24:6, 24:9, 24:10, 24:11, 24:17, 24:19, 25:2, 25:3, 25:6, 25:9, 25:10, 25:12, 25:20, 25:28, 25:29,25:30</p>
</div>
<div class="section" id="chronicles">
<h2>1Chronicles</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:10, 1:11, 1:12, 1:13, 1:14, 1:15, 1:16, 1:17, 1:18, 1:20, 1:21, 1:22, 1:23, 1:24, 1:25, 1:26, 1:27, 1:28, 1:29, 1:30, 1:31, 1:33, 1:34, 1:35, 1:36, 1:37, 1:38, 1:39, 1:40, 1:41, 1:42, 1:44, 1:45, 1:47, 1:48, 1:49, 1:51, 1:52, 1:53, 1:54, 2:1, 2:2, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:10, 2:11, 2:12, 2:13, 2:14, 2:15, 2:16, 2:17, 2:19, 2:20, 2:22, 2:25, 2:26, 2:27, 2:28, 2:29, 2:30, 2:31, 2:32, 2:33, 2:34, 2:35, 2:36, 2:37, 2:38, 2:39, 2:40, 2:41, 2:42, 2:43, 2:44, 2:45, 2:46, 2:47, 2:48, 2:50, 2:51, 2:52, 2:54, 3:3, 3:5, 3:6, 3:7, 3:8, 3:9, 3:10, 3:11, 3:12, 3:13, 3:14, 3:15, 3:16, 3:17, 3:18, 3:20, 3:21, 3:22, 3:23, 3:24, 4:1, 4:2, 4:3, 4:5, 4:6, 4:7, 4:8, 4:9, 4:11, 4:12, 4:13, 4:14, 4:15, 4:16, 4:18, 4:19, 4:20, 4:23, 4:24, 4:25, 4:26, 4:28, 4:29, 4:30, 4:31, 4:32, 4:34, 4:35, 4:36, 4:37, 4:38, 4:39, 4:43, 5:2, 5:3, 5:4, 5:5, 5:6, 5:7, 5:8, 5:11, 5:12, 5:13, 5:15, 5:16, 5:19, 5:21, 5:22, 6:1, 6:2, 6:3, 6:4, 6:5, 6:6, 6:7, 6:8, 6:9, 6:10, 6:11, 6:12, 6:13, 6:14, 6:15, 6:16, 6:17, 6:18, 6:19, 6:20, 6:21, 6:22, 6:23, 6:24, 6:25, 6:26, 6:27, 6:28, 6:29, 6:30, 6:31, 6:34, 6:35, 6:36, 6:37, 6:38, 6:39, 6:40, 6:41, 6:42, 6:43, 6:44, 6:45, 6:46, 6:47, 6:48, 6:50, 6:51, 6:52, 6:53, 6:55, 6:56, 6:58, 6:59, 6:63, 6:64, 6:65, 6:66, 6:68, 6:69, 6:72, 6:73, 6:74, 6:75, 6:79, 6:80, 6:81, 7:1, 7:5, 7:6, 7:10, 7:12, 7:13, 7:14, 7:17, 7:18, 7:19, 7:20, 7:22, 7:24, 7:25, 7:26, 7:27, 7:30, 7:31, 7:32, 7:33, 7:34, 7:35, 7:36, 7:37, 7:38, 7:39, 8:1, 8:2, 8:3, 8:4, 8:5, 8:7, 8:8, 8:9, 8:10, 8:11, 8:12, 8:14, 8:15, 8:16, 8:17, 8:18, 8:19, 8:20, 8:21, 8:22, 8:23, 8:24, 8:25, 8:26, 8:27, 8:28, 8:29, 8:30, 8:31, 8:32, 8:33, 8:34, 8:35, 8:36, 8:37, 8:39, 9:3, 9:4, 9:5, 9:6, 9:7, 9:10, 9:14, 9:15, 9:17, 9:18, 9:20, 9:21, 9:23, 9:24, 9:25, 9:30, 9:31, 9:32, 9:34, 9:35, 9:36, 9:37, 9:38, 9:39, 9:40, 9:41, 9:42, 9:43, 10:3, 10:5, 10:6, 10:8, 10:10, 10:11, 11:1, 11:4, 11:7, 11:8, 11:9, 11:12, 11:16, 11:21, 11:24, 11:25, 11:26, 11:27, 11:28, 11:29, 11:30, 11:31, 11:32, 11:33, 11:34, 11:35, 11:36, 11:37, 11:38, 11:39, 11:40, 11:41, 11:42, 11:43, 11:44, 11:45, 11:46, 11:47, 12:5, 12:6, 12:7, 12:9, 12:10, 12:11, 12:12, 12:13, 12:14, 12:16, 12:21, 12:22, 12:24, 12:25, 12:26, 12:27, 12:28, 12:30, 12:31, 12:34, 12:35, 12:36, 12:39, 13:1, 13:3, 13:4, 13:5, 13:7, 13:11, 13:12, 13:13, 14:1, 14:3, 14:4, 14:5, 14:6, 14:7, 14:9, 14:12, 14:13, 14:16, 14:17, 15:3, 15:4, 15:5, 15:6, 15:7, 15:8, 15:9, 15:10, 15:14, 15:19, 15:20, 15:21, 15:22, 15:23, 16:3, 16:6, 16:7, 16:8, 16:9, 16:10, 16:11, 16:12, 16:13, 16:14, 16:15, 16:16, 16:17, 16:18, 16:19, 16:20, 16:21, 16:22, 16:23, 16:24, 16:25, 16:26, 16:27, 16:28, 16:30, 16:31, 16:32, 16:33, 16:34, 16:43, 17:2, 17:3, 17:4, 17:12, 17:14, 17:15, 17:18, 17:20, 17:22, 17:26, 18:2, 18:3, 18:5, 18:7, 18:9, 18:12, 18:14, 18:15, 18:16, 19:1, 19:8, 19:11, 19:14, 20:7, 20:8, 21:1, 21:4, 21:6, 21:7, 21:9, 21:10, 21:11, 21:14, 21:19, 21:20, 21:25, 21:27, 21:30, 22:1, 22:4, 22:6, 22:7, 22:16, 22:17, 23:1, 23:2, 23:3, 23:5, 23:6, 23:7, 23:8, 23:9, 23:10, 23:12, 23:14, 23:15, 23:16, 23:17, 23:18, 23:19, 23:20, 23:21, 23:22, 23:23, 23:25, 23:26, 23:27, 23:30, 24:1, 24:2, 24:7, 24:8, 24:9, 24:10, 24:11, 24:12, 24:13, 24:14, 24:15, 24:16, 24:17, 24:18, 24:20, 24:21, 24:22, 24:23, 24:24, 24:25, 24:26, 24:27, 24:28, 24:29, 24:30, 25:7, 25:8, 25:9, 25:10, 25:11, 25:12, 25:13, 25:14, 25:15, 25:16, 25:17, 25:18, 25:19, 25:20, 25:21, 25:22, 25:23, 25:24, 25:25, 25:26, 25:27, 25:28, 25:29, 25:30, 25:31, 26:1, 26:2, 26:3, 26:5, 26:6, 26:7, 26:9, 26:11, 26:13, 26:15, 26:18, 26:19, 26:20, 26:22, 26:23, 26:24, 26:27, 26:29, 27:2, 27:3, 27:4, 27:8, 27:9, 27:10, 27:11, 27:12, 27:13, 27:14, 27:15, 27:17, 27:18, 27:19, 27:20, 27:21, 27:22, 27:26, 27:28, 27:31, 27:33, 27:34, 28:3, 28:7, 28:10, 28:14, 28:16, 28:19, 29:4, 29:13, 29:21, 29:22, 29:24, 29:26,29:28</p>
</div>
<div class="section" id="id3">
<h2>2Chronicles</h2>
<p>1:7, 1:8, 1:16, 2:1, 2:2, 2:5, 2:9, 2:13, 2:15, 3:2, 3:5, 3:6, 3:9, 3:10, 3:13, 3:14, 3:15, 4:1, 4:9, 4:10, 4:14, 4:15, 4:17, 4:18, 4:20, 4:21, 5:3, 5:4, 5:14, 6:1, 6:2, 6:3, 6:6, 6:7, 6:11, 6:12, 6:17, 6:31, 6:35, 6:40, 6:42, 7:2, 7:4, 7:15, 8:1, 8:2, 8:3, 8:4, 8:5, 8:10, 8:12, 8:17, 9:2, 9:3, 9:5, 9:7, 9:13, 9:15, 9:17, 9:22, 9:23, 9:26, 9:28, 9:30, 10:1, 10:3, 10:5, 10:12, 10:13, 10:17, 10:19, 11:2, 11:3, 11:5, 11:6, 11:7, 11:8, 11:9, 11:10, 11:11, 11:12, 11:13, 11:15, 11:19, 11:20, 11:22, 12:1, 12:4, 12:6, 12:14, 12:16, 13:1, 13:6, 13:16, 13:17, 13:20, 13:21, 13:22, 14:2, 14:3, 14:4, 14:5, 14:6, 14:9, 14:10, 14:12, 15:1, 15:3, 15:4, 15:7, 15:10, 15:11, 15:14, 15:17, 15:19, 16:5, 16:11, 16:13, 17:1, 17:3, 17:4, 17:6, 17:12, 17:13, 17:15, 17:16, 17:17, 17:18, 18:1, 18:4, 18:6, 18:8, 18:13, 18:24, 18:27, 18:28, 18:32, 19:1, 19:5, 19:9, 20:1, 20:3, 20:4, 20:5, 20:8, 20:11, 20:13, 20:28, 20:30, 20:32, 20:33, 20:35, 20:36, 21:5, 21:8, 21:14, 21:16, 21:18, 22:3, 22:12, 23:16, 23:21, 24:2, 24:3, 24:4, 24:8, 24:15, 24:17, 25:2, 25:3, 25:6, 25:11, 25:22, 25:28, 26:1, 26:2, 26:4, 26:7, 26:8, 26:12, 26:13, 26:14, 26:17, 26:22, 27:3, 27:4, 27:6, 27:8, 27:9, 28:2, 28:4, 28:14, 28:16, 28:17, 28:20, 28:22, 29:2, 29:3, 29:4, 29:13, 29:14, 29:20, 29:23, 29:26, 29:29, 29:33, 29:36, 30:4, 30:11, 30:20, 31:7, 31:8, 31:9, 31:11, 31:20, 32:2, 32:10, 32:16, 32:20, 32:28, 33:1, 33:4, 33:5, 33:10, 33:17, 33:20, 33:21, 33:24, 34:1, 34:5, 34:6, 34:19, 34:23, 34:29, 35:2, 35:17, 35:19, 35:23, 35:26, 35:27, 36:1, 36:2, 36:6,36:11</p>
</div>
<div class="section" id="ezra">
<h2>Ezra</h2>
<p>1:9, 1:10, 2:3, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:10, 2:11, 2:12, 2:13, 2:14, 2:15, 2:16, 2:17, 2:18, 2:19, 2:20, 2:21, 2:22, 2:23, 2:24, 2:25, 2:26, 2:27, 2:28, 2:29, 2:30, 2:31, 2:32, 2:33, 2:34, 2:35, 2:36, 2:37, 2:38, 2:39, 2:40, 2:41, 2:43, 2:44, 2:45, 2:46, 2:47, 2:48, 2:49, 2:50, 2:51, 2:52, 2:53, 2:54, 2:55, 2:56, 2:57, 2:58, 2:60, 2:64, 2:65, 2:66, 2:67, 3:1, 4:4, 4:8, 4:18, 4:21, 4:22, 5:4, 5:7, 5:9, 5:10, 5:13, 6:2, 6:4, 6:10, 6:15, 6:19, 7:1, 7:2, 7:3, 7:4, 7:5, 7:8, 7:10, 7:12, 7:19, 7:22, 8:2, 8:3, 8:4, 8:5, 8:6, 8:7, 8:8, 8:9, 8:10, 8:11, 8:12, 8:13, 8:14, 8:19, 8:23, 8:24, 8:26, 8:27, 8:32, 8:34, 9:3, 9:10, 10:4, 10:7, 10:12, 10:17, 10:19, 10:20, 10:21, 10:22, 10:23, 10:24, 10:25, 10:26, 10:27, 10:28, 10:29, 10:30, 10:31, 10:32, 10:33, 10:34, 10:35, 10:36, 10:37, 10:38, 10:39, 10:40, 10:41, 10:42, 10:43,10:44</p>
</div>
<div class="section" id="nehemiah">
<h2>Nehemiah</h2>
<p>1:10, 2:4, 2:11, 2:14, 3:2, 3:3, 3:5, 3:9, 3:11, 3:12, 3:18, 3:22, 3:24, 3:26, 3:27, 3:28, 3:32, 4:1, 4:6, 4:8, 4:9, 4:11, 4:12, 4:18, 4:20, 4:21, 5:1, 5:4, 5:6, 5:10, 5:16, 5:19, 6:4, 6:5, 6:8, 6:11, 6:15, 6:17, 6:19, 7:4, 7:8, 7:9, 7:10, 7:11, 7:12, 7:13, 7:14, 7:15, 7:16, 7:17, 7:18, 7:19, 7:20, 7:21, 7:22, 7:23, 7:24, 7:25, 7:26, 7:27, 7:28, 7:29, 7:30, 7:31, 7:32, 7:33, 7:34, 7:35, 7:36, 7:37, 7:38, 7:39, 7:40, 7:41, 7:42, 7:43, 7:44, 7:46, 7:47, 7:48, 7:49, 7:50, 7:51, 7:52, 7:53, 7:54, 7:55, 7:56, 7:57, 7:58, 7:59, 7:60, 7:62, 7:66, 7:67, 7:68, 7:69, 7:71, 7:72, 8:8, 8:11, 9:7, 9:9, 9:14, 9:16, 9:33, 10:1, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:12, 10:13, 10:14, 10:15, 10:16, 10:17, 10:18, 10:19, 10:20, 10:21, 10:22, 10:23, 10:24, 10:25, 10:26, 10:27, 10:30, 10:32, 11:2, 11:6, 11:8, 11:9, 11:10, 11:11, 11:14, 11:15, 11:16, 11:18, 11:19, 11:20, 11:21, 11:23, 11:26, 11:27, 11:28, 11:29, 11:31, 11:32, 11:33, 11:34, 11:35, 11:36, 12:1, 12:2, 12:3, 12:4, 12:5, 12:6, 12:7, 12:9, 12:10, 12:11, 12:12, 12:13, 12:14, 12:15, 12:16, 12:17, 12:18, 12:19, 12:20, 12:21, 12:30, 12:32, 12:33, 12:34, 12:40, 12:41, 13:3, 13:8, 13:12, 13:20, 13:23, 13:27, 13:29, 13:30,13:31</p>
</div>
<div class="section" id="esther">
<h2>Esther</h2>
<p>1:1, 1:2, 1:4, 1:9, 1:21, 2:2, 2:4, 2:5, 2:10, 2:11, 2:19, 2:22, 3:3, 3:5, 3:10, 3:11, 4:2, 4:6, 4:9, 4:10, 4:12, 4:15, 4:17, 5:4, 5:7, 5:10, 5:13, 6:5, 6:7, 6:12, 7:1, 7:5, 7:6, 8:4, 8:6, 8:16, 9:5, 9:6, 9:7, 9:8, 9:9, 9:10, 9:11, 9:14, 9:21, 9:23, 9:30, 9:32,10:1</p>
</div>
<div class="section" id="job">
<h2>Job</h2>
<p>1:2, 1:6, 1:9, 1:11, 1:13, 1:14, 1:20, 1:22, 2:4, 2:5, 2:6, 2:8, 2:9, 3:1, 3:2, 3:3, 3:4, 3:5, 3:7, 3:8, 3:9, 3:10, 3:11, 3:12, 3:13, 3:14, 3:15, 3:16, 3:17, 3:18, 3:19, 3:20, 3:21, 3:22, 3:23, 3:24, 3:25, 3:26, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 4:9, 4:10, 4:11, 4:12, 4:13, 4:14, 4:15, 4:16, 4:17, 4:18, 4:19, 4:20, 4:21, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:7, 5:8, 5:9, 5:10, 5:11, 5:12, 5:13, 5:14, 5:15, 5:16, 5:17, 5:18, 5:19, 5:20, 5:21, 5:22, 5:23, 5:24, 5:25, 5:26, 5:27, 6:1, 6:2, 6:3, 6:4, 6:5, 6:6, 6:7, 6:8, 6:9, 6:10, 6:11, 6:12, 6:13, 6:14, 6:15, 6:16, 6:17, 6:18, 6:19, 6:20, 6:21, 6:22, 6:23, 6:24, 6:25, 6:26, 6:27, 6:28, 6:29, 6:30, 7:1, 7:2, 7:3, 7:4, 7:5, 7:6, 7:7, 7:8, 7:9, 7:10, 7:11, 7:12, 7:13, 7:14, 7:15, 7:16, 7:17, 7:18, 7:19, 7:20, 8:1, 8:2, 8:3, 8:4, 8:5, 8:6, 8:7, 8:8, 8:9, 8:10, 8:11, 8:12, 8:13, 8:14, 8:15, 8:16, 8:17, 8:18, 8:19, 8:20, 8:21, 8:22, 9:1, 9:2, 9:3, 9:4, 9:5, 9:6, 9:7, 9:8, 9:9, 9:10, 9:11, 9:12, 9:13, 9:14, 9:15, 9:16, 9:17, 9:18, 9:19, 9:20, 9:21, 9:22, 9:23, 9:24, 9:25, 9:26, 9:27, 9:28, 9:29, 9:30, 9:31, 9:32, 9:33, 9:34, 9:35, 10:1, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:12, 10:13, 10:14, 10:16, 10:17, 10:18, 10:19, 10:20, 10:21, 10:22, 11:1, 11:2, 11:3, 11:4, 11:5, 11:7, 11:8, 11:9, 11:10, 11:11, 11:12, 11:13, 11:14, 11:15, 11:16, 11:17, 11:18, 11:19, 11:20, 12:1, 12:2, 12:3, 12:4, 12:5, 12:6, 12:7, 12:8, 12:9, 12:10, 12:11, 12:12, 12:13, 12:14, 12:15, 12:16, 12:17, 12:18, 12:19, 12:20, 12:21, 12:22, 12:23, 12:24, 12:25, 13:1, 13:2, 13:3, 13:4, 13:5, 13:6, 13:7, 13:8, 13:9, 13:10, 13:11, 13:12, 13:13, 13:14, 13:15, 13:16, 13:17, 13:18, 13:19, 13:20, 13:21, 13:22, 13:23, 13:24, 13:25, 13:26, 13:27, 13:28, 14:1, 14:2, 14:3, 14:4, 14:5, 14:6, 14:7, 14:8, 14:9, 14:10, 14:11, 14:12, 14:14, 14:15, 14:16, 14:17, 14:18, 14:19, 14:20, 14:21, 14:22, 15:1, 15:2, 15:3, 15:4, 15:5, 15:6, 15:7, 15:8, 15:9, 15:10, 15:11, 15:12, 15:13, 15:14, 15:15, 15:16, 15:17, 15:18, 15:19, 15:20, 15:21, 15:22, 15:23, 15:24, 15:25, 15:26, 15:27, 15:28, 15:29, 15:30, 15:31, 15:32, 15:33, 15:34, 15:35, 16:1, 16:2, 16:3, 16:4, 16:5, 16:6, 16:7, 16:8, 16:9, 16:10, 16:11, 16:12, 16:13, 16:14, 16:15, 16:16, 16:17, 16:18, 16:19, 16:20, 16:21, 16:22, 17:1, 17:2, 17:3, 17:4, 17:5, 17:6, 17:7, 17:8, 17:9, 17:10, 17:11, 17:12, 17:13, 17:14, 17:15, 17:16, 18:1, 18:2, 18:3, 18:4, 18:5, 18:6, 18:7, 18:8, 18:9, 18:10, 18:11, 18:12, 18:13, 18:14, 18:15, 18:16, 18:17, 18:18, 18:19, 18:20, 18:21, 19:1, 19:2, 19:3, 19:4, 19:5, 19:6, 19:7, 19:8, 19:9, 19:10, 19:11, 19:12, 19:13, 19:14, 19:15, 19:16, 19:17, 19:18, 19:19, 19:20, 19:21, 19:22, 19:23, 19:24, 19:25, 19:26, 19:27, 19:28, 19:29, 20:1, 20:2, 20:3, 20:4, 20:5, 20:6, 20:7, 20:8, 20:9, 20:10, 20:11, 20:12, 20:13, 20:14, 20:15, 20:16, 20:17, 20:18, 20:19, 20:20, 20:21, 20:22, 20:23, 20:24, 20:25, 20:26, 20:27, 20:28, 20:29, 21:1, 21:2, 21:3, 21:4, 21:5, 21:6, 21:7, 21:8, 21:9, 21:10, 21:11, 21:12, 21:13, 21:14, 21:15, 21:16, 21:18, 21:19, 21:20, 21:21, 21:22, 21:23, 21:24, 21:25, 21:26, 21:27, 21:28, 21:29, 21:30, 21:31, 21:32, 21:33, 21:34, 22:1, 22:2, 22:3, 22:4, 22:5, 22:6, 22:7, 22:8, 22:9, 22:10, 22:11, 22:12, 22:13, 22:14, 22:15, 22:16, 22:17, 22:18, 22:19, 22:20, 22:21, 22:22, 22:23, 22:24, 22:25, 22:26, 22:27, 22:28, 22:29, 22:30, 23:1, 23:2, 23:3, 23:4, 23:5, 23:6, 23:7, 23:8, 23:9, 23:10, 23:11, 23:12, 23:13, 23:14, 23:15, 23:16, 23:17, 24:1, 24:2, 24:3, 24:4, 24:6, 24:7, 24:8, 24:9, 24:10, 24:11, 24:12, 24:13, 24:14, 24:15, 24:16, 24:17, 24:19, 24:20, 24:21, 24:22, 24:23, 24:25, 25:1, 25:2, 25:3, 25:4, 25:5, 25:6, 26:1, 26:2, 26:3, 26:4, 26:5, 26:6, 26:7, 26:8, 26:9, 26:10, 26:11, 26:12, 26:13, 27:1, 27:2, 27:3, 27:4, 27:5, 27:6, 27:7, 27:8, 27:9, 27:10, 27:11, 27:12, 27:13, 27:14, 27:15, 27:16, 27:17, 27:18, 27:19, 27:20, 27:21, 27:22, 27:23, 28:1, 28:2, 28:3, 28:5, 28:6, 28:7, 28:8, 28:9, 28:10, 28:11, 28:12, 28:13, 28:14, 28:15, 28:16, 28:17, 28:18, 28:19, 28:20, 28:21, 28:22, 28:23, 28:24, 28:25, 28:26, 28:27, 28:28, 29:1, 29:2, 29:3, 29:4, 29:5, 29:6, 29:7, 29:8, 29:9, 29:10, 29:11, 29:12, 29:13, 29:14, 29:15, 29:16, 29:17, 29:18, 29:19, 29:20, 29:21, 29:22, 29:23, 29:24, 29:25, 30:1, 30:2, 30:3, 30:4, 30:5, 30:6, 30:7, 30:8, 30:9, 30:10, 30:11, 30:12, 30:13, 30:14, 30:15, 30:16, 30:17, 30:18, 30:19, 30:20, 30:21, 30:22, 30:23, 30:24, 30:25, 30:26, 30:27, 30:28, 30:29, 30:30, 30:31, 31:1, 31:2, 31:3, 31:4, 31:5, 31:6, 31:7, 31:8, 31:9, 31:10, 31:11, 31:12, 31:13, 31:14, 31:15, 31:16, 31:17, 31:18, 31:19, 31:20, 31:21, 31:22, 31:23, 31:24, 31:25, 31:26, 31:27, 31:28, 31:29, 31:30, 31:31, 31:32, 31:33, 31:36, 31:37, 31:38, 31:39, 31:40, 32:1, 32:4, 32:5, 32:7, 32:8, 32:9, 32:10, 32:11, 32:12, 32:13, 32:14, 32:15, 32:16, 32:17, 32:18, 32:19, 32:20, 32:21, 32:22, 33:1, 33:2, 33:3, 33:4, 33:5, 33:6, 33:7, 33:8, 33:9, 33:10, 33:11, 33:12, 33:13, 33:14, 33:15, 33:16, 33:17, 33:18, 33:19, 33:20, 33:21, 33:22, 33:23, 33:24, 33:25, 33:26, 33:27, 33:28, 33:29, 33:30, 33:31, 33:32, 33:33, 34:1, 34:2, 34:3, 34:4, 34:5, 34:6, 34:7, 34:8, 34:9, 34:11, 34:12, 34:13, 34:14, 34:15, 34:16, 34:17, 34:18, 34:19, 34:20, 34:21, 34:22, 34:23, 34:24, 34:25, 34:26, 34:27, 34:28, 34:29, 34:30, 34:31, 34:32, 34:33, 34:34, 34:35, 34:36, 34:37, 35:1, 35:2, 35:3, 35:4, 35:5, 35:6, 35:7, 35:8, 35:9, 35:10, 35:11, 35:12, 35:13, 35:14, 35:15, 35:16, 36:1, 36:2, 36:3, 36:4, 36:5, 36:6, 36:7, 36:8, 36:9, 36:10, 36:11, 36:12, 36:13, 36:14, 36:15, 36:17, 36:18, 36:19, 36:20, 36:21, 36:22, 36:23, 36:24, 36:25, 36:26, 36:27, 36:28, 36:29, 36:30, 36:31, 36:32, 36:33, 37:1, 37:2, 37:3, 37:4, 37:5, 37:6, 37:7, 37:8, 37:9, 37:10, 37:11, 37:12, 37:13, 37:14, 37:15, 37:16, 37:17, 37:18, 37:19, 37:20, 37:21, 37:22, 37:23, 37:24, 38:1, 38:2, 38:3, 38:4, 38:5, 38:6, 38:7, 38:8, 38:9, 38:10, 38:11, 38:12, 38:13, 38:14, 38:15, 38:16, 38:17, 38:18, 38:19, 38:20, 38:21, 38:22, 38:23, 38:24, 38:25, 38:26, 38:27, 38:28, 38:29, 38:30, 38:31, 38:32, 38:33, 38:34, 38:35, 38:36, 38:37, 38:38, 38:39, 38:40, 38:41, 39:1, 39:2, 39:3, 39:4, 39:5, 39:6, 39:7, 39:8, 39:9, 39:10, 39:11, 39:12, 39:13, 39:14, 39:15, 39:16, 39:17, 39:18, 39:19, 39:20, 39:21, 39:22, 39:23, 39:24, 39:25, 39:26, 39:27, 39:28, 39:29, 39:30, 40:1, 40:2, 40:3, 40:4, 40:5, 40:6, 40:7, 40:8, 40:9, 40:10, 40:11, 40:12, 40:13, 40:14, 40:15, 40:16, 40:17, 40:18, 40:19, 40:20, 40:21, 40:22, 40:23, 40:24, 41:1, 41:2, 41:3, 41:4, 41:5, 41:6, 41:7, 41:8, 41:9, 41:10, 41:11, 41:12, 41:13, 41:14, 41:15, 41:16, 41:17, 41:18, 41:19, 41:20, 41:21, 41:22, 41:23, 41:24, 41:25, 41:26, 41:27, 41:28, 41:29, 41:30, 41:31, 41:32, 41:33, 41:34, 42:1, 42:2, 42:4, 42:5, 42:6, 42:13, 42:16,42:17</p>
</div>
<div class="section" id="psalms">
<h2>Psalms</h2>
<p>1:2, 1:4, 1:5, 1:6, 2:1, 2:2, 2:3, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:10, 2:11, 3:1, 3:2, 3:3, 3:4, 3:5, 3:6, 3:7, 3:8, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:8, 5:12, 6:1, 6:2, 6:3, 6:4, 6:5, 6:6, 6:7, 6:8, 6:9, 6:10, 7:1, 7:2, 7:3, 7:4, 7:5, 7:6, 7:7, 7:8, 7:10, 7:11, 7:12, 7:13, 7:14, 7:15, 7:16, 7:17, 8:1, 8:2, 8:3, 8:4, 8:5, 8:6, 8:7, 8:8, 8:9, 9:1, 9:2, 9:3, 9:4, 9:5, 9:6, 9:7, 9:8, 9:9, 9:10, 9:11, 9:12, 9:13, 9:14, 9:15, 9:17, 9:18, 9:19, 9:20, 10:1, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:10, 10:11, 10:12, 10:13, 10:15, 10:16, 10:17, 10:18, 11:1, 11:2, 11:3, 11:4, 11:5, 11:6, 11:7, 12:1, 12:2, 12:3, 12:4, 12:6, 12:7, 12:8, 13:1, 13:2, 13:3, 13:4, 13:5, 13:6, 14:1, 14:2, 14:3, 14:4, 14:5, 14:6, 15:1, 15:2, 15:3, 16:1, 16:2, 16:3, 16:5, 16:6, 16:7, 16:8, 16:9, 16:10, 17:1, 17:2, 17:4, 17:5, 17:6, 17:7, 17:8, 17:9, 17:10, 17:11, 17:12, 17:13, 17:15, 18:1, 18:3, 18:4, 18:5, 18:7, 18:8, 18:9, 18:10, 18:11, 18:12, 18:13, 18:14, 18:16, 18:17, 18:18, 18:19, 18:20, 18:21, 18:22, 18:23, 18:24, 18:25, 18:26, 18:27, 18:28, 18:29, 18:30, 18:31, 18:32, 18:33, 18:34, 18:35, 18:36, 18:37, 18:38, 18:39, 18:40, 18:41, 18:42, 18:43, 18:44, 18:45, 18:46, 18:47, 18:49, 18:50, 19:1, 19:2, 19:3, 19:5, 19:6, 19:7, 19:8, 19:9, 19:10, 19:11, 19:12, 19:14, 20:1, 20:2, 20:3, 20:4, 20:6, 20:7, 20:8, 20:9, 21:1, 21:2, 21:3, 21:4, 21:5, 21:6, 21:7, 21:8, 21:9, 21:10, 21:11, 21:12, 21:13, 22:1, 22:2, 22:3, 22:4, 22:5, 22:6, 22:7, 22:8, 22:9, 22:10, 22:11, 22:12, 22:13, 22:14, 22:15, 22:16, 22:17, 22:18, 22:19, 22:20, 22:21, 22:22, 22:25, 22:26, 22:27, 22:28, 22:30, 22:31, 23:1, 23:2, 23:3, 23:5, 23:6, 24:1, 24:2, 24:3, 24:4, 24:5, 24:6, 24:7, 24:8, 24:9, 24:10, 25:1, 25:2, 25:3, 25:4, 25:5, 25:6, 25:8, 25:9, 25:10, 25:11, 25:12, 25:13, 25:14, 25:15, 25:16, 25:17, 25:18, 25:19, 25:20, 25:21, 25:22, 26:1, 26:2, 26:3, 26:4, 26:5, 26:6, 26:7, 26:8, 26:9, 26:10, 26:11, 26:12, 27:1, 27:2, 27:3, 27:7, 27:8, 27:10, 27:11, 27:12, 27:13, 27:14, 28:1, 28:2, 28:5, 28:6, 28:8, 28:9, 29:1, 29:2, 29:3, 29:4, 29:5, 29:6, 29:7, 29:8, 29:9, 29:10, 29:11, 30:1, 30:2, 30:3, 30:4, 30:6, 30:7, 30:8, 30:9, 30:10, 30:11, 30:12, 31:1, 31:2, 31:3, 31:4, 31:5, 31:6, 31:8, 31:9, 31:12, 31:13, 31:14, 31:15, 31:16, 31:17, 31:18, 31:20, 31:21, 31:23, 31:24, 32:1, 32:2, 32:3, 32:4, 32:7, 32:8, 32:9, 32:10, 32:11, 33:1, 33:2, 33:3, 33:4, 33:5, 33:6, 33:7, 33:8, 33:9, 33:10, 33:11, 33:12, 33:13, 33:14, 33:15, 33:16, 33:17, 33:18, 33:19, 33:20, 33:21, 33:22, 34:1, 34:2, 34:3, 34:4, 34:5, 34:6, 34:7, 34:8, 34:9, 34:10, 34:11, 34:12, 34:13, 34:14, 34:15, 34:16, 34:17, 34:18, 34:19, 34:20, 34:21, 34:22, 35:1, 35:2, 35:3, 35:5, 35:6, 35:7, 35:9, 35:11, 35:12, 35:13, 35:14, 35:16, 35:17, 35:18, 35:19, 35:20, 35:21, 35:22, 35:23, 35:24, 35:25, 35:28, 36:1, 36:2, 36:3, 36:4, 36:5, 36:6, 36:7, 36:8, 36:9, 36:10, 36:11, 36:12, 37:1, 37:2, 37:3, 37:4, 37:5, 37:6, 37:8, 37:9, 37:10, 37:11, 37:12, 37:13, 37:14, 37:15, 37:16, 37:17, 37:18, 37:19, 37:21, 37:22, 37:23, 37:24, 37:25, 37:26, 37:27, 37:29, 37:30, 37:31, 37:32, 37:33, 37:34, 37:35, 37:36, 37:37, 37:38, 37:39, 37:40, 38:1, 38:2, 38:3, 38:4, 38:5, 38:6, 38:7, 38:8, 38:9, 38:10, 38:11, 38:12, 38:13, 38:14, 38:15, 38:16, 38:17, 38:18, 38:19, 38:20, 38:21, 38:22, 39:2, 39:3, 39:4, 39:7, 39:8, 39:9, 39:10, 39:13, 40:1, 40:2, 40:3, 40:4, 40:7, 40:8, 40:13, 40:15, 40:16, 40:17, 41:1, 41:3, 41:4, 41:5, 41:6, 41:7, 41:8, 41:9, 41:10, 41:11, 41:12, 41:13, 42:1, 42:2, 42:3, 42:6, 42:7, 42:8, 42:9, 42:10, 43:1, 43:3, 43:4, 44:1, 44:2, 44:4, 44:5, 44:6, 44:7, 44:8, 44:9, 44:10, 44:11, 44:12, 44:13, 44:14, 44:15, 44:16, 44:17, 44:18, 44:19, 44:20, 44:21, 44:22, 44:23, 44:24, 44:25, 44:26, 45:1, 45:2, 45:3, 45:5, 45:6, 45:8, 45:9, 45:10, 45:11, 45:12, 45:13, 45:14, 45:15, 45:16, 45:17, 46:1, 46:2, 46:3, 46:4, 46:5, 46:6, 46:7, 46:8, 46:9, 46:10, 46:11, 47:1, 47:2, 47:3, 47:4, 47:5, 47:6, 47:7, 47:8, 48:1, 48:2, 48:3, 48:4, 48:5, 48:6, 48:7, 48:9, 48:10, 48:11, 48:12, 48:13, 48:14, 49:1, 49:2, 49:3, 49:4, 49:5, 49:6, 49:7, 49:8, 49:9, 49:10, 49:11, 49:12, 49:13, 49:15, 49:16, 49:17, 49:18, 49:19, 49:20, 50:1, 50:2, 50:3, 50:4, 50:5, 50:6, 50:7, 50:8, 50:9, 50:10, 50:11, 50:12, 50:13, 50:14, 50:15, 50:16, 50:17, 50:18, 50:19, 50:20, 50:22, 51:1, 51:2, 51:3, 51:5, 51:6, 51:7, 51:8, 51:9, 51:10, 51:11, 51:12, 51:13, 51:14, 51:15, 51:16, 51:17, 51:18, 52:1, 52:2, 52:3, 52:4, 52:6, 52:8, 52:9, 53:1, 53:2, 53:3, 53:4, 54:1, 54:2, 54:3, 54:4, 54:5, 54:6, 54:7, 55:1, 55:2, 55:4, 55:5, 55:6, 55:7, 55:8, 55:9, 55:10, 55:11, 55:13, 55:14, 55:15, 55:16, 55:17, 55:18, 55:19, 55:20, 55:21, 55:22, 56:1, 56:2, 56:3, 56:4, 56:5, 56:6, 56:7, 56:8, 56:9, 56:10, 56:11, 56:12, 56:13, 57:2, 57:5, 57:6, 57:7, 57:8, 57:9, 57:10, 57:11, 58:1, 58:2, 58:3, 58:4, 58:5, 58:6, 58:7, 58:8, 58:9, 58:10, 58:11, 59:1, 59:2, 59:3, 59:4, 59:6, 59:7, 59:8, 59:9, 59:10, 59:11, 59:14, 59:15, 59:17, 60:1, 60:2, 60:3, 60:4, 60:5, 60:6, 60:7, 60:8, 60:9, 60:10, 60:11, 60:12, 61:1, 61:2, 61:3, 61:4, 61:5, 61:6, 61:7, 61:8, 62:1, 62:2, 62:3, 62:5, 62:6, 62:7, 62:8, 62:10, 62:11, 62:12, 63:2, 63:3, 63:4, 63:5, 63:6, 63:7, 63:8, 63:9, 63:10, 63:11, 64:1, 64:2, 64:3, 64:4, 64:5, 64:6, 64:7, 64:8, 64:9, 64:10, 65:1, 65:2, 65:3, 65:6, 65:7, 65:10, 65:11, 65:12, 65:13, 66:1, 66:2, 66:3, 66:4, 66:5, 66:6, 66:7, 66:8, 66:9, 66:10, 66:11, 66:12, 66:13, 66:14, 66:16, 66:17, 66:18, 66:19, 66:20, 67:1, 67:2, 67:3, 67:4, 67:5, 67:6, 67:7, 68:1, 68:2, 68:3, 68:5, 68:6, 68:7, 68:8, 68:9, 68:10, 68:11, 68:12, 68:13, 68:14, 68:15, 68:17, 68:19, 68:20, 68:21, 68:22, 68:23, 68:24, 68:25, 68:26, 68:28, 68:29, 68:31, 68:32, 68:33, 68:34, 69:1, 69:2, 69:3, 69:5, 69:7, 69:8, 69:9, 69:10, 69:11, 69:12, 69:14, 69:15, 69:16, 69:17, 69:18, 69:19, 69:21, 69:22, 69:23, 69:24, 69:25, 69:26, 69:27, 69:28, 69:29, 69:30, 69:31, 69:32, 69:33, 69:34, 69:35, 69:36, 70:1, 70:2, 70:3, 70:4, 70:5, 71:1, 71:2, 71:4, 71:5, 71:6, 71:7, 71:8, 71:9, 71:10, 71:11, 71:12, 71:13, 71:14, 71:15, 71:16, 71:17, 71:19, 71:21, 71:23, 72:1, 72:2, 72:3, 72:4, 72:5, 72:6, 72:7, 72:8, 72:9, 72:10, 72:11, 72:12, 72:13, 72:14, 72:18, 72:19, 72:20, 73:1, 73:2, 73:3, 73:4, 73:5, 73:6, 73:7, 73:8, 73:9, 73:10, 73:11, 73:12, 73:13, 73:14, 73:15, 73:16, 73:17, 73:18, 73:19, 73:20, 73:21, 73:22, 73:23, 73:24, 73:25, 73:26, 73:27, 73:28, 74:1, 74:3, 74:4, 74:5, 74:6, 74:7, 74:8, 74:9, 74:10, 74:11, 74:12, 74:13, 74:14, 74:15, 74:16, 74:17, 74:18, 74:19, 74:20, 74:21, 74:22, 74:23, 75:1, 75:2, 75:3, 75:4, 75:5, 75:6, 75:7, 75:9, 75:10, 76:1, 76:2, 76:3, 76:4, 76:5, 76:6, 76:7, 76:8, 76:9, 76:10, 76:11, 76:12, 77:1, 77:3, 77:4, 77:5, 77:6, 77:7, 77:8, 77:9, 77:10, 77:11, 77:12, 77:13, 77:14, 77:15, 77:16, 77:17, 77:18, 77:19, 77:20, 78:1, 78:2, 78:3, 78:5, 78:6, 78:7, 78:9, 78:10, 78:11, 78:12, 78:13, 78:14, 78:15, 78:16, 78:17, 78:18, 78:19, 78:20, 78:21, 78:22, 78:23, 78:24, 78:25, 78:26, 78:27, 78:28, 78:29, 78:30, 78:31, 78:32, 78:33, 78:34, 78:35, 78:36, 78:37, 78:39, 78:40, 78:41, 78:42, 78:43, 78:44, 78:45, 78:46, 78:47, 78:48, 78:49, 78:50, 78:51, 78:52, 78:53, 78:54, 78:55, 78:56, 78:57, 78:58, 78:59, 78:60, 78:61, 78:62, 78:63, 78:64, 78:65, 78:66, 78:67, 78:68, 78:69, 78:70, 78:71, 78:72, 79:1, 79:3, 79:4, 79:5, 79:6, 79:7, 79:8, 79:9, 79:11, 79:12, 80:1, 80:2, 80:3, 80:4, 80:5, 80:6, 80:7, 80:8, 80:9, 80:10, 80:11, 80:12, 80:13, 80:14, 80:15, 80:16, 80:17, 80:18, 80:19, 81:1, 81:2, 81:3, 81:4, 81:5, 81:6, 81:8, 81:9, 81:10, 81:11, 81:12, 81:13, 81:14, 81:15, 81:16, 82:1, 82:2, 82:3, 82:4, 82:5, 82:6, 82:7, 82:8, 83:1, 83:2, 83:3, 83:4, 83:5, 83:6, 83:7, 83:8, 83:9, 83:10, 83:11, 83:12, 83:13, 83:14, 83:15, 83:16, 83:17, 83:18, 84:1, 84:2, 84:4, 84:5, 84:6, 84:7, 84:8, 84:9, 84:12, 85:1, 85:2, 85:3, 85:4, 85:5, 85:6, 85:7, 85:9, 85:10, 85:11, 85:12, 85:13, 86:1, 86:2, 86:3, 86:4, 86:5, 86:6, 86:7, 86:8, 86:9, 86:10, 86:11, 86:12, 86:13, 86:14, 86:15, 86:16, 87:1, 87:2, 87:3, 87:5, 87:6, 87:7, 88:1, 88:2, 88:3, 88:4, 88:6, 88:7, 88:8, 88:9, 88:10, 88:11, 88:12, 88:13, 88:14, 88:15, 88:16, 88:17, 88:18, 89:1, 89:2, 89:3, 89:4, 89:5, 89:6, 89:7, 89:8, 89:9, 89:10, 89:11, 89:12, 89:13, 89:14, 89:15, 89:16, 89:17, 89:18, 89:20, 89:21, 89:22, 89:23, 89:24, 89:25, 89:26, 89:27, 89:28, 89:29, 89:30, 89:31, 89:32, 89:33, 89:34, 89:35, 89:36, 89:37, 89:38, 89:39, 89:40, 89:41, 89:42, 89:43, 89:44, 89:45, 89:46, 89:47, 89:48, 89:49, 89:50, 89:51, 89:52, 90:1, 90:3, 90:4, 90:5, 90:6, 90:7, 90:8, 90:9, 90:11, 90:12, 90:13, 90:14, 90:15, 90:16, 91:1, 91:2, 91:3, 91:4, 91:5, 91:6, 91:7, 91:8, 91:9, 91:10, 91:11, 91:12, 91:13, 91:14, 91:15, 91:16, 92:1, 92:2, 92:3, 92:4, 92:5, 92:6, 92:7, 92:8, 92:9, 92:10, 92:11, 92:12, 92:13, 92:14, 92:15, 93:2, 93:3, 93:4, 93:5, 94:1, 94:2, 94:3, 94:4, 94:5, 94:6, 94:7, 94:8, 94:9, 94:10, 94:11, 94:12, 94:13, 94:14, 94:15, 94:16, 94:17, 94:18, 94:19, 94:20, 94:21, 94:22, 94:23, 95:1, 95:2, 95:3, 95:4, 95:5, 95:6, 95:7, 95:8, 95:9, 95:11, 96:1, 96:2, 96:3, 96:4, 96:5, 96:6, 96:7, 96:8, 96:9, 96:11, 96:12, 97:1, 97:2, 97:3, 97:4, 97:5, 97:6, 97:7, 97:8, 97:9, 97:10, 97:11, 97:12, 98:2, 98:4, 98:5, 98:6, 98:7, 98:8, 98:9, 99:1, 99:2, 99:3, 99:4, 99:5, 99:7, 99:8, 99:9, 100:1, 100:2, 100:3, 100:4, 100:5, 101:1, 101:2, 101:3, 101:4, 101:5, 101:7, 101:8, 102:1, 102:2, 102:3, 102:4, 102:5, 102:6, 102:7, 102:8, 102:9, 102:10, 102:11, 102:12, 102:13, 102:14, 102:15, 102:16, 102:17, 102:18, 102:19, 102:20, 102:21, 102:22, 102:23, 102:24, 102:25, 102:27, 102:28, 103:1, 103:2, 103:3, 103:4, 103:5, 103:6, 103:7, 103:8, 103:9, 103:10, 103:11, 103:12, 103:13, 103:14, 103:15, 103:16, 103:18, 103:19, 103:20, 103:21, 103:22, 104:1, 104:2, 104:3, 104:4, 104:5, 104:6, 104:7, 104:8, 104:9, 104:10, 104:11, 104:12, 104:13, 104:14, 104:15, 104:16, 104:17, 104:18, 104:19, 104:20, 104:21, 104:22, 104:23, 104:24, 104:25, 104:26, 104:27, 104:28, 104:29, 104:30, 104:31, 104:32, 104:33, 104:34, 104:35, 105:1, 105:2, 105:3, 105:4, 105:5, 105:6, 105:7, 105:8, 105:9, 105:10, 105:11, 105:12, 105:13, 105:14, 105:15, 105:16, 105:17, 105:18, 105:19, 105:20, 105:21, 105:22, 105:23, 105:24, 105:25, 105:26, 105:27, 105:28, 105:29, 105:30, 105:31, 105:32, 105:33, 105:34, 105:35, 105:36, 105:37, 105:38, 105:39, 105:40, 105:41, 105:42, 105:43, 105:44, 105:45, 106:1, 106:2, 106:3, 106:4, 106:6, 106:8, 106:9, 106:10, 106:11, 106:12, 106:13, 106:14, 106:15, 106:16, 106:17, 106:18, 106:19, 106:20, 106:21, 106:22, 106:24, 106:25, 106:26, 106:27, 106:28, 106:29, 106:30, 106:31, 106:32, 106:33, 106:34, 106:35, 106:36, 106:37, 106:39, 106:40, 106:41, 106:42, 106:43, 106:44, 106:45, 106:46, 107:1, 107:2, 107:3, 107:4, 107:5, 107:6, 107:7, 107:8, 107:9, 107:10, 107:11, 107:12, 107:13, 107:14, 107:15, 107:16, 107:17, 107:18, 107:19, 107:20, 107:21, 107:22, 107:23, 107:24, 107:25, 107:26, 107:27, 107:28, 107:29, 107:30, 107:31, 107:32, 107:33, 107:34, 107:35, 107:36, 107:37, 107:38, 107:39, 107:40, 107:41, 107:42, 107:43, 108:1, 108:2, 108:3, 108:4, 108:5, 108:6, 108:7, 108:8, 108:9, 108:10, 108:11, 108:12, 108:13, 109:1, 109:2, 109:3, 109:4, 109:5, 109:6, 109:7, 109:8, 109:9, 109:10, 109:11, 109:12, 109:13, 109:14, 109:15, 109:16, 109:17, 109:18, 109:19, 109:20, 109:21, 109:22, 109:23, 109:24, 109:25, 109:26, 109:27, 109:28, 109:29, 109:30, 109:31, 110:1, 110:2, 110:4, 110:5, 110:6, 110:7, 111:1, 111:2, 111:3, 111:4, 111:5, 111:6, 111:7, 111:8, 111:9, 112:1, 112:2, 112:3, 112:4, 112:5, 112:6, 112:7, 112:8, 112:9, 112:10, 113:1, 113:2, 113:3, 113:4, 113:5, 113:6, 113:7, 113:8, 113:9, 114:1, 114:2, 114:3, 114:4, 114:5, 114:6, 114:7, 114:8, 115:1, 115:2, 115:3, 115:4, 115:5, 115:6, 115:7, 115:8, 115:9, 115:10, 115:11, 115:12, 115:13, 115:14, 115:15, 115:16, 115:17, 115:18, 116:1, 116:2, 116:3, 116:4, 116:5, 116:6, 116:7, 116:8, 116:9, 116:10, 116:11, 116:12, 116:13, 116:14, 116:15, 116:16, 116:17, 116:18, 116:19, 117:1, 117:2, 118:1, 118:2, 118:3, 118:4, 118:5, 118:6, 118:7, 118:8, 118:9, 118:10, 118:11, 118:12, 118:13, 118:14, 118:15, 118:16, 118:17, 118:18, 118:19, 118:20, 118:21, 118:22, 118:23, 118:24, 118:25, 118:26, 118:28, 118:29, 119:1, 119:2, 119:3, 119:4, 119:5, 119:6, 119:7, 119:8, 119:9, 119:10, 119:11, 119:12, 119:13, 119:14, 119:15, 119:16, 119:17, 119:18, 119:19, 119:20, 119:21, 119:22, 119:23, 119:24, 119:25, 119:26, 119:27, 119:28, 119:29, 119:30, 119:31, 119:32, 119:33, 119:34, 119:35, 119:36, 119:37, 119:38, 119:39, 119:40, 119:41, 119:42, 119:43, 119:44, 119:45, 119:46, 119:47, 119:48, 119:49, 119:50, 119:51, 119:52, 119:53, 119:54, 119:55, 119:56, 119:57, 119:58, 119:59, 119:60, 119:61, 119:62, 119:63, 119:64, 119:65, 119:66, 119:67, 119:68, 119:69, 119:70, 119:71, 119:72, 119:73, 119:74, 119:75, 119:76, 119:77, 119:78, 119:79, 119:80, 119:81, 119:82, 119:83, 119:84, 119:85, 119:86, 119:87, 119:88, 119:89, 119:90, 119:91, 119:92, 119:93, 119:94, 119:95, 119:96, 119:97, 119:98, 119:99, 119:100, 119:101, 119:102, 119:103, 119:104, 119:105, 119:106, 119:107, 119:108, 119:109, 119:110, 119:111, 119:112, 119:113, 119:114, 119:115, 119:116, 119:117, 119:118, 119:119, 119:120, 119:121, 119:122, 119:123, 119:124, 119:125, 119:126, 119:127, 119:128, 119:129, 119:130, 119:131, 119:132, 119:133, 119:134, 119:135, 119:136, 119:137, 119:138, 119:139, 119:140, 119:141, 119:142, 119:143, 119:144, 119:145, 119:146, 119:147, 119:148, 119:149, 119:150, 119:151, 119:152, 119:153, 119:154, 119:155, 119:156, 119:157, 119:158, 119:159, 119:160, 119:161, 119:162, 119:163, 119:164, 119:165, 119:166, 119:167, 119:168, 119:169, 119:170, 119:171, 119:172, 119:173, 119:174, 119:175, 119:176, 120:1, 120:2, 120:3, 120:4, 120:5, 120:6, 120:7, 121:1, 121:2, 121:3, 121:4, 121:5, 121:6, 121:7, 121:8, 122:1, 122:2, 122:3, 122:4, 122:5, 122:6, 122:7, 122:8, 122:9, 123:1, 123:3, 123:4, 124:1, 124:2, 124:3, 124:4, 124:5, 124:6, 124:7, 124:8, 125:1, 125:2, 125:4, 125:5, 126:1, 126:3, 126:4, 126:5, 126:6, 127:3, 127:4, 127:5, 128:1, 128:2, 128:3, 128:4, 128:5, 128:6, 129:1, 129:2, 129:3, 129:4, 129:5, 129:6, 129:7, 129:8, 130:1, 130:2, 130:3, 130:4, 130:5, 130:6, 130:7, 130:8, 131:2, 131:3, 132:1, 132:2, 132:3, 132:4, 132:5, 132:6, 132:7, 132:8, 132:9, 132:10, 132:12, 132:13, 132:14, 132:15, 132:16, 132:17, 132:18, 133:1, 134:1, 134:2, 134:3, 135:1, 135:2, 135:3, 135:4, 135:5, 135:6, 135:8, 135:9, 135:10, 135:11, 135:12, 135:13, 135:14, 135:15, 135:16, 135:17, 135:18, 135:19, 135:20, 135:21, 136:1, 136:2, 136:3, 136:4, 136:5, 136:6, 136:7, 136:8, 136:9, 136:10, 136:11, 136:12, 136:13, 136:14, 136:15, 136:16, 136:17, 136:18, 136:19, 136:20, 136:21, 136:22, 136:23, 136:24, 136:25, 136:26, 137:1, 137:2, 137:3, 137:4, 137:5, 137:6, 137:8, 137:9, 138:1, 138:3, 138:4, 138:5, 138:6, 139:1, 139:2, 139:3, 139:4, 139:5, 139:6, 139:7, 139:8, 139:9, 139:10, 139:11, 139:12, 139:13, 139:14, 139:15, 139:17, 139:18, 139:19, 139:20, 139:21, 139:22, 139:23, 139:24, 140:1, 140:2, 140:3, 140:4, 140:6, 140:7, 140:8, 140:9, 140:10, 140:11, 140:12, 140:13, 141:1, 141:2, 141:3, 141:6, 141:7, 141:8, 141:9, 141:10, 142:1, 142:2, 142:3, 142:4, 142:5, 142:6, 143:1, 143:2, 143:3, 143:4, 143:5, 143:6, 143:7, 143:9, 143:10, 143:11, 144:1, 144:3, 144:4, 144:5, 144:6, 144:7, 144:8, 144:9, 144:10, 144:12, 144:15, 145:1, 145:2, 145:3, 145:4, 145:5, 145:6, 145:7, 145:8, 145:9, 145:10, 145:11, 145:12, 145:14, 145:15, 145:16, 145:17, 145:18, 145:19, 145:20, 145:21, 146:1, 146:2, 146:3, 146:4, 146:5, 146:6, 146:7, 146:8, 146:9, 146:10, 147:1, 147:2, 147:3, 147:4, 147:5, 147:6, 147:7, 147:8, 147:9, 147:10, 147:11, 147:12, 147:13, 147:14, 147:15, 147:16, 147:17, 147:18, 147:19, 147:20, 148:1, 148:2, 148:3, 148:4, 148:5, 148:6, 148:7, 148:8, 148:9, 148:10, 148:11, 148:12, 148:13, 149:1, 149:2, 149:3, 149:4, 149:5, 149:6, 149:7, 149:8, 149:9, 150:1, 150:2, 150:3, 150:4, 150:5,150:6</p>
</div>
<div class="section" id="proverbs">
<h2>Proverbs</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:10, 1:11, 1:12, 1:13, 1:14, 1:15, 1:16, 1:17, 1:18, 1:19, 1:20, 1:21, 1:23, 1:24, 1:25, 1:26, 1:27, 1:28, 1:29, 1:30, 1:31, 1:32, 1:33, 2:1, 2:2, 2:3, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:10, 2:11, 2:12, 2:13, 2:14, 2:15, 2:16, 2:17, 2:18, 2:19, 2:20, 2:21, 2:22, 3:1, 3:2, 3:3, 3:4, 3:5, 3:6, 3:7, 3:8, 3:9, 3:10, 3:11, 3:12, 3:13, 3:14, 3:15, 3:16, 3:17, 3:18, 3:19, 3:20, 3:21, 3:22, 3:23, 3:24, 3:25, 3:26, 3:27, 3:28, 3:29, 3:30, 3:31, 3:32, 3:33, 3:34, 3:35, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 4:9, 4:10, 4:11, 4:12, 4:13, 4:14, 4:15, 4:16, 4:17, 4:18, 4:19, 4:20, 4:21, 4:22, 4:23, 4:24, 4:25, 4:26, 4:27, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:7, 5:8, 5:9, 5:10, 5:11, 5:12, 5:13, 5:14, 5:15, 5:16, 5:17, 5:18, 5:19, 5:20, 5:21, 5:22, 5:23, 6:1, 6:2, 6:4, 6:5, 6:6, 6:7, 6:8, 6:9, 6:10, 6:11, 6:12, 6:13, 6:14, 6:15, 6:16, 6:17, 6:18, 6:19, 6:20, 6:21, 6:22, 6:23, 6:24, 6:25, 6:26, 6:27, 6:28, 6:29, 6:30, 6:31, 6:32, 6:33, 6:34, 6:35, 7:1, 7:2, 7:3, 7:4, 7:5, 7:6, 7:7, 7:8, 7:9, 7:10, 7:11, 7:12, 7:13, 7:14, 7:15, 7:16, 7:17, 7:18, 7:19, 7:20, 7:21, 7:22, 7:23, 7:24, 7:25, 7:26, 7:27, 8:1, 8:2, 8:3, 8:4, 8:5, 8:6, 8:7, 8:8, 8:9, 8:10, 8:11, 8:12, 8:13, 8:14, 8:15, 8:16, 8:17, 8:18, 8:19, 8:20, 8:21, 8:22, 8:23, 8:24, 8:25, 8:26, 8:27, 8:28, 8:30, 8:31, 8:32, 8:33, 8:34, 8:35, 8:36, 9:1, 9:2, 9:3, 9:4, 9:5, 9:6, 9:7, 9:8, 9:9, 9:10, 9:11, 9:12, 9:13, 9:14, 9:15, 9:16, 9:17, 9:18, 10:1, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:12, 10:13, 10:14, 10:15, 10:16, 10:17, 10:18, 10:19, 10:20, 10:21, 10:22, 10:23, 10:24, 10:25, 10:26, 10:27, 10:28, 10:29, 10:30, 10:31, 10:32, 11:1, 11:2, 11:3, 11:4, 11:5, 11:6, 11:7, 11:8, 11:9, 11:10, 11:11, 11:12, 11:13, 11:14, 11:15, 11:16, 11:17, 11:18, 11:19, 11:20, 11:21, 11:22, 11:23, 11:24, 11:25, 11:26, 11:27, 11:28, 11:29, 11:30, 11:31, 12:1, 12:2, 12:3, 12:4, 12:5, 12:6, 12:7, 12:8, 12:9, 12:10, 12:11, 12:12, 12:13, 12:14, 12:15, 12:16, 12:17, 12:18, 12:19, 12:20, 12:21, 12:22, 12:23, 12:24, 12:25, 12:26, 12:27, 12:28, 13:1, 13:2, 13:3, 13:4, 13:5, 13:6, 13:7, 13:8, 13:9, 13:10, 13:11, 13:12, 13:13, 13:14, 13:15, 13:16, 13:17, 13:18, 13:19, 13:20, 13:21, 13:22, 13:23, 13:24, 13:25, 14:1, 14:2, 14:3, 14:4, 14:5, 14:6, 14:7, 14:8, 14:9, 14:10, 14:11, 14:12, 14:13, 14:15, 14:16, 14:17, 14:18, 14:19, 14:20, 14:21, 14:22, 14:23, 14:24, 14:25, 14:26, 14:27, 14:28, 14:29, 14:30, 14:31, 14:32, 14:33, 14:34, 14:35, 15:1, 15:2, 15:3, 15:4, 15:5, 15:6, 15:7, 15:8, 15:9, 15:10, 15:11, 15:12, 15:13, 15:14, 15:15, 15:16, 15:17, 15:18, 15:19, 15:20, 15:21, 15:22, 15:23, 15:24, 15:25, 15:26, 15:27, 15:28, 15:29, 15:30, 15:31, 15:32, 15:33, 16:1, 16:2, 16:3, 16:4, 16:5, 16:6, 16:7, 16:8, 16:9, 16:10, 16:11, 16:12, 16:13, 16:14, 16:15, 16:16, 16:17, 16:18, 16:19, 16:20, 16:21, 16:22, 16:23, 16:24, 16:25, 16:26, 16:27, 16:28, 16:29, 16:30, 16:31, 16:32, 16:33, 17:1, 17:2, 17:3, 17:4, 17:5, 17:6, 17:7, 17:8, 17:9, 17:10, 17:11, 17:12, 17:13, 17:14, 17:15, 17:16, 17:17, 17:18, 17:19, 17:20, 17:21, 17:22, 17:23, 17:24, 17:25, 17:26, 17:27, 17:28, 18:1, 18:2, 18:3, 18:4, 18:5, 18:6, 18:7, 18:8, 18:9, 18:10, 18:11, 18:12, 18:13, 18:14, 18:15, 18:16, 18:17, 18:18, 18:19, 18:20, 18:21, 18:22, 18:23, 18:24, 19:1, 19:2, 19:3, 19:4, 19:5, 19:6, 19:8, 19:9, 19:10, 19:11, 19:12, 19:13, 19:14, 19:15, 19:16, 19:17, 19:18, 19:19, 19:20, 19:21, 19:22, 19:23, 19:24, 19:25, 19:26, 19:27, 19:28, 19:29, 20:1, 20:2, 20:3, 20:4, 20:5, 20:6, 20:7, 20:8, 20:9, 20:10, 20:11, 20:12, 20:13, 20:14, 20:15, 20:17, 20:18, 20:19, 20:20, 20:21, 20:22, 20:23, 20:24, 20:25, 20:26, 20:27, 20:28, 20:29, 20:30, 21:1, 21:2, 21:3, 21:4, 21:5, 21:6, 21:7, 21:8, 21:9, 21:10, 21:11, 21:12, 21:13, 21:14, 21:15, 21:16, 21:17, 21:18, 21:19, 21:20, 21:21, 21:22, 21:23, 21:24, 21:25, 21:26, 21:27, 21:28, 21:29, 21:30, 21:31, 22:1, 22:2, 22:3, 22:4, 22:5, 22:6, 22:7, 22:8, 22:9, 22:10, 22:11, 22:12, 22:13, 22:14, 22:15, 22:16, 22:17, 22:18, 22:19, 22:20, 22:21, 22:22, 22:23, 22:24, 22:25, 22:26, 22:27, 22:28, 22:29, 23:1, 23:2, 23:3, 23:4, 23:5, 23:6, 23:7, 23:8, 23:9, 23:10, 23:11, 23:12, 23:13, 23:14, 23:15, 23:16, 23:17, 23:18, 23:19, 23:20, 23:21, 23:22, 23:23, 23:24, 23:25, 23:26, 23:27, 23:28, 23:29, 23:30, 23:31, 23:32, 23:33, 23:34, 24:1, 24:2, 24:3, 24:4, 24:5, 24:6, 24:7, 24:8, 24:9, 24:10, 24:11, 24:13, 24:14, 24:15, 24:16, 24:17, 24:18, 24:19, 24:20, 24:21, 24:22, 24:23, 24:24, 24:25, 24:26, 24:27, 24:28, 24:29, 24:30, 24:31, 24:32, 24:33, 24:34, 25:1, 25:2, 25:3, 25:4, 25:5, 25:6, 25:7, 25:8, 25:9, 25:10, 25:11, 25:12, 25:14, 25:15, 25:16, 25:17, 25:18, 25:19, 25:20, 25:21, 25:22, 25:23, 25:24, 25:25, 25:26, 25:27, 25:28, 26:1, 26:2, 26:3, 26:4, 26:5, 26:6, 26:7, 26:8, 26:9, 26:10, 26:11, 26:12, 26:13, 26:14, 26:15, 26:16, 26:17, 26:18, 26:19, 26:20, 26:21, 26:22, 26:23, 26:24, 26:25, 26:26, 26:27, 26:28, 27:1, 27:2, 27:3, 27:4, 27:5, 27:6, 27:7, 27:8, 27:9, 27:11, 27:12, 27:14, 27:15, 27:16, 27:17, 27:18, 27:19, 27:20, 27:21, 27:22, 27:23, 27:24, 27:25, 27:26, 27:27, 28:1, 28:3, 28:4, 28:5, 28:6, 28:7, 28:8, 28:9, 28:10, 28:11, 28:12, 28:13, 28:14, 28:15, 28:16, 28:17, 28:18, 28:19, 28:20, 28:21, 28:22, 28:23, 28:24, 28:25, 28:26, 28:27, 28:28, 29:1, 29:2, 29:3, 29:4, 29:5, 29:6, 29:7, 29:8, 29:9, 29:10, 29:11, 29:12, 29:13, 29:14, 29:15, 29:16, 29:17, 29:18, 29:19, 29:20, 29:21, 29:22, 29:23, 29:24, 29:25, 29:26, 29:27, 30:1, 30:2, 30:3, 30:5, 30:6, 30:7, 30:8, 30:9, 30:10, 30:11, 30:12, 30:13, 30:15, 30:16, 30:18, 30:20, 30:21, 30:22, 30:23, 30:24, 30:25, 30:26, 30:27, 30:28, 30:29, 30:30, 30:31, 30:32, 30:33, 31:1, 31:2, 31:3, 31:4, 31:5, 31:6, 31:7, 31:8, 31:9, 31:10, 31:11, 31:12, 31:13, 31:14, 31:15, 31:16, 31:17, 31:18, 31:19, 31:20, 31:21, 31:22, 31:23, 31:24, 31:25, 31:26, 31:27, 31:28, 31:29, 31:30,31:31</p>
</div>
<div class="section" id="ecclesiastes">
<h2>Ecclesiastes</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:7, 1:9, 1:10, 1:12, 1:14, 1:15, 1:18, 2:1, 2:2, 2:4, 2:5, 2:6, 2:9, 2:13, 2:17, 2:18, 2:20, 2:22, 2:25, 3:1, 3:2, 3:3, 3:4, 3:6, 3:7, 3:8, 3:9, 3:10, 3:12, 3:13, 3:15, 3:20, 3:21, 4:2, 4:3, 4:5, 4:6, 4:7, 4:9, 4:11, 4:12, 4:13, 4:14, 4:15, 5:3, 5:4, 5:5, 5:7, 5:9, 5:10, 5:11, 5:13, 5:14, 5:16, 5:17, 5:20, 6:1, 6:4, 6:5, 6:6, 6:7, 6:9, 6:11, 7:1, 7:3, 7:4, 7:5, 7:6, 7:7, 7:8, 7:9, 7:10, 7:11, 7:13, 7:16, 7:17, 7:19, 7:20, 7:21, 7:22, 7:23, 7:24, 7:27, 7:29, 8:2, 8:3, 8:4, 8:5, 8:6, 8:7, 8:9, 9:4, 9:7, 9:8, 9:13, 9:16, 9:17, 9:18, 10:1, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:12, 10:13, 10:14, 10:15, 10:16, 10:18, 10:19, 11:1, 11:2, 11:4, 11:7, 11:10, 12:2, 12:7, 12:8, 12:10, 12:13,12:14</p>
</div>
<div class="section" id="song-of-solomon">
<h2>Song ofSolomon</h2>
<p>1:1, 1:2, 1:3, 1:5, 1:9, 1:10, 1:11, 1:12, 1:13, 1:14, 1:15, 1:16, 1:17, 2:1, 2:2, 2:4, 2:5, 2:6, 2:8, 2:10, 2:11, 2:12, 2:15, 2:16, 2:17, 3:1, 3:3, 3:7, 3:8, 3:9, 4:5, 4:6, 4:7, 4:12, 4:13, 4:14, 4:15, 5:3, 5:4, 5:8, 5:10, 5:11, 5:12, 5:13, 5:14, 5:15, 6:2, 6:3, 6:4, 6:7, 6:8, 6:12, 7:2, 7:3, 7:5, 7:6, 7:7, 7:9, 7:10, 7:11, 8:3, 8:4, 8:8, 8:10, 8:13,8:14</p>
</div>
<div class="section" id="isaiah">
<h2>Isaiah</h2>
<p>1:3, 1:5, 1:8, 1:9, 1:10, 1:12, 1:14, 1:16, 1:17, 1:19, 1:20, 1:21, 1:22, 1:25, 1:27, 1:28, 1:29, 1:30, 1:31, 2:1, 2:5, 2:8, 2:9, 2:10, 2:13, 2:14, 2:15, 2:16, 2:18, 2:22, 3:2, 3:3, 3:4, 3:10, 3:11, 3:13, 3:15, 3:17, 3:18, 3:19, 3:20, 3:21, 3:22, 3:23, 3:25, 3:26, 4:3, 4:6, 5:1, 5:3, 5:10, 5:15, 5:16, 5:17, 5:18, 5:21, 5:22, 5:23, 5:27, 5:28, 6:3, 6:4, 6:6, 6:7, 6:8, 6:9, 6:12, 7:5, 7:7, 7:10, 7:11, 7:12, 7:13, 7:15, 7:16, 7:21, 7:24, 8:1, 8:2, 8:3, 8:5, 8:6, 8:10, 8:11, 8:12, 8:13, 8:15, 8:16, 8:17, 8:20, 9:4, 9:5, 9:8, 9:9, 9:11, 9:13, 9:14, 9:15, 9:16, 9:19, 10:1, 10:5, 10:8, 10:9, 10:10, 10:11, 10:19, 10:21, 10:23, 10:25, 10:28, 10:29, 10:30, 10:31, 10:32, 10:34, 11:1, 11:5, 11:7, 11:8, 12:3, 12:5, 12:6, 13:1, 13:2, 13:3, 13:6, 13:7, 13:12, 13:15, 13:16, 13:17, 13:18, 14:3, 14:4, 14:5, 14:6, 14:7, 14:8, 14:10, 14:12, 14:14, 14:15, 14:16, 14:17, 14:18, 14:24, 14:27, 14:28, 15:3, 15:6, 15:7, 15:8, 16:1, 16:2, 16:7, 16:11, 16:13, 17:1, 17:2, 17:4, 17:7, 18:1, 19:5, 19:6, 19:8, 19:9, 19:10, 19:12, 19:15, 19:16, 19:19, 19:24, 20:5, 21:4, 21:5, 21:6, 21:7, 21:8, 21:10, 21:12, 21:13, 21:14, 21:15, 22:1, 22:2, 22:6, 22:7, 22:8, 22:9, 22:10, 22:12, 22:15, 22:17, 22:19, 22:20, 22:23, 23:2, 23:3, 23:5, 23:6, 23:7, 23:9, 23:10, 23:14, 23:16, 24:1, 24:3, 24:4, 24:7, 24:8, 24:9, 24:10, 24:11, 24:12, 24:14, 24:17, 24:19, 24:21, 25:3, 25:7, 25:12, 26:1, 26:2, 26:3, 26:4, 26:6, 26:7, 26:8, 26:12, 26:13, 26:16, 27:2, 27:3, 27:4, 27:5, 27:6, 27:7, 27:8, 28:3, 28:5, 28:6, 28:8, 28:10, 28:11, 28:12, 28:14, 28:20, 28:23, 28:24, 28:26, 28:29, 29:1, 29:2, 29:3, 29:12, 29:15, 29:18, 29:19, 29:20, 29:24, 30:3, 30:4, 30:7, 30:9, 30:11, 30:24, 30:31, 31:6, 32:1, 32:3, 32:4, 32:5, 32:8, 32:9, 32:12, 32:13, 32:16, 32:17, 32:18, 32:19, 32:20, 33:2, 33:3, 33:4, 33:5, 33:7, 33:8, 33:10, 33:11, 33:12, 33:13, 33:17, 33:22, 33:24, 34:3, 34:8, 34:9, 34:12, 35:1, 35:3, 35:5, 36:5, 36:14, 36:17, 36:19, 36:21, 37:1, 37:5, 37:13, 37:15, 37:18, 37:20, 37:25, 37:28, 37:31, 37:34, 37:35, 37:37, 38:2, 38:4, 38:6, 38:7, 38:9, 38:10, 38:13, 38:16, 38:18, 38:19, 38:20, 38:21, 38:22, 39:5, 40:1, 40:3, 40:5, 40:6, 40:7, 40:8, 40:13, 40:16, 40:17, 40:18, 40:19, 40:23, 40:25, 40:27, 40:29, 40:30, 41:3, 41:5, 41:6, 41:8, 41:12, 41:13, 41:21, 41:24, 41:27, 41:28, 41:29, 42:2, 42:3, 42:4, 42:7, 42:8, 42:9, 42:12, 42:17, 42:18, 42:20, 42:21, 42:23, 43:5, 43:7, 43:8, 43:11, 43:13, 43:15, 43:16, 43:18, 43:21, 43:22, 43:25, 43:26, 43:27, 43:28, 44:1, 44:4, 44:10, 44:22, 44:25, 44:27, 45:4, 45:5, 45:7, 45:10, 45:12, 45:15, 45:16, 45:17, 45:22, 45:25, 46:2, 46:4, 46:5, 46:8, 46:9, 46:12, 47:2, 47:3, 47:4, 47:5, 47:7, 48:2, 48:4, 48:7, 48:9, 48:10, 48:11, 48:12, 48:15, 48:22, 49:3, 49:11, 49:12, 49:14, 49:16, 49:17, 49:20, 49:24, 50:3, 50:5, 51:12, 51:14, 51:15, 51:21, 52:2, 52:3, 52:6, 52:13, 53:1, 53:4, 54:7, 54:12, 54:13, 54:15, 55:4, 55:6, 55:8, 55:9, 56:1, 56:4, 56:8, 56:9, 57:2, 57:3, 57:7, 57:9, 57:12, 57:14, 57:18, 57:19, 57:20, 57:21, 59:1, 59:20, 60:1, 60:3, 60:8, 60:12, 60:22, 61:2, 61:5, 62:3, 62:7, 62:12, 63:2, 63:4, 63:6, 63:8, 63:10, 63:13, 63:18, 63:19, 64:1, 64:3, 64:4, 64:8, 64:9, 64:10, 64:12, 65:2, 65:3, 65:4, 65:6, 65:17, 65:21, 65:24, 66:6, 66:7, 66:10, 66:13, 66:16, 66:21,66:23</p>
</div>
<div class="section" id="jeremiah">
<h2>Jeremiah</h2>
<p>1:1, 1:2, 1:4, 1:6, 1:8, 1:9, 1:11, 1:12, 1:14, 1:19, 2:1, 2:4, 2:9, 2:10, 2:12, 2:14, 2:16, 2:17, 2:21, 2:22, 2:29, 2:30, 2:32, 2:33, 2:36, 3:4, 3:9, 3:11, 3:15, 3:22, 3:23, 4:3, 4:6, 4:8, 4:12, 4:14, 4:15, 4:17, 4:18, 4:20, 4:21, 4:23, 4:24, 4:25, 4:27, 5:2, 5:8, 5:9, 5:10, 5:11, 5:13, 5:16, 5:18, 5:20, 5:21, 5:23, 5:25, 5:26, 5:27, 5:29, 5:30, 6:2, 6:5, 6:8, 6:14, 6:17, 6:18, 6:24, 6:25, 6:27, 6:28, 6:29, 6:30, 7:1, 7:3, 7:4, 7:5, 7:7, 7:8, 7:15, 7:17, 7:19, 7:21, 7:26, 8:4, 8:5, 8:11, 8:15, 8:17, 8:18, 8:20, 8:21, 9:6, 9:9, 9:14, 9:17, 9:18, 9:25, 10:1, 10:4, 10:6, 10:8, 10:15, 10:17, 10:19, 10:23, 10:24, 11:1, 11:2, 11:3, 11:9, 11:18, 11:23, 12:2, 12:7, 12:8, 12:11, 12:17, 13:1, 13:2, 13:3, 13:5, 13:8, 13:9, 13:15, 13:18, 13:19, 13:20, 13:23, 13:24, 13:26, 14:1, 14:2, 14:4, 14:5, 14:6, 14:11, 14:20, 15:5, 15:12, 15:13, 15:21, 16:1, 16:2, 16:8, 16:17, 16:20, 17:2, 17:5, 17:7, 17:9, 17:12, 17:14, 17:15, 17:17, 17:23, 18:1, 18:2, 18:3, 18:5, 18:7, 18:9, 18:10, 18:14, 18:16, 18:19, 19:10, 19:12, 20:13, 20:14, 20:15, 20:17, 20:18, 21:3, 21:5, 21:6, 21:8, 21:11, 22:1, 22:5, 22:12, 22:16, 22:19, 22:20, 22:26, 22:27, 22:29, 23:1, 23:11, 23:13, 23:19, 23:21, 23:23, 23:25, 23:29, 23:30, 23:31, 23:37, 23:40, 24:4, 25:2, 25:8, 25:11, 25:16, 25:17, 25:19, 25:21, 25:22, 25:23, 25:24, 25:25, 25:35, 25:36, 25:37, 26:1, 26:4, 26:5, 26:6, 26:7, 26:14, 26:17, 26:22, 26:24, 27:1, 27:2, 27:17, 28:2, 28:7, 28:10, 28:13, 28:17, 29:4, 29:5, 29:9, 29:12, 29:13, 29:15, 29:20, 29:24, 29:27, 29:29, 29:30, 30:1, 30:2, 30:4, 30:5, 30:7, 30:9, 30:12, 30:13, 30:22, 30:23, 31:1, 31:2, 31:5, 31:11, 31:14, 31:17, 31:22, 31:24, 31:25, 31:26, 31:29, 31:30, 31:39, 32:6, 32:9, 32:10, 32:11, 32:13, 32:15, 32:16, 32:22, 32:26, 32:27, 32:31, 32:34, 32:38, 32:41, 33:1, 33:2, 33:3, 33:6, 33:7, 33:17, 33:19, 33:23, 33:25, 34:4, 34:6, 34:9, 34:12, 35:1, 35:5, 35:9, 35:10, 35:12, 35:16, 36:1, 36:5, 36:11, 36:13, 36:15, 36:17, 36:18, 36:19, 36:24, 36:25, 37:4, 37:6, 37:8, 37:11, 37:12, 37:16, 38:3, 38:5, 38:8, 38:13, 38:21, 38:24, 38:28, 39:2, 39:7, 39:8, 39:11, 39:12, 39:15, 40:2, 40:6, 40:13, 41:4, 41:15, 41:17, 42:3, 42:7, 42:9, 42:12, 42:13, 42:19, 43:7, 43:8, 44:4, 44:5, 44:16, 44:20, 45:2, 45:3, 46:1, 46:3, 46:4, 46:6, 46:7, 46:15, 46:17, 46:19, 46:20, 46:24, 47:1, 47:5, 47:6, 47:7, 48:3, 48:4, 48:6, 48:9, 48:10, 48:13, 48:14, 48:16, 48:19, 48:20, 48:21, 48:22, 48:23, 48:24, 48:25, 48:27, 48:30, 48:31, 48:37, 48:40, 48:42, 48:43, 48:47, 49:4, 49:6, 49:11, 49:15, 49:17, 49:21, 49:25, 49:27, 49:33, 49:35, 49:38, 49:39, 50:1, 50:8, 50:10, 50:22, 50:23, 50:27, 50:30, 50:36, 50:38, 50:41, 50:46, 51:1, 51:4, 51:8, 51:10, 51:13, 51:18, 51:20, 51:21, 51:32, 51:37, 51:38, 51:40, 51:41, 51:42, 51:45, 51:49, 51:54, 51:61, 51:63, 52:2, 52:5, 52:6, 52:14, 52:16, 52:23, 52:26, 52:28, 52:29, 52:32,52:33</p>
</div>
<div class="section" id="lamentations">
<h2>Lamentations</h2>
<p>3:1, 3:2, 3:3, 3:4, 3:5, 3:6, 3:7, 3:8, 3:9, 3:10, 3:11, 3:12, 3:13, 3:14, 3:15, 3:16, 3:17, 3:18, 3:19, 3:20, 3:21, 3:22, 3:23, 3:24, 3:25, 3:26, 3:27, 3:28, 3:29, 3:30, 3:31, 3:32, 3:33, 3:34, 3:35, 3:36, 3:37, 3:38, 3:39, 3:40, 3:41, 3:42, 3:43, 3:44, 3:45, 3:46, 3:47, 3:48, 3:49, 3:50, 3:51, 3:52, 3:53, 3:54, 3:55, 3:56, 3:57, 3:58, 3:59, 3:60, 3:61, 3:62, 3:63, 3:64, 3:65, 3:66, 4:1, 4:5, 4:14, 4:17, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:7, 5:8, 5:9, 5:10, 5:11, 5:12, 5:13, 5:14, 5:15, 5:16, 5:17, 5:18, 5:19, 5:20, 5:21,5:22</p>
</div>
<div class="section" id="ezekiel">
<h2>Ezekiel</h2>
<p>1:2, 1:5, 1:6, 1:8, 1:9, 1:12, 1:14, 1:17, 1:18, 1:25, 2:1, 2:2, 2:4, 2:5, 2:7, 2:9, 3:1, 3:2, 3:4, 3:5, 3:8, 3:10, 3:16, 4:1, 4:7, 4:10, 4:11, 4:12, 4:13, 4:15, 5:3, 5:5, 6:1, 6:2, 6:4, 6:5, 6:7, 6:10, 7:1, 7:5, 7:6, 7:10, 7:14, 7:17, 7:18, 7:22, 7:23, 7:25, 8:4, 8:7, 8:8, 8:9, 8:13, 8:15, 9:7, 9:10, 10:3, 10:8, 10:10, 10:13, 10:15, 10:18, 10:21, 11:2, 11:3, 11:4, 11:6, 11:8, 11:9, 11:10, 11:14, 11:18, 11:20, 11:22, 11:23, 11:25, 12:1, 12:5, 12:8, 12:9, 12:11, 12:15, 12:17, 12:18, 12:21, 12:24, 12:26, 13:1, 13:3, 13:4, 13:12, 14:1, 14:2, 14:5, 14:10, 14:12, 14:17, 14:19, 15:1, 15:2, 15:3, 15:8, 16:1, 16:2, 16:9, 16:11, 16:12, 16:18, 16:21, 16:23, 16:24, 16:26, 16:29, 16:30, 16:32, 16:35, 16:40, 16:42, 16:44, 16:48, 16:50, 16:54, 16:56, 16:58, 16:59, 16:60, 16:62, 17:1, 17:2, 17:4, 17:8, 17:11, 17:14, 17:18, 18:1, 18:3, 18:4, 18:5, 18:8, 18:9, 18:10, 18:11, 18:14, 18:32, 19:1, 19:2, 19:3, 19:4, 19:5, 19:6, 19:8, 19:10, 19:13, 20:2, 20:4, 20:10, 20:11, 20:17, 20:19, 20:20, 20:25, 20:29, 20:35, 20:37, 20:45, 20:48, 20:49, 21:1, 21:2, 21:5, 21:6, 21:8, 21:9, 21:13, 21:16, 21:17, 21:18, 21:20, 21:25, 21:30, 22:1, 22:2, 22:5, 22:6, 22:8, 22:10, 22:13, 22:15, 22:16, 22:17, 22:21, 22:23, 22:24, 22:27, 23:1, 23:2, 23:5, 23:6, 23:9, 23:13, 23:14, 23:16, 23:19, 23:20, 23:21, 23:26, 23:30, 23:31, 23:33, 23:34, 23:36, 23:38, 23:41, 23:43, 23:44, 23:46, 23:48, 24:1, 24:2, 24:4, 24:5, 24:8, 24:9, 24:10, 24:12, 24:15, 24:18, 24:19, 24:20, 24:22, 24:26, 25:1, 25:2, 25:5, 25:8, 25:11, 26:1, 26:4, 26:6, 26:9, 26:13, 26:18, 27:1, 27:2, 27:4, 27:5, 27:6, 27:8, 27:13, 27:14, 27:20, 27:23, 27:25, 27:26, 27:28, 27:29, 27:30, 27:36, 28:1, 28:3, 28:5, 28:6, 28:8, 28:10, 28:11, 28:15, 28:19, 28:20, 28:21, 29:1, 29:2, 29:8, 29:11, 29:17, 29:20, 30:1, 30:2, 30:3, 30:8, 30:10, 30:14, 30:15, 30:17, 30:19, 30:20, 30:23, 31:1, 31:2, 31:7, 31:9, 31:13, 32:1, 32:3, 32:5, 32:6, 32:8, 32:11, 32:14, 32:17, 32:19, 32:22, 32:28, 33:1, 33:3, 33:14, 33:17, 33:18, 33:19, 33:20, 33:23, 33:33, 34:1, 34:3, 34:5, 34:7, 34:9, 34:11, 34:15, 34:17, 34:19, 34:20, 34:21, 34:22, 34:24, 34:31, 35:1, 35:2, 35:4, 35:7, 35:9, 35:13, 35:14, 36:1, 36:2, 36:7, 36:9, 36:13, 36:14, 36:16, 36:21, 36:24, 36:27, 36:28, 37:3, 37:4, 37:5, 37:13, 37:15, 37:17, 37:18, 37:20, 37:27, 37:28, 38:1, 38:2, 38:3, 38:5, 38:6, 38:7, 38:10, 38:19, 38:21, 39:3, 39:5, 39:6, 39:8, 39:12, 39:16, 39:22, 39:24, 39:29, 40:6, 40:8, 40:11, 40:12, 40:14, 40:15, 40:18, 40:20, 40:27, 40:30, 40:31, 40:32, 40:34, 40:35, 40:37, 40:38, 40:41, 40:43, 40:45, 41:1, 41:10, 41:13, 41:14, 41:18, 41:20, 41:21, 41:23, 41:24, 42:2, 42:4, 42:7, 42:8, 42:9, 42:16, 42:17, 42:18, 42:19, 43:1, 43:4, 43:5, 43:6, 43:9, 43:15, 43:16, 43:26, 44:1, 44:8, 44:14, 44:16, 44:20, 44:21, 44:26, 44:31, 45:2, 45:10, 45:12, 45:16, 45:22, 45:24, 46:3, 46:8, 46:10, 46:15, 46:22, 46:23, 46:24, 47:6, 47:7, 47:11, 47:14, 47:20, 47:21, 47:23, 48:2, 48:3, 48:4, 48:5, 48:6, 48:7, 48:9, 48:17, 48:19, 48:23, 48:24, 48:25, 48:26, 48:27, 48:30, 48:32,48:34</p>
</div>
<div class="section" id="daniel">
<h2>Daniel</h2>
<p>1:1, 1:6, 1:9, 1:11, 1:12, 1:14, 1:16, 1:21, 2:1, 2:3, 2:7, 2:12, 2:13, 2:16, 2:17, 2:19, 2:20, 2:22, 2:32, 2:33, 2:36, 2:37, 2:39, 2:42, 3:4, 3:6, 3:8, 3:9, 3:11, 3:18, 3:23, 3:30, 4:1, 4:2, 4:4, 4:5, 4:11, 4:13, 4:16, 4:24, 4:28, 4:29, 5:1, 5:4, 5:6, 5:8, 5:9, 5:18, 5:22, 5:24, 5:25, 5:26, 5:27, 5:28, 5:30, 5:31, 6:1, 6:6, 6:9, 6:11, 6:18, 6:19, 6:21, 6:25, 6:28, 7:2, 7:3, 7:12, 7:15, 7:17, 7:18, 7:21, 7:26, 8:14, 8:16, 8:18, 8:20, 8:21, 9:1, 9:3, 9:5, 9:8, 9:9, 9:10, 9:22, 10:2, 10:3, 10:4, 10:5, 10:10, 10:14, 10:15, 10:17, 10:18, 11:1, 11:3, 11:9, 11:22, 11:23, 11:26, 11:29, 11:34, 11:42, 12:5, 12:8, 12:9, 12:12,12:13</p>
</div>
<div class="section" id="hosea">
<h2>Hosea</h2>
<p>1:3, 1:5, 1:8, 1:9, 2:1, 2:4, 2:6, 2:10, 2:11, 2:14, 2:16, 2:17, 2:19, 2:20, 2:21, 2:22, 3:2, 4:2, 4:4, 4:5, 4:7, 4:8, 4:9, 4:11, 4:16, 4:17, 4:18, 4:19, 5:2, 5:3, 5:4, 5:5, 5:6, 5:8, 5:9, 5:10, 5:11, 5:12, 5:15, 6:1, 6:2, 6:5, 6:6, 6:7, 6:8, 6:9, 6:10, 6:11, 7:2, 7:3, 7:5, 7:7, 7:8, 7:9, 7:10, 7:11, 7:15, 8:2, 8:3, 8:5, 8:6, 8:8, 8:9, 8:11, 8:12, 9:2, 9:3, 9:5, 9:8, 9:9, 9:11, 9:12, 9:13, 9:14, 9:17, 10:2, 10:3, 10:7, 10:15, 11:1, 11:2, 11:3, 11:5, 11:6, 11:7, 11:10, 12:2, 12:3, 12:4, 12:5, 12:6, 12:7, 12:8, 12:9, 12:10, 12:12, 12:13, 13:1, 13:4, 13:5, 13:6, 13:7, 13:9, 13:11, 13:12, 14:1, 14:4, 14:5,14:6</p>
</div>
<div class="section" id="joel">
<h2>Joel</h2>
<p>1:1, 1:3, 1:5, 1:8, 1:9, 1:10, 1:15, 1:16, 1:17, 1:18, 1:19, 2:4, 2:6, 2:7, 2:8, 2:9, 2:10, 2:12, 2:15, 2:18, 2:21, 2:24, 2:29, 2:30, 2:31, 3:1, 3:3, 3:5, 3:6, 3:7, 3:9, 3:10, 3:11, 3:13, 3:14, 3:15, 3:20,3:21</p>
</div>
<div class="section" id="amos">
<h2>Amos</h2>
<p>1:4, 1:7, 1:10, 1:12, 1:15, 2:3, 2:5, 2:12, 2:13, 2:14, 2:16, 3:2, 3:3, 3:4, 3:6, 3:7, 3:8, 3:10, 3:13, 4:3, 4:12, 5:1, 5:2, 5:4, 5:6, 5:7, 5:9, 5:10, 5:13, 5:14, 5:17, 5:18, 5:20, 5:21, 5:23, 5:24, 5:25, 5:26, 5:27, 6:3, 6:5, 6:6, 6:9, 6:11, 6:13, 7:2, 7:3, 7:5, 7:6, 7:7, 7:11, 7:12, 7:13, 7:15, 8:1, 8:4, 8:6, 8:7, 8:9, 8:13, 9:2, 9:10,9:12</p>
</div>
<div class="section" id="obadiah">
<h2>Obadiah</h2>
<p>1:2, 1:6, 1:8, 1:9, 1:10, 1:14,1:21</p>
</div>
<div class="section" id="jonah">
<h2>Jonah</h2>
<p>1:1, 1:2, 1:9, 1:15, 1:16, 1:17, 2:1, 2:4, 2:5, 2:7, 2:8, 2:9, 2:10, 3:1, 3:2, 3:4, 3:9, 4:1, 4:3, 4:4,4:7</p>
</div>
<div class="section" id="micah">
<h2>Micah</h2>
<p>1:3, 1:9, 1:10, 1:12, 1:15, 2:2, 2:5, 2:6, 2:9, 2:10, 3:1, 3:2, 3:7, 3:10, 4:5, 4:9, 4:11, 5:1, 5:9, 5:10, 5:11, 5:12, 5:14, 5:15, 6:1, 6:3, 6:9, 6:10, 6:11, 6:12, 6:13, 7:5, 7:7, 7:8, 7:11, 7:13, 7:15, 7:16,7:20</p>
</div>
<div class="section" id="nahum">
<h2>Nahum</h2>
<p>1:1, 1:4, 1:5, 1:7, 1:8, 1:9, 1:10, 1:11, 1:13, 2:1, 2:5, 2:6, 2:7, 2:8, 2:9, 2:10, 3:1, 3:2, 3:6, 3:8, 3:9, 3:11, 3:12, 3:13, 3:14,3:16</p>
</div>
<div class="section" id="habakkuk">
<h2>Habakkuk</h2>
<p>1:1, 1:2, 1:7, 1:9, 1:10, 1:11, 1:14, 1:16, 1:17, 2:2, 2:4, 2:7, 2:9, 2:10, 2:11, 2:12, 2:13, 2:14, 2:15, 2:20, 3:1, 3:4, 3:5, 3:7, 3:9, 3:10, 3:11, 3:12, 3:15,3:18</p>
</div>
<div class="section" id="zephaniah">
<h2>Zephaniah</h2>
<p>1:2, 1:6, 1:11, 1:16, 2:1, 2:6, 2:12, 3:1, 3:2, 3:3, 3:4, 3:10, 3:12, 3:14, 3:16,3:18</p>
</div>
<div class="section" id="haggai">
<h2>Haggai</h2>
<p>1:2, 1:3, 1:4, 1:5, 1:7, 1:10, 1:13, 1:15, 2:1, 2:3, 2:5, 2:8, 2:10, 2:11, 2:15, 2:20,2:21</p>
</div>
<div class="section" id="zechariah">
<h2>Zechariah</h2>
<p>1:2, 1:5, 1:9, 1:10, 1:13, 1:18, 1:20, 2:1, 2:3, 2:5, 2:7, 2:10, 2:12, 2:13, 3:3, 3:6, 4:1, 4:3, 4:4, 4:5, 4:8, 4:11, 4:13, 4:14, 5:1, 5:5, 5:7, 5:8, 5:10, 6:2, 6:3, 6:4, 6:8, 6:9, 6:11, 6:14, 7:2, 7:4, 7:6, 7:8, 7:9, 7:11, 7:13, 8:1, 8:2, 8:5, 8:7, 8:11, 8:15, 8:18, 8:20, 8:22, 9:2, 9:3, 9:6, 9:11, 9:12, 10:8, 10:12, 11:1, 11:4, 11:8, 11:10, 11:11, 11:14, 11:15, 12:9, 12:11, 12:14, 13:5, 13:6, 13:8, 14:1, 14:3, 14:6, 14:9,14:19</p>
</div>
<div class="section" id="malachi">
<h2>Malachi</h2>
<p>1:1, 1:3, 1:5, 1:12, 2:1, 2:4, 3:4, 3:6, 3:8, 3:9, 3:12, 3:13, 3:15, 4:4,4:5</p>
</div>
<div class="section" id="matthew">
<h2>Matthew</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:10, 1:11, 1:12, 1:13, 1:14, 1:15, 1:16, 1:19, 1:21, 1:22, 1:23, 1:24, 1:25, 2:2, 2:3, 2:4, 2:5, 2:7, 2:10, 2:12, 2:14, 2:17, 2:19, 2:20, 2:21, 3:1, 3:2, 3:4, 3:5, 3:6, 3:8, 3:13, 3:14, 3:15, 3:17, 4:1, 4:2, 4:3, 4:4, 4:5, 4:7, 4:8, 4:9, 4:11, 4:12, 4:13, 4:14, 4:15, 4:17, 4:19, 4:20, 4:22, 4:25, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:7, 5:8, 5:9, 5:10, 5:11, 5:12, 5:14, 5:15, 5:17, 5:21, 5:23, 5:24, 5:26, 5:27, 5:28, 5:31, 5:34, 5:35, 5:36, 5:37, 5:38, 5:39, 5:40, 5:41, 5:42, 5:43, 5:44, 5:46, 5:47, 5:48, 6:3, 6:4, 6:8, 6:9, 6:10, 6:11, 6:12, 6:13, 6:14, 6:15, 6:17, 6:19, 6:21, 6:22, 6:27, 6:28, 6:29, 6:31, 6:32, 6:33, 7:1, 7:2, 7:3, 7:4, 7:7, 7:8, 7:9, 7:10, 7:12, 7:14, 7:15, 7:16, 7:17, 7:18, 7:19, 7:20, 7:23, 7:24, 7:26, 7:28, 7:29, 8:1, 8:2, 8:3, 8:5, 8:6, 8:7, 8:11, 8:14, 8:15, 8:17, 8:18, 8:19, 8:20, 8:21, 8:22, 8:23, 8:24, 8:25, 8:27, 8:29, 8:30, 8:31, 8:33, 8:34, 9:1, 9:3, 9:4, 9:5, 9:7, 9:8, 9:11, 9:12, 9:13, 9:14, 9:16, 9:19, 9:21, 9:23, 9:24, 9:25, 9:26, 9:27, 9:29, 9:30, 9:31, 9:32, 9:34, 9:36, 9:37, 9:38, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:12, 10:13, 10:15, 10:16, 10:17, 10:18, 10:20, 10:22, 10:24, 10:26, 10:27, 10:29, 10:30, 10:31, 10:32, 10:33, 10:34, 10:36, 10:38, 10:39, 10:40, 11:1, 11:2, 11:3, 11:4, 11:6, 11:8, 11:9, 11:10, 11:12, 11:13, 11:14, 11:15, 11:17, 11:18, 11:20, 11:22, 11:24, 11:26, 11:28, 11:29, 11:30, 12:2, 12:3, 12:5, 12:6, 12:7, 12:8, 12:9, 12:12, 12:13, 12:14, 12:15, 12:16, 12:17, 12:19, 12:20, 12:21, 12:22, 12:23, 12:24, 12:26, 12:27, 12:28, 12:30, 12:33, 12:34, 12:35, 12:36, 12:37, 12:38, 12:43, 12:46, 12:48, 12:49, 12:50, 13:1, 13:2, 13:3, 13:4, 13:6, 13:7, 13:8, 13:9, 13:10, 13:16, 13:18, 13:20, 13:25, 13:26, 13:28, 13:29, 13:34, 13:37, 13:38, 13:39, 13:40, 13:41, 13:42, 13:43, 13:45, 13:46, 13:47, 13:48, 13:49, 13:50, 13:51, 13:53, 13:56, 13:58, 14:1, 14:3, 14:4, 14:5, 14:6, 14:7, 14:8, 14:9, 14:10, 14:11, 14:12, 14:14, 14:16, 14:17, 14:18, 14:20, 14:21, 14:22, 14:23, 14:24, 14:25, 14:27, 14:28, 14:29, 14:30, 14:31, 14:32, 14:33, 14:34, 14:35, 14:36, 15:1, 15:2, 15:3, 15:4, 15:5, 15:6, 15:7, 15:8, 15:9, 15:10, 15:11, 15:12, 15:13, 15:14, 15:15, 15:16, 15:17, 15:18, 15:19, 15:20, 15:21, 15:24, 15:25, 15:26, 15:27, 15:29, 15:33, 15:34, 15:35, 15:37, 15:38, 15:39, 16:1, 16:2, 16:5, 16:6, 16:7, 16:9, 16:10, 16:14, 16:15, 16:16, 16:18, 16:20, 16:22, 16:24, 16:25, 17:1, 17:2, 17:3, 17:6, 17:7, 17:8, 17:10, 17:11, 17:13, 17:14, 17:16, 17:18, 17:19, 17:21, 17:22, 17:23, 17:26, 18:1, 18:2, 18:3, 18:4, 18:5, 18:11, 18:13, 18:14, 18:19, 18:20, 18:22, 18:23, 18:24, 18:26, 18:27, 18:29, 18:30, 18:32, 18:33, 18:34, 18:35, 19:1, 19:2, 19:3, 19:4, 19:5, 19:6, 19:7, 19:9, 19:10, 19:11, 19:13, 19:14, 19:15, 19:16, 19:19, 19:20, 19:22, 19:23, 19:25, 19:26, 19:27, 19:30, 20:1, 20:2, 20:3, 20:4, 20:5, 20:6, 20:7, 20:9, 20:10, 20:11, 20:13, 20:14, 20:15, 20:16, 20:17, 20:19, 20:20, 20:24, 20:26, 20:27, 20:28, 20:29, 20:31, 20:32, 20:33, 20:34, 21:1, 21:3, 21:4, 21:6, 21:7, 21:8, 21:10, 21:11, 21:13, 21:14, 21:17, 21:18, 21:20, 21:22, 21:26, 21:27, 21:28, 21:29, 21:30, 21:34, 21:35, 21:36, 21:37, 21:39, 21:40, 21:43, 21:44, 21:45, 21:46, 22:1, 22:2, 22:3, 22:5, 22:6, 22:7, 22:8, 22:9, 22:11, 22:12, 22:14, 22:15, 22:17, 22:18, 22:19, 22:20, 22:22, 22:23, 22:25, 22:26, 22:27, 22:28, 22:29, 22:30, 22:31, 22:32, 22:33, 22:34, 22:35, 22:36, 22:37, 22:38, 22:39, 22:40, 22:41, 22:42, 22:43, 22:44, 22:45, 22:46, 23:1, 23:2, 23:3, 23:5, 23:6, 23:7, 23:8, 23:9, 23:10, 23:11, 23:12, 23:14, 23:17, 23:19, 23:20, 23:21, 23:22, 23:24, 23:26, 23:28, 23:31, 23:32, 23:33, 23:36, 23:38, 23:39, 24:1, 24:4, 24:5, 24:6, 24:8, 24:9, 24:10, 24:11, 24:12, 24:13, 24:16, 24:17, 24:18, 24:19, 24:20, 24:23, 24:25, 24:27, 24:28, 24:33, 24:34, 24:35, 24:36, 24:37, 24:39, 24:40, 24:41, 24:42, 24:44, 24:46, 24:47, 24:48, 24:49, 24:50, 24:51, 25:1, 25:2, 25:3, 25:4, 25:5, 25:6, 25:7, 25:8, 25:11, 25:12, 25:13, 25:14, 25:15, 25:16, 25:17, 25:18, 25:19, 25:25, 25:28, 25:30, 25:31, 25:33, 25:35, 25:36, 25:37, 25:38, 25:39, 25:42, 25:43, 25:46, 26:1, 26:2, 26:3, 26:4, 26:5, 26:6, 26:8, 26:9, 26:10, 26:11, 26:12, 26:14, 26:15, 26:16, 26:19, 26:20, 26:21, 26:22, 26:23, 26:25, 26:27, 26:28, 26:30, 26:32, 26:33, 26:34, 26:35, 26:37, 26:38, 26:40, 26:41, 26:42, 26:43, 26:44, 26:46, 26:48, 26:49, 26:50, 26:52, 26:53, 26:54, 26:57, 26:59, 26:60, 26:61, 26:62, 26:66, 26:67, 26:68, 26:70, 26:72, 26:74, 27:1, 27:2, 27:4, 27:5, 27:7, 27:8, 27:10, 27:12, 27:13, 27:14, 27:15, 27:16, 27:18, 27:20, 27:21, 27:22, 27:23, 27:25, 27:26, 27:28, 27:30, 27:31, 27:32, 27:33, 27:34, 27:35, 27:36, 27:37, 27:38, 27:39, 27:41, 27:43, 27:44, 27:45, 27:47, 27:48, 27:49, 27:50, 27:51, 27:52, 27:53, 27:55, 27:56, 27:57, 27:58, 27:59, 27:61, 27:62, 27:63, 27:65, 27:66, 28:1, 28:3, 28:4, 28:5, 28:6, 28:8, 28:9, 28:10, 28:11, 28:12, 28:13, 28:14, 28:15, 28:16, 28:17, 28:18,28:20</p>
</div>
<div class="section" id="mark">
<h2>Mark</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:6, 1:8, 1:9, 1:10, 1:11, 1:12, 1:14, 1:15, 1:17, 1:18, 1:19, 1:20, 1:21, 1:22, 1:23, 1:24, 1:25, 1:26, 1:28, 1:29, 1:30, 1:31, 1:32, 1:33, 1:36, 1:37, 1:38, 1:39, 1:40, 1:41, 1:42, 1:43, 2:1, 2:2, 2:3, 2:5, 2:6, 2:7, 2:9, 2:10, 2:11, 2:13, 2:20, 2:23, 2:24, 2:25, 2:27, 2:28, 3:1, 3:2, 3:3, 3:4, 3:6, 3:7, 3:9, 3:10, 3:11, 3:12, 3:13, 3:14, 3:15, 3:16, 3:17, 3:19, 3:20, 3:21, 3:23, 3:24, 3:25, 3:26, 3:28, 3:29, 3:30, 3:31, 3:32, 3:33, 3:34, 3:35, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:9, 4:10, 4:11, 4:12, 4:13, 4:14, 4:16, 4:18, 4:21, 4:22, 4:23, 4:25, 4:26, 4:27, 4:28, 4:29, 4:30, 4:31, 4:33, 4:34, 4:35, 4:36, 4:37, 4:39, 4:40, 4:41, 5:1, 5:2, 5:3, 5:5, 5:6, 5:8, 5:9, 5:10, 5:11, 5:12, 5:14, 5:16, 5:17, 5:18, 5:20, 5:21, 5:22, 5:24, 5:25, 5:26, 5:27, 5:28, 5:29, 5:31, 5:32, 5:34, 5:36, 5:37, 5:38, 5:39, 5:41, 5:43, 6:1, 6:5, 6:6, 6:7, 6:8, 6:9, 6:10, 6:12, 6:13, 6:15, 6:16, 6:18, 6:19, 6:23, 6:24, 6:26, 6:27, 6:28, 6:29, 6:30, 6:32, 6:33, 6:35, 6:36, 6:38, 6:39, 6:40, 6:42, 6:43, 6:44, 6:46, 6:47, 6:49, 6:50, 6:51, 6:52, 6:53, 6:54, 6:55, 7:1, 7:2, 7:3, 7:7, 7:8, 7:9, 7:10, 7:12, 7:13, 7:14, 7:16, 7:17, 7:19, 7:20, 7:21, 7:22, 7:23, 7:26, 7:27, 7:28, 7:29, 7:30, 7:31, 7:32, 7:33, 7:34, 7:35, 7:36, 7:37, 8:2, 8:3, 8:4, 8:5, 8:7, 8:8, 8:9, 8:10, 8:11, 8:13, 8:14, 8:15, 8:16, 8:18, 8:20, 8:21, 8:22, 8:24, 8:25, 8:26, 8:28, 8:29, 8:30, 8:32, 8:35, 8:36, 8:37, 9:3, 9:4, 9:6, 9:7, 9:8, 9:10, 9:11, 9:13, 9:14, 9:15, 9:16, 9:17, 9:19, 9:21, 9:23, 9:24, 9:27, 9:28, 9:29, 9:30, 9:32, 9:33, 9:34, 9:36, 9:37, 9:39, 9:40, 9:44, 9:46, 9:48, 9:49, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:12, 10:13, 10:15, 10:16, 10:18, 10:20, 10:22, 10:25, 10:26, 10:27, 10:28, 10:31, 10:34, 10:36, 10:37, 10:40, 10:41, 10:43, 10:44, 10:45, 10:47, 10:48, 10:49, 10:50, 10:51, 11:1, 11:3, 11:4, 11:5, 11:6, 11:7, 11:8, 11:9, 11:10, 11:12, 11:14, 11:16, 11:19, 11:20, 11:21, 11:22, 11:24, 11:26, 11:28, 11:29, 11:30, 11:31, 11:32, 12:2, 12:3, 12:4, 12:5, 12:6, 12:7, 12:8, 12:9, 12:10, 12:11, 12:13, 12:15, 12:16, 12:18, 12:20, 12:21, 12:22, 12:23, 12:24, 12:25, 12:27, 12:29, 12:31, 12:32, 12:35, 12:37, 12:39, 12:40, 12:42, 13:3, 13:4, 13:5, 13:6, 13:7, 13:10, 13:13, 13:15, 13:16, 13:17, 13:18, 13:21, 13:22, 13:23, 13:24, 13:25, 13:26, 13:29, 13:30, 13:31, 13:32, 13:33, 13:36, 13:37, 14:2, 14:4, 14:5, 14:6, 14:7, 14:8, 14:9, 14:10, 14:11, 14:15, 14:16, 14:17, 14:19, 14:20, 14:22, 14:23, 14:24, 14:25, 14:26, 14:28, 14:29, 14:30, 14:31, 14:32, 14:33, 14:34, 14:35, 14:36, 14:37, 14:38, 14:39, 14:40, 14:42, 14:44, 14:45, 14:46, 14:47, 14:48, 14:49, 14:50, 14:51, 14:52, 14:53, 14:55, 14:56, 14:57, 14:59, 14:61, 14:63, 14:64, 14:66, 14:67, 14:69, 14:71, 15:2, 15:3, 15:4, 15:5, 15:6, 15:7, 15:8, 15:9, 15:10, 15:11, 15:12, 15:13, 15:14, 15:17, 15:18, 15:19, 15:22, 15:23, 15:24, 15:25, 15:26, 15:27, 15:28, 15:30, 15:31, 15:33, 15:35, 15:37, 15:38, 15:42, 15:45, 15:47, 16:2, 16:3, 16:4, 16:5, 16:7, 16:10, 16:11, 16:12, 16:13, 16:15, 16:16, 16:17, 16:19,16:20</p>
</div>
<div class="section" id="luke">
<h2>Luke</h2>
<p>1:1, 1:2, 1:4, 1:6, 1:7, 1:8, 1:9, 1:10, 1:11, 1:12, 1:14, 1:16, 1:18, 1:21, 1:23, 1:24, 1:25, 1:26, 1:27, 1:28, 1:29, 1:30, 1:31, 1:32, 1:33, 1:34, 1:37, 1:38, 1:39, 1:40, 1:41, 1:42, 1:43, 1:44, 1:45, 1:46, 1:47, 1:48, 1:49, 1:50, 1:51, 1:52, 1:53, 1:54, 1:55, 1:56, 1:57, 1:58, 1:59, 1:60, 1:61, 1:62, 1:63, 1:64, 1:65, 1:67, 1:68, 1:69, 1:70, 1:71, 1:72, 1:73, 1:74, 1:75, 1:76, 1:77, 1:78, 1:79, 1:80, 2:1, 2:2, 2:3, 2:5, 2:6, 2:8, 2:9, 2:10, 2:11, 2:12, 2:13, 2:14, 2:16, 2:17, 2:18, 2:19, 2:20, 2:23, 2:24, 2:26, 2:28, 2:29, 2:30, 2:31, 2:32, 2:33, 2:35, 2:40, 2:41, 2:42, 2:43, 2:45, 2:46, 2:47, 2:49, 2:50, 2:52, 3:2, 3:3, 3:6, 3:10, 3:11, 3:12, 3:13, 3:15, 3:18, 3:20, 3:21, 3:23, 3:24, 3:25, 3:26, 3:27, 3:28, 3:29, 3:30, 3:31, 3:32, 3:33, 3:34, 3:35, 3:36, 3:37, 3:38, 4:1, 4:2, 4:3, 4:4, 4:5, 4:7, 4:8, 4:10, 4:11, 4:12, 4:13, 4:14, 4:15, 4:17, 4:19, 4:21, 4:24, 4:26, 4:28, 4:30, 4:31, 4:32, 4:33, 4:34, 4:37, 4:39, 4:44, 5:1, 5:2, 5:4, 5:5, 5:6, 5:8, 5:9, 5:11, 5:13, 5:15, 5:16, 5:20, 5:22, 5:23, 5:25, 5:27, 5:28, 5:31, 5:32, 5:34, 5:35, 5:38, 5:39, 6:2, 6:3, 6:5, 6:6, 6:8, 6:9, 6:10, 6:11, 6:12, 6:13, 6:14, 6:15, 6:16, 6:18, 6:19, 6:20, 6:21, 6:23, 6:24, 6:25, 6:26, 6:27, 6:28, 6:30, 6:31, 6:32, 6:33, 6:36, 6:37, 6:39, 6:40, 6:41, 6:43, 6:44, 6:46, 6:47, 7:1, 7:2, 7:3, 7:4, 7:5, 7:7, 7:10, 7:11, 7:13, 7:14, 7:15, 7:16, 7:17, 7:18, 7:21, 7:23, 7:26, 7:27, 7:30, 7:31, 7:33, 7:35, 7:36, 7:40, 7:41, 7:42, 7:43, 7:45, 7:46, 7:47, 7:48, 7:49, 7:50, 8:3, 8:4, 8:6, 8:7, 8:9, 8:11, 8:17, 8:19, 8:20, 8:21, 8:23, 8:26, 8:30, 8:31, 8:34, 8:36, 8:38, 8:40, 8:42, 8:44, 8:46, 8:48, 8:50, 8:52, 8:53, 8:54, 8:55, 8:56, 9:1, 9:2, 9:3, 9:4, 9:5, 9:6, 9:8, 9:9, 9:10, 9:14, 9:15, 9:17, 9:18, 9:19, 9:20, 9:21, 9:23, 9:24, 9:25, 9:27, 9:28, 9:29, 9:30, 9:31, 9:34, 9:35, 9:37, 9:38, 9:40, 9:41, 9:44, 9:46, 9:47, 9:50, 9:51, 9:52, 9:53, 9:55, 9:56, 9:57, 9:58, 9:59, 9:60, 9:61, 9:62, 10:3, 10:4, 10:5, 10:6, 10:8, 10:9, 10:10, 10:12, 10:14, 10:15, 10:16, 10:17, 10:18, 10:20, 10:23, 10:25, 10:26, 10:28, 10:29, 10:31, 10:32, 10:33, 10:36, 10:37, 10:38, 10:39, 10:41, 10:42, 11:2, 11:3, 11:4, 11:5, 11:6, 11:9, 11:10, 11:11, 11:12, 11:14, 11:15, 11:16, 11:18, 11:19, 11:20, 11:21, 11:22, 11:23, 11:25, 11:28, 11:30, 11:33, 11:35, 11:37, 11:38, 11:40, 11:41, 11:43, 11:44, 11:45, 11:47, 11:48, 11:49, 11:50, 11:54, 12:2, 12:4, 12:5, 12:6, 12:7, 12:8, 12:9, 12:12, 12:13, 12:14, 12:16, 12:17, 12:19, 12:20, 12:21, 12:23, 12:25, 12:26, 12:29, 12:30, 12:31, 12:32, 12:34, 12:35, 12:38, 12:40, 12:41, 12:43, 12:44, 12:47, 12:49, 12:50, 12:51, 12:52, 12:54, 12:55, 12:57, 12:59, 13:1, 13:3, 13:5, 13:6, 13:8, 13:9, 13:10, 13:12, 13:13, 13:18, 13:20, 13:21, 13:22, 13:23, 13:24, 13:26, 13:27, 13:29, 13:30, 13:31, 14:1, 14:2, 14:3, 14:4, 14:6, 14:7, 14:11, 14:13, 14:14, 14:16, 14:17, 14:19, 14:20, 14:22, 14:24, 14:25, 14:27, 14:28, 14:29, 14:30, 14:32, 14:33, 14:34, 14:35, 15:1, 15:2, 15:3, 15:5, 15:10, 15:11, 15:14, 15:15, 15:16, 15:18, 15:19, 15:21, 15:23, 15:24, 15:25, 15:26, 15:28, 15:30, 15:31, 15:32, 16:4, 16:5, 16:6, 16:11, 16:12, 16:14, 16:17, 16:19, 16:20, 16:21, 16:22, 16:23, 16:27, 16:28, 16:29, 16:30, 17:1, 17:3, 17:4, 17:5, 17:9, 17:11, 17:12, 17:13, 17:14, 17:15, 17:16, 17:17, 17:18, 17:19, 17:21, 17:23, 17:24, 17:25, 17:26, 17:28, 17:29, 17:30, 17:32, 17:33, 17:34, 17:35, 17:36, 17:37, 18:1, 18:2, 18:3, 18:4, 18:5, 18:6, 18:7, 18:8, 18:9, 18:10, 18:12, 18:15, 18:17, 18:18, 18:19, 18:21, 18:23, 18:24, 18:25, 18:26, 18:27, 18:28, 18:30, 18:32, 18:33, 18:34, 18:35, 18:36, 18:37, 18:38, 18:40, 18:41, 18:42, 19:1, 19:2, 19:3, 19:4, 19:6, 19:7, 19:9, 19:10, 19:12, 19:13, 19:14, 19:16, 19:18, 19:19, 19:20, 19:21, 19:23, 19:24, 19:25, 19:26, 19:27, 19:28, 19:29, 19:31, 19:32, 19:33, 19:34, 19:35, 19:36, 19:38, 19:39, 19:40, 19:41, 19:45, 19:46, 19:48, 20:2, 20:3, 20:4, 20:5, 20:6, 20:7, 20:8, 20:11, 20:12, 20:13, 20:15, 20:16, 20:18, 20:21, 20:22, 20:23, 20:24, 20:25, 20:27, 20:29, 20:30, 20:31, 20:32, 20:33, 20:34, 20:36, 20:38, 20:39, 20:40, 20:41, 20:42, 20:43, 20:44, 20:45, 20:47, 21:1, 21:2, 21:3, 21:4, 21:5, 21:7, 21:10, 21:13, 21:14, 21:15, 21:16, 21:17, 21:18, 21:19, 21:20, 21:22, 21:26, 21:27, 21:28, 21:29, 21:30, 21:31, 21:32, 21:33, 21:35, 21:37, 21:38, 22:1, 22:2, 22:3, 22:4, 22:5, 22:6, 22:7, 22:8, 22:9, 22:12, 22:13, 22:14, 22:15, 22:16, 22:17, 22:18, 22:20, 22:21, 22:22, 22:23, 22:24, 22:26, 22:28, 22:29, 22:30, 22:31, 22:32, 22:33, 22:34, 22:38, 22:39, 22:40, 22:41, 22:42, 22:43, 22:44, 22:45, 22:46, 22:48, 22:49, 22:50, 22:51, 22:54, 22:55, 22:56, 22:57, 22:58, 22:62, 22:63, 22:64, 22:65, 22:67, 22:68, 22:69, 22:70, 22:71, 23:1, 23:3, 23:4, 23:5, 23:6, 23:9, 23:10, 23:12, 23:13, 23:15, 23:16, 23:17, 23:18, 23:19, 23:20, 23:21, 23:23, 23:24, 23:27, 23:28, 23:30, 23:31, 23:32, 23:34, 23:36, 23:37, 23:38, 23:39, 23:40, 23:41, 23:42, 23:43, 23:44, 23:45, 23:47, 23:49, 23:50, 23:51, 23:52, 23:53, 23:54, 23:55, 23:56, 24:1, 24:2, 24:3, 24:4, 24:6, 24:7, 24:8, 24:9, 24:11, 24:13, 24:14, 24:15, 24:16, 24:20, 24:22, 24:24, 24:25, 24:26, 24:27, 24:28, 24:30, 24:31, 24:34, 24:35, 24:36, 24:37, 24:38, 24:40, 24:41, 24:42, 24:43, 24:45, 24:46, 24:47, 24:48, 24:50, 24:51, 24:52,24:53</p>
</div>
<div class="section" id="john">
<h2>John</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:10, 1:11, 1:12, 1:13, 1:16, 1:17, 1:18, 1:19, 1:20, 1:21, 1:22, 1:23, 1:24, 1:25, 1:26, 1:27, 1:28, 1:29, 1:30, 1:31, 1:32, 1:34, 1:35, 1:36, 1:37, 1:40, 1:41, 1:43, 1:44, 1:46, 1:47, 1:49, 2:1, 2:2, 2:3, 2:4, 2:5, 2:6, 2:7, 2:8, 2:11, 2:12, 2:13, 2:14, 2:16, 2:17, 2:18, 2:19, 2:20, 2:21, 2:23, 2:24, 2:25, 3:1, 3:3, 3:4, 3:5, 3:6, 3:7, 3:9, 3:10, 3:12, 3:13, 3:14, 3:15, 3:16, 3:17, 3:20, 3:21, 3:22, 3:23, 3:24, 3:25, 3:27, 3:28, 3:30, 3:32, 3:33, 3:34, 3:35, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 4:11, 4:12, 4:13, 4:15, 4:16, 4:17, 4:18, 4:19, 4:20, 4:22, 4:24, 4:25, 4:26, 4:28, 4:29, 4:30, 4:31, 4:32, 4:33, 4:34, 4:37, 4:38, 4:39, 4:40, 4:41, 4:43, 4:44, 4:46, 4:48, 4:49, 4:50, 4:51, 4:52, 4:54, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:8, 5:9, 5:10, 5:11, 5:12, 5:13, 5:14, 5:15, 5:16, 5:17, 5:21, 5:22, 5:26, 5:27, 5:28, 5:31, 5:32, 5:33, 5:34, 5:35, 5:37, 5:38, 5:39, 5:40, 5:41, 5:42, 5:43, 5:44, 5:45, 5:46, 5:47, 6:1, 6:2, 6:3, 6:4, 6:6, 6:7, 6:8, 6:9, 6:12, 6:13, 6:14, 6:16, 6:17, 6:18, 6:20, 6:21, 6:23, 6:25, 6:28, 6:29, 6:30, 6:31, 6:33, 6:34, 6:36, 6:37, 6:38, 6:41, 6:43, 6:44, 6:46, 6:47, 6:48, 6:49, 6:50, 6:52, 6:54, 6:55, 6:56, 6:57, 6:58, 6:59, 6:60, 6:61, 6:62, 6:63, 6:65, 6:66, 6:67, 6:68, 6:69, 6:70, 6:71, 7:1, 7:2, 7:3, 7:4, 7:5, 7:6, 7:7, 7:8, 7:9, 7:10, 7:11, 7:13, 7:14, 7:15, 7:16, 7:19, 7:20, 7:21, 7:22, 7:24, 7:25, 7:27, 7:29, 7:30, 7:31, 7:32, 7:33, 7:34, 7:36, 7:37, 7:38, 7:40, 7:41, 7:43, 7:44, 7:45, 7:46, 7:47, 7:48, 7:49, 7:50, 7:51, 7:53, 8:1, 8:2, 8:3, 8:4, 8:5, 8:8, 8:10, 8:11, 8:13, 8:15, 8:16, 8:17, 8:18, 8:20, 8:22, 8:23, 8:24, 8:25, 8:27, 8:29, 8:30, 8:31, 8:32, 8:34, 8:35, 8:36, 8:37, 8:38, 8:40, 8:41, 8:43, 8:45, 8:46, 8:47, 8:48, 8:49, 8:50, 8:51, 8:53, 8:54, 8:56, 8:57, 8:58, 8:59, 9:1, 9:2, 9:3, 9:4, 9:5, 9:6, 9:7, 9:8, 9:9, 9:10, 9:12, 9:13, 9:14, 9:17, 9:19, 9:20, 9:21, 9:23, 9:25, 9:26, 9:28, 9:29, 9:30, 9:31, 9:32, 9:33, 9:34, 9:35, 9:36, 9:37, 9:38, 9:39, 9:40, 9:41, 10:2, 10:3, 10:4, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:11, 10:13, 10:14, 10:15, 10:17, 10:19, 10:20, 10:21, 10:22, 10:23, 10:25, 10:26, 10:27, 10:28, 10:29, 10:30, 10:31, 10:32, 10:34, 10:35, 10:37, 10:39, 10:40, 10:41, 10:42, 11:1, 11:2, 11:3, 11:5, 11:6, 11:7, 11:8, 11:10, 11:11, 11:12, 11:13, 11:14, 11:15, 11:16, 11:17, 11:18, 11:19, 11:20, 11:21, 11:22, 11:23, 11:24, 11:25, 11:26, 11:27, 11:28, 11:29, 11:30, 11:34, 11:35, 11:36, 11:37, 11:38, 11:40, 11:41, 11:43, 11:45, 11:46, 11:47, 11:49, 11:51, 11:52, 11:53, 12:1, 12:2, 12:4, 12:5, 12:7, 12:8, 12:10, 12:11, 12:12, 12:14, 12:15, 12:17, 12:18, 12:19, 12:20, 12:21, 12:22, 12:23, 12:25, 12:28, 12:29, 12:30, 12:31, 12:32, 12:33, 12:37, 12:39, 12:41, 12:43, 12:44, 12:45, 12:46, 12:48, 12:50, 13:2, 13:3, 13:4, 13:6, 13:7, 13:8, 13:9, 13:11, 13:13, 13:14, 13:15, 13:16, 13:17, 13:19, 13:20, 13:22, 13:23, 13:24, 13:25, 13:27, 13:28, 13:30, 13:31, 13:32, 13:34, 13:35, 13:37, 14:1, 14:2, 14:3, 14:4, 14:5, 14:6, 14:7, 14:8, 14:11, 14:13, 14:14, 14:15, 14:16, 14:18, 14:19, 14:20, 14:22, 14:24, 14:25, 14:29, 14:30, 14:31, 15:1, 15:3, 15:7, 15:8, 15:9, 15:10, 15:11, 15:12, 15:13, 15:14, 15:17, 15:18, 15:21, 15:22, 15:23, 15:25, 15:27, 16:1, 16:3, 16:5, 16:6, 16:8, 16:9, 16:10, 16:11, 16:12, 16:14, 16:15, 16:16, 16:18, 16:22, 16:24, 16:26, 16:27, 16:28, 16:29, 16:30, 16:31, 17:2, 17:3, 17:4, 17:5, 17:7, 17:9, 17:10, 17:13, 17:14, 17:15, 17:16, 17:17, 17:18, 17:19, 17:20, 17:22, 17:25, 18:2, 18:4, 18:5, 18:6, 18:7, 18:8, 18:9, 18:11, 18:12, 18:13, 18:14, 18:17, 18:19, 18:21, 18:23, 18:24, 18:27, 18:29, 18:30, 18:32, 18:33, 18:34, 18:35, 18:40, 19:1, 19:2, 19:3, 19:4, 19:5, 19:7, 19:8, 19:9, 19:14, 19:16, 19:17, 19:18, 19:19, 19:22, 19:25, 19:26, 19:27, 19:28, 19:29, 19:30, 19:32, 19:33, 19:34, 19:35, 19:36, 19:37, 19:40, 19:41, 19:42, 20:3, 20:4, 20:5, 20:6, 20:7, 20:8, 20:9, 20:10, 20:11, 20:12, 20:14, 20:16, 20:18, 20:20, 20:21, 20:22, 20:23, 20:24, 20:28, 20:29, 20:30, 21:1, 21:4, 21:5, 21:9, 21:10, 21:13, 21:14, 21:19, 21:21,21:22</p>
</div>
<div class="section" id="acts">
<h2>Acts</h2>
<p>1:1, 1:2, 1:5, 1:6, 1:7, 1:9, 1:10, 1:12, 1:15, 1:17, 1:21, 1:23, 1:24, 1:25, 1:26, 2:1, 2:2, 2:3, 2:4, 2:5, 2:7, 2:8, 2:9, 2:10, 2:11, 2:12, 2:13, 2:15, 2:16, 2:18, 2:19, 2:20, 2:21, 2:24, 2:25, 2:26, 2:27, 2:28, 2:31, 2:32, 2:34, 2:35, 2:39, 2:40, 2:41, 2:42, 2:43, 2:44, 2:45, 2:47, 3:1, 3:3, 3:4, 3:5, 3:7, 3:8, 3:9, 3:11, 3:14, 3:15, 3:17, 3:18, 3:19, 3:20, 3:23, 3:24, 3:26, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 4:9, 4:11, 4:12, 4:14, 4:15, 4:17, 4:18, 4:19, 4:20, 4:22, 4:23, 4:26, 4:28, 4:29, 4:30, 4:35, 4:36, 4:37, 5:1, 5:5, 5:6, 5:7, 5:8, 5:11, 5:13, 5:14, 5:17, 5:18, 5:19, 5:20, 5:22, 5:23, 5:25, 5:26, 5:27, 5:29, 5:30, 5:31, 5:32, 5:33, 5:35, 5:39, 5:40, 5:41, 5:42, 6:4, 6:6, 6:8, 6:10, 6:11, 6:13, 6:15, 7:1, 7:3, 7:7, 7:9, 7:11, 7:12, 7:13, 7:14, 7:15, 7:17, 7:18, 7:19, 7:20, 7:21, 7:22, 7:23, 7:24, 7:25, 7:27, 7:28, 7:29, 7:30, 7:31, 7:32, 7:33, 7:36, 7:37, 7:39, 7:41, 7:46, 7:47, 7:48, 7:50, 7:51, 7:53, 7:54, 7:55, 7:56, 7:57, 7:59, 8:2, 8:3, 8:4, 8:5, 8:6, 8:8, 8:10, 8:11, 8:14, 8:15, 8:16, 8:17, 8:18, 8:19, 8:20, 8:21, 8:23, 8:24, 8:28, 8:29, 8:30, 8:31, 8:33, 8:34, 8:35, 8:37, 8:38, 8:40, 9:1, 9:3, 9:4, 9:5, 9:6, 9:7, 9:9, 9:10, 9:12, 9:13, 9:14, 9:16, 9:18, 9:19, 9:20, 9:22, 9:23, 9:24, 9:25, 9:28, 9:29, 9:30, 9:32, 9:33, 9:34, 9:35, 9:37, 9:41, 9:42, 9:43, 10:1, 10:2, 10:3, 10:5, 10:6, 10:8, 10:10, 10:11, 10:12, 10:13, 10:14, 10:15, 10:16, 10:18, 10:19, 10:20, 10:21, 10:25, 10:26, 10:27, 10:29, 10:31, 10:32, 10:34, 10:35, 10:36, 10:37, 10:40, 10:43, 10:44, 10:46, 10:47, 10:48, 11:1, 11:2, 11:3, 11:4, 11:6, 11:7, 11:8, 11:9, 11:10, 11:11, 11:13, 11:14, 11:15, 11:16, 11:21, 11:22, 11:24, 11:25, 11:27, 11:29, 11:30, 12:1, 12:2, 12:3, 12:5, 12:13, 12:14, 12:15, 12:16, 12:18, 12:21, 12:22, 12:24, 13:3, 13:4, 13:5, 13:8, 13:9, 13:12, 13:13, 13:14, 13:16, 13:18, 13:19, 13:20, 13:21, 13:23, 13:24, 13:26, 13:28, 13:29, 13:30, 13:32, 13:35, 13:37, 13:39, 13:40, 13:42, 13:44, 13:45, 13:49, 13:51, 13:52, 14:2, 14:4, 14:5, 14:6, 14:7, 14:8, 14:9, 14:10, 14:12, 14:14, 14:16, 14:18, 14:24, 14:25, 14:26, 14:28, 15:6, 15:8, 15:9, 15:11, 15:13, 15:14, 15:15, 15:18, 15:19, 15:25, 15:26, 15:27, 15:28, 15:31, 15:32, 15:33, 15:34, 15:35, 15:37, 15:40, 15:41, 16:2, 16:5, 16:6, 16:7, 16:8, 16:11, 16:17, 16:20, 16:21, 16:22, 16:23, 16:24, 16:25, 16:28, 16:29, 16:30, 16:31, 16:32, 16:33, 16:35, 16:38, 16:39, 16:40, 17:1, 17:2, 17:7, 17:8, 17:9, 17:10, 17:12, 17:14, 17:16, 17:20, 17:22, 17:24, 17:30, 17:32, 17:33, 18:1, 18:3, 18:4, 18:9, 18:10, 18:11, 18:12, 18:13, 18:16, 18:19, 18:20, 18:21, 18:22, 18:24, 18:28, 19:3, 19:5, 19:6, 19:7, 19:8, 19:10, 19:11, 19:14, 19:15, 19:18, 19:20, 19:22, 19:23, 19:24, 19:28, 19:30, 19:31, 19:36, 19:37, 19:39, 19:41, 20:1, 20:2, 20:5, 20:8, 20:10, 20:11, 20:12, 20:14, 20:17, 20:19, 20:20, 20:21, 20:22, 20:23, 20:25, 20:26, 20:27, 20:29, 20:30, 20:31, 20:33, 20:34, 20:36, 20:37, 21:2, 21:6, 21:9, 21:10, 21:12, 21:14, 21:15, 21:17, 21:18, 21:19, 21:22, 21:23, 21:31, 21:35, 21:36, 21:39, 22:1, 22:2, 22:4, 22:6, 22:7, 22:8, 22:9, 22:12, 22:15, 22:16, 22:17, 22:18, 22:19, 22:21, 22:23, 22:27, 22:28, 23:2, 23:4, 23:7, 23:8, 23:12, 23:13, 23:16, 23:17, 23:19, 23:22, 23:24, 23:25, 23:26, 23:28, 23:29, 23:31, 23:32, 23:33, 23:34, 23:35, 24:3, 24:4, 24:6, 24:7, 24:8, 24:9, 24:11, 24:13, 24:15, 24:16, 24:17, 24:18, 24:19, 24:20, 24:26, 25:1, 25:2, 25:3, 25:4, 25:12, 25:13, 25:14, 25:18, 25:22, 25:27, 26:1, 26:4, 26:6, 26:8, 26:9, 26:12, 26:15, 26:17, 26:19, 26:21, 26:25, 26:27, 26:28, 26:30, 26:31, 26:32, 27:3, 27:4, 27:5, 27:6, 27:8, 27:9, 27:11, 27:14, 27:15, 27:16, 27:18, 27:19, 27:22, 27:23, 27:25, 27:26, 27:28, 27:29, 27:31, 27:32, 27:34, 27:35, 27:36, 27:37, 27:38, 27:42, 27:44, 28:1, 28:5, 28:9, 28:10, 28:12, 28:14, 28:16, 28:18, 28:19, 28:22, 28:24, 28:26, 28:28, 28:29, 28:30,28:31</p>
</div>
<div class="section" id="romans">
<h2>Romans</h2>
<p>1:1, 1:2, 1:3, 1:6, 1:8, 1:9, 1:10, 1:11, 1:12, 1:14, 1:15, 1:17, 1:19, 1:22, 1:23, 1:24, 1:28, 1:30, 1:31, 2:2, 2:6, 2:7, 2:8, 2:9, 2:10, 2:11, 2:13, 2:16, 2:17, 2:18, 2:19, 2:20, 2:21, 2:22, 2:23, 2:24, 2:25, 2:26, 2:28, 3:1, 3:2, 3:3, 3:6, 3:7, 3:8, 3:10, 3:11, 3:12, 3:13, 3:14, 3:15, 3:16, 3:17, 3:18, 3:20, 3:22, 3:23, 3:24, 3:27, 3:28, 3:29, 3:30, 3:31, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 4:14, 4:15, 4:20, 4:21, 4:22, 4:23, 4:24, 4:25, 5:1, 5:3, 5:4, 5:6, 5:7, 5:8, 5:9, 5:11, 5:13, 5:20, 6:1, 6:2, 6:3, 6:5, 6:7, 6:8, 6:9, 6:10, 6:11, 6:12, 6:14, 6:15, 6:18, 6:20, 6:21, 6:23, 7:9, 7:10, 7:11, 7:12, 7:14, 7:15, 7:16, 7:17, 7:19, 7:20, 7:21, 7:22, 7:24, 8:1, 8:2, 8:6, 8:7, 8:8, 8:10, 8:12, 8:14, 8:16, 8:18, 8:19, 8:20, 8:22, 8:24, 8:25, 8:28, 8:31, 8:32, 8:33, 8:36, 8:37, 8:38, 9:1, 9:2, 9:6, 9:7, 9:9, 9:10, 9:12, 9:13, 9:14, 9:15, 9:16, 9:18, 9:19, 9:20, 9:23, 9:24, 9:28, 9:31, 9:32, 10:1, 10:2, 10:4, 10:7, 10:8, 10:10, 10:11, 10:12, 10:13, 10:16, 10:17, 10:21, 11:3, 11:4, 11:5, 11:6, 11:7, 11:9, 11:10, 11:13, 11:14, 11:15, 11:16, 11:19, 11:21, 11:23, 11:27, 11:29, 11:30, 11:31, 11:32, 11:33, 11:34, 11:35, 11:36, 12:4, 12:5, 12:6, 12:7, 12:9, 12:10, 12:11, 12:12, 12:13, 12:14, 12:15, 12:16, 12:17, 12:18, 12:21, 13:2, 13:5, 13:6, 13:8, 13:10, 13:12, 13:14, 14:1, 14:2, 14:7, 14:9, 14:11, 14:12, 14:16, 14:17, 14:18, 14:19, 14:21, 15:1, 15:2, 15:3, 15:5, 15:6, 15:7, 15:10, 15:11, 15:12, 15:15, 15:17, 15:21, 15:22, 15:23, 15:25, 15:26, 15:29, 15:31, 15:32, 15:33, 16:1, 16:3, 16:4, 16:5, 16:6, 16:8, 16:9, 16:10, 16:11, 16:12, 16:13, 16:14, 16:15, 16:16, 16:20, 16:21, 16:22, 16:24,16:27</p>
</div>
<div class="section" id="corinthians">
<h2>1Corinthians</h2>
<p>1:1, 1:3, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:11, 1:13, 1:14, 1:15, 1:16, 1:18, 1:19, 1:22, 1:23, 1:24, 1:25, 1:27, 1:28, 1:29, 1:31, 2:1, 2:2, 2:3, 2:4, 2:5, 2:7, 2:8, 2:10, 2:15, 2:16, 3:1, 3:2, 3:4, 3:5, 3:6, 3:7, 3:8, 3:9, 3:11, 3:12, 3:14, 3:15, 3:16, 3:17, 3:19, 3:20, 3:21, 3:22, 3:23, 4:1, 4:2, 4:4, 4:11, 4:12, 4:13, 4:14, 4:16, 4:18, 4:20, 4:21, 5:2, 5:4, 5:6, 5:9, 5:12, 5:13, 6:1, 6:3, 6:4, 6:5, 6:6, 6:8, 6:10, 6:14, 6:17, 6:20, 7:1, 7:2, 7:3, 7:6, 7:7, 7:8, 7:9, 7:10, 7:13, 7:16, 7:19, 7:20, 7:23, 7:24, 7:26, 7:27, 7:33, 7:38, 7:40, 8:2, 8:3, 8:5, 8:8, 8:9, 8:11, 8:12, 8:13, 9:1, 9:2, 9:3, 9:4, 9:6, 9:8, 9:11, 9:14, 9:17, 9:19, 9:23, 9:24, 9:25, 9:26, 9:27, 10:1, 10:2, 10:3, 10:5, 10:6, 10:7, 10:8, 10:9, 10:10, 10:12, 10:14, 10:15, 10:17, 10:18, 10:19, 10:22, 10:23, 10:24, 10:25, 10:26, 10:29, 10:30, 10:31, 10:32, 11:1, 11:2, 11:4, 11:7, 11:8, 11:9, 11:10, 11:11, 11:12, 11:13, 11:14, 11:15, 11:16, 11:19, 11:20, 11:21, 11:24, 11:26, 11:28, 11:29, 11:30, 11:31, 11:32, 11:33, 12:1, 12:2, 12:4, 12:5, 12:6, 12:7, 12:9, 12:11, 12:14, 12:18, 12:19, 12:20, 12:21, 12:22, 12:25, 12:26, 12:27, 12:29, 12:30, 12:31, 13:1, 13:3, 13:4, 13:5, 13:6, 13:7, 13:9, 13:10, 13:13, 14:1, 14:3, 14:4, 14:8, 14:10, 14:12, 14:13, 14:14, 14:17, 14:18, 14:20, 14:24, 14:27, 14:28, 14:29, 14:30, 14:31, 14:32, 14:33, 14:36, 14:38, 14:39, 14:40, 15:1, 15:2, 15:4, 15:5, 15:7, 15:8, 15:9, 15:11, 15:13, 15:14, 15:16, 15:17, 15:18, 15:19, 15:20, 15:21, 15:22, 15:23, 15:25, 15:26, 15:30, 15:31, 15:33, 15:35, 15:36, 15:37, 15:38, 15:42, 15:43, 15:44, 15:45, 15:46, 15:47, 15:49, 15:51, 15:53, 15:55, 15:56, 15:57, 16:1, 16:3, 16:4, 16:5, 16:6, 16:7, 16:8, 16:9, 16:10, 16:13, 16:14, 16:16, 16:17, 16:18, 16:20, 16:21, 16:22, 16:23,16:24</p>
</div>
<div class="section" id="id4">
<h2>2Corinthians</h2>
<p>1:2, 1:3, 1:5, 1:7, 1:13, 1:15, 1:18, 1:21, 1:22, 1:23, 1:24, 2:1, 2:2, 2:6, 2:7, 2:8, 2:9, 2:11, 2:12, 2:15, 2:16, 3:1, 3:2, 3:4, 3:5, 3:8, 3:9, 3:10, 3:11, 3:12, 3:15, 3:16, 3:17, 4:1, 4:3, 4:5, 4:7, 4:8, 4:9, 4:10, 4:12, 4:14, 4:16, 4:17, 5:2, 5:3, 5:5, 5:6, 5:7, 5:8, 5:9, 5:13, 5:14, 5:17, 5:18, 5:21, 6:1, 6:3, 6:4, 6:5, 6:6, 6:7, 6:8, 6:9, 6:10, 6:11, 6:12, 6:13, 6:15, 6:18, 7:2, 7:3, 7:6, 7:10, 7:16, 8:1, 8:3, 8:4, 8:5, 8:6, 8:8, 8:12, 8:13, 8:15, 8:16, 8:17, 8:18, 8:20, 8:21, 8:24, 9:1, 9:7, 9:9, 9:11, 9:14, 9:15, 10:3, 10:4, 10:6, 10:9, 10:10, 10:11, 10:17, 10:18, 11:1, 11:2, 11:5, 11:8, 11:10, 11:11, 11:13, 11:14, 11:16, 11:17, 11:18, 11:19, 11:22, 11:24, 11:27, 11:28, 11:29, 11:30, 11:31, 11:32, 11:33, 12:1, 12:3, 12:4, 12:5, 12:8, 12:12, 12:15, 12:16, 12:17, 13:1, 13:3, 13:6, 13:8, 13:9, 13:12, 13:13,13:14</p>
</div>
<div class="section" id="galatians">
<h2>Galatians</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:7, 1:11, 1:12, 1:13, 1:15, 1:18, 1:19, 1:20, 1:21, 1:22, 1:23, 1:24, 2:1, 2:3, 2:5, 2:10, 2:11, 2:13, 2:15, 2:18, 2:19, 2:21, 3:1, 3:2, 3:3, 3:4, 3:5, 3:6, 3:7, 3:9, 3:11, 3:12, 3:15, 3:18, 3:20, 3:23, 3:24, 3:25, 3:26, 3:27, 3:29, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 4:10, 4:11, 4:12, 4:13, 4:16, 4:17, 4:18, 4:19, 4:20, 4:21, 4:22, 4:23, 4:25, 4:26, 4:28, 4:31, 5:1, 5:2, 5:3, 5:4, 5:5, 5:6, 5:7, 5:8, 5:9, 5:12, 5:14, 5:15, 5:16, 5:18, 5:19, 5:20, 5:22, 5:23, 5:24, 5:25, 5:26, 6:2, 6:3, 6:4, 6:5, 6:6, 6:7, 6:9, 6:10, 6:11, 6:15, 6:16, 6:17,6:18</p>
</div>
<div class="section" id="ephesians">
<h2>Ephesians</h2>
<p>1:1, 1:2, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:10, 1:12, 1:14, 1:15, 1:16, 1:19, 1:20, 1:22, 1:23, 2:1, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:13, 2:14, 2:16, 2:17, 2:18, 2:20, 2:21, 2:22, 3:1, 3:2, 3:3, 3:4, 3:7, 3:9, 3:11, 3:12, 3:13, 3:14, 3:15, 3:17, 3:18, 3:19, 3:20, 3:21, 4:1, 4:2, 4:3, 4:4, 4:5, 4:6, 4:7, 4:8, 4:9, 4:10, 4:11, 4:12, 4:15, 4:17, 4:19, 4:20, 4:21, 4:22, 4:23, 4:24, 4:26, 4:27, 4:30, 4:31, 4:32, 5:1, 5:2, 5:3, 5:4, 5:6, 5:7, 5:8, 5:9, 5:10, 5:11, 5:12, 5:13, 5:15, 5:16, 5:17, 5:18, 5:19, 5:20, 5:21, 5:22, 5:23, 5:24, 5:25, 5:26, 5:28, 5:29, 5:30, 5:31, 5:32, 5:33, 6:1, 6:2, 6:3, 6:4, 6:5, 6:6, 6:7, 6:8, 6:10, 6:11, 6:14, 6:15, 6:16, 6:17, 6:19, 6:20, 6:22, 6:23,6:24</p>
</div>
<div class="section" id="philippians">
<h2>Philippians</h2>
<p>1:2, 1:3, 1:4, 1:5, 1:6, 1:8, 1:9, 1:10, 1:11, 1:12, 1:13, 1:15, 1:16, 1:17, 1:19, 1:21, 1:22, 1:23, 1:24, 1:25, 1:26, 1:30, 2:2, 2:3, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:10, 2:11, 2:13, 2:14, 2:18, 2:19, 2:20, 2:21, 2:22, 2:23, 2:24, 2:26, 2:28, 2:29, 2:30, 3:1, 3:2, 3:6, 3:7, 3:10, 3:11, 3:14, 3:15, 3:16, 3:17, 3:18, 3:19, 3:20, 4:1, 4:2, 4:4, 4:5, 4:7, 4:9, 4:11, 4:13, 4:14, 4:16, 4:17, 4:19, 4:20, 4:21, 4:22,4:23</p>
</div>
<div class="section" id="colossians">
<h2>Colossians</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:7, 1:8, 1:11, 1:12, 1:13, 1:14, 1:15, 1:17, 1:19, 1:20, 1:21, 1:26, 1:28, 1:29, 2:3, 2:4, 2:6, 2:7, 2:9, 2:10, 2:14, 2:15, 2:17, 2:21, 2:22, 3:1, 3:2, 3:3, 3:4, 3:6, 3:7, 3:8, 3:9, 3:10, 3:12, 3:14, 3:15, 3:18, 3:19, 3:20, 3:21, 3:23, 3:24, 3:25, 4:1, 4:2, 4:4, 4:5, 4:6, 4:8, 4:13, 4:14, 4:15, 4:17,4:18</p>
</div>
<div class="section" id="thessalonians">
<h2>1Thessalonians</h2>
<p>1:2, 1:4, 1:7, 1:10, 2:1, 2:3, 2:5, 2:7, 2:10, 2:11, 2:15, 2:18, 2:19, 2:20, 3:1, 3:3, 3:7, 3:8, 3:9, 3:10, 3:11, 3:12, 4:2, 4:3, 4:4, 4:5, 4:7, 4:8, 4:11, 4:12, 4:18, 5:1, 5:2, 5:4, 5:5, 5:6, 5:7, 5:9, 5:10, 5:11, 5:12, 5:13, 5:14, 5:15, 5:16, 5:17, 5:18, 5:19, 5:20, 5:21, 5:22, 5:24, 5:25, 5:26, 5:27,5:28</p>
</div>
<div class="section" id="id5">
<h2>2Thessalonians</h2>
<p>1:1, 1:2, 1:6, 2:1, 2:5, 2:6, 2:7, 2:9, 2:10, 2:11, 2:12, 2:14, 2:17, 3:1, 3:2, 3:3, 3:4, 3:5, 3:7, 3:9, 3:10, 3:11, 3:13, 3:15, 3:16,3:18</p>
</div>
<div class="section" id="timothy">
<h2>1Timothy</h2>
<p>1:1, 1:2, 1:5, 1:6, 1:8, 1:11, 1:12, 1:14, 1:17, 1:19, 1:20, 2:1, 2:2, 2:3, 2:4, 2:5, 2:6, 2:8, 2:10, 2:11, 2:12, 2:13, 2:14, 2:15, 3:1, 3:3, 3:4, 3:5, 3:6, 3:7, 3:8, 3:9, 3:10, 3:11, 3:12, 3:14, 4:2, 4:4, 4:5, 4:7, 4:9, 4:11, 4:13, 4:14, 4:15, 5:1, 5:2, 5:3, 5:5, 5:6, 5:7, 5:9, 5:11, 5:12, 5:15, 5:17, 5:18, 5:19, 5:20, 5:22, 5:23, 5:24, 5:25, 6:6, 6:7, 6:8, 6:11, 6:14, 6:15, 6:18,6:21</p>
</div>
<div class="section" id="id6">
<h2>2Timothy</h2>
<p>1:1, 1:2, 1:4, 1:6, 1:7, 1:11, 1:13, 1:14, 1:15, 1:16, 1:17, 1:18, 2:1, 2:3, 2:4, 2:5, 2:6, 2:7, 2:8, 2:9, 2:11, 2:12, 2:13, 2:16, 2:17, 2:18, 2:23, 2:24, 2:25, 2:26, 3:1, 3:3, 3:4, 3:5, 3:7, 3:9, 3:10, 3:12, 3:13, 3:14, 3:17, 4:2, 4:4, 4:5, 4:6, 4:7, 4:9, 4:11, 4:12, 4:13, 4:14, 4:15, 4:16, 4:19, 4:20,4:22</p>
</div>
<div class="section" id="titus">
<h2>Titus</h2>
<p>1:2, 1:4, 1:8, 1:10, 1:11, 1:12, 1:13, 1:14, 1:16, 2:1, 2:2, 2:3, 2:4, 2:6, 2:7, 2:8, 2:9, 2:10, 2:11, 2:13, 2:15, 3:1, 3:2, 3:4, 3:6, 3:7, 3:9, 3:10, 3:11, 3:12, 3:13, 3:14,3:15</p>
</div>
<div class="section" id="philemon">
<h2>Philemon</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:8, 1:9, 1:10, 1:11, 1:12, 1:15, 1:17, 1:18, 1:19, 1:20, 1:21, 1:22, 1:23, 1:24,1:25</p>
</div>
<div class="section" id="hebrews">
<h2>Hebrews</h2>
<p>1:1, 1:4, 1:6, 1:7, 1:8, 1:10, 1:11, 1:13, 1:14, 2:1, 2:5, 2:6, 2:7, 2:11, 2:12, 2:13, 2:15, 2:16, 2:18, 3:1, 3:2, 3:4, 3:5, 3:7, 3:8, 3:9, 3:11, 3:12, 3:14, 3:15, 3:16, 3:17, 3:18, 3:19, 4:4, 4:5, 4:8, 4:9, 4:10, 4:11, 4:13, 5:2, 5:3, 5:4, 5:6, 5:8, 5:9, 5:10, 5:11, 5:13, 6:2, 6:3, 6:5, 6:6, 6:8, 6:9, 6:11, 6:12, 6:13, 6:14, 6:15, 6:16, 6:19, 6:20, 7:4, 7:6, 7:7, 7:8, 7:9, 7:10, 7:12, 7:13, 7:14, 7:15, 7:17, 7:18, 7:19, 7:20, 7:22, 7:23, 7:24, 8:2, 8:4, 8:7, 8:12, 9:1, 9:3, 9:5, 9:6, 9:10, 9:16, 9:17, 9:18, 9:20, 9:21, 9:25, 9:27, 10:3, 10:4, 10:6, 10:7, 10:9, 10:10, 10:11, 10:12, 10:13, 10:14, 10:15, 10:17, 10:18, 10:19, 10:20, 10:21, 10:23, 10:24, 10:27, 10:28, 10:30, 10:31, 10:32, 10:33, 10:35, 10:36, 10:37, 10:38, 10:39, 11:1, 11:2, 11:10, 11:14, 11:15, 11:18, 11:19, 11:20, 11:21, 11:24, 11:25, 11:26, 11:27, 11:28, 11:30, 11:33, 11:36, 11:38, 11:39, 11:40, 12:3, 12:4, 12:6, 12:8, 12:12, 12:13, 12:14, 12:16, 12:18, 12:19, 12:20, 12:21, 12:24, 12:29, 13:1, 13:2, 13:6, 13:8, 13:10, 13:12, 13:13, 13:14, 13:16, 13:18, 13:19, 13:22, 13:23, 13:24,13:25</p>
</div>
<div class="section" id="james">
<h2>James</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:7, 1:8, 1:9, 1:10, 1:14, 1:15, 1:16, 1:18, 1:19, 1:20, 1:22, 1:23, 1:24, 1:26, 2:1, 2:2, 2:4, 2:6, 2:7, 2:8, 2:9, 2:10, 2:12, 2:13, 2:14, 2:15, 2:17, 2:19, 2:20, 2:21, 2:22, 2:24, 2:26, 3:1, 3:3, 3:5, 3:7, 3:8, 3:9, 3:10, 3:11, 3:12, 3:13, 3:14, 3:15, 3:16, 3:18, 4:1, 4:3, 4:6, 4:7, 4:8, 4:9, 4:10, 4:12, 4:15, 4:16, 4:17, 5:1, 5:2, 5:5, 5:6, 5:8, 5:9, 5:10, 5:13, 5:18,5:19</p>
</div>
<div class="section" id="peter">
<h2>1Peter</h2>
<p>1:4, 1:5, 1:6, 1:9, 1:10, 1:14, 1:15, 1:16, 1:19, 1:20, 1:23, 1:24, 1:25, 2:1, 2:2, 2:3, 2:4, 2:8, 2:10, 2:11, 2:13, 2:14, 2:15, 2:16, 2:17, 2:18, 2:19, 2:22, 2:25, 3:2, 3:3, 3:5, 3:8, 3:10, 3:11, 3:13, 3:14, 3:17, 3:19, 3:22, 4:2, 4:4, 4:5, 4:7, 4:8, 4:9, 4:10, 4:13, 4:14, 4:15, 4:16, 4:18, 4:19, 5:3, 5:4, 5:6, 5:7, 5:8, 5:11, 5:13,5:14</p>
</div>
<div class="section" id="id7">
<h2>2Peter</h2>
<p>1:2, 1:5, 1:6, 1:7, 1:13, 1:14, 1:15, 1:18, 1:20, 1:21, 2:2, 2:7, 2:11, 2:16, 2:17, 3:3, 3:6, 3:11, 3:13,3:14</p>
</div>
<div class="section" id="id8">
<h2>1John</h2>
<p>1:4, 1:5, 1:6, 1:8, 1:9, 1:10, 2:2, 2:3, 2:4, 2:5, 2:6, 2:9, 2:10, 2:12, 2:15, 2:17, 2:20, 2:21, 2:22, 2:23, 2:25, 2:26, 2:29, 3:3, 3:4, 3:5, 3:6, 3:7, 3:11, 3:13, 3:14, 3:15, 3:16, 3:18, 3:19, 3:20, 3:21, 3:22, 4:2, 4:4, 4:5, 4:7, 4:8, 4:10, 4:11, 4:12, 4:13, 4:14, 4:15, 4:19, 4:21, 5:2, 5:3, 5:4, 5:5, 5:7, 5:8, 5:11, 5:12, 5:13, 5:14, 5:15, 5:17, 5:19,5:21</p>
</div>
<div class="section" id="id9">
<h2>2John</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:8, 1:10, 1:11,1:13</p>
</div>
<div class="section" id="id10">
<h2>3John</h2>
<p>1:1, 1:2, 1:3, 1:4, 1:5, 1:6, 1:7, 1:8, 1:9, 1:11, 1:13,1:14</p>
</div>
<div class="section" id="jude">
<h2>Jude</h2>
<p>1:2, 1:17, 1:18, 1:19, 1:20, 1:21, 1:22, 1:23,1:24</p>
</div>
<div class="section" id="revelation">
<h2>Revelation</h2>
<p>1:2, 1:6, 1:8, 1:10, 1:12, 1:14, 1:15, 1:18, 1:19, 2:3, 2:4, 2:6, 2:8, 2:12, 2:15, 2:16, 2:19, 2:21, 2:25, 2:26, 2:28, 2:29, 3:2, 3:6, 3:11, 3:13, 3:15, 3:16, 3:19, 3:22, 4:2, 5:2, 5:3, 5:4, 5:7, 5:10, 5:14, 6:3, 6:7, 6:13, 6:14, 6:17, 7:3, 7:4, 7:5, 7:6, 7:7, 7:8, 7:10, 7:13, 7:16, 8:1, 8:2, 8:4, 8:6, 8:9, 9:3, 9:6, 9:8, 9:10, 9:12, 9:13, 9:14, 9:16, 9:18, 9:21, 10:2, 10:3, 10:5, 10:11, 11:3, 11:4, 11:14, 11:16, 12:2, 12:7, 12:8, 12:15, 13:9, 13:11, 13:13, 13:17, 14:5, 14:12, 14:16, 14:17, 15:5, 16:4, 16:6, 16:7, 16:8, 16:11, 16:16, 16:20, 17:5, 17:9, 17:11, 17:13, 17:18, 18:5, 18:11, 18:18, 18:20, 18:24, 19:3, 19:5, 19:13, 19:14, 19:16, 20:1, 20:2, 20:5, 20:7, 20:14, 20:15, 21:2, 21:7, 21:11, 21:13, 21:14, 21:15, 21:17, 21:18, 21:22, 21:23, 21:24, 21:25, 21:26, 22:1, 22:4, 22:7, 22:10, 22:12, 22:13, 22:20,22:21</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>I hate your code</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/06/i-hate-your-code"/>
            <updated>2013-06-21T10:25:00Z</updated>
            <published>2013-06-21T10:25:00Z</published>
            <id>http://honza.ca/2013/06/i-hate-your-code</id>

            <content type="html">
                <div class="section" id="i-hate-your-code">
<h1>I hate yourcode</h1>
<p>When starting to work on an existing codebase, I often find myself in a state
of despair.  The code doesn&#8217;t make any sense, the programmers must have all
been idiots, why <em>on earth</em> would they do it like this, &#8230;  I hate everything
about thecode.</p>
<p>I spend hours going through it, thinking to myself, <em>I would have done a much
better job writing this</em> and making a list of changes that <em>must</em> be done in
order for the project to conform to mystandards.</p>
<p>But then, when I have spent enough time reading everything, something clicks in
my mind.  I see what the authors were trying to do and everything makes sense.
It&#8217;s actually kind ofclever.</p>
<p>And I feel dumb.  Everytime.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Who are the weak Christians</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/06/who-are-the-weak-christians"/>
            <updated>2013-06-13T11:34:00Z</updated>
            <published>2013-06-13T11:34:00Z</published>
            <id>http://honza.ca/2013/06/who-are-the-weak-christians</id>

            <content type="html">
                <div class="section" id="who-are-the-weak-christians">
<h1>Who are the weakChristians?</h1>
<p>When you look around you while sitting in a church service, you will generally
have a sense of who is who.  You know who the nice people are, who the grumps
are and who always causes trouble.  You know the people who always ask silly
questions, and you know the people that always seem to know what to say when
you are helpless.  You might have an idea of who is a strong Christian and who
has ways togo.</p>
<p>We alldo.</p>
<p>What does the Bible say about strong and weak Christians?  In Romans 14, Paul
gives us an answer to this question.  If you are anything like me, his answer
might surpriseyou:</p>
<blockquote>
As for the one who is weak in faith, welcome him, but not to quarrel over
opinions. One person believes he may eat anything, while the weak person
eats only vegetables. (Romans 14:1-2, <span class="caps">ESV</span>)</blockquote>
<p>Paul is saying here that the weaker Christian is the kind of person who has
lesser freedom in Christ.  They think that those who eat meat aren&#8217;t real
Christians and they need to learn.  They are bound by their conscience to obey
additional rules to honor theLord.</p>
<p>This is very interesting because our natural inclination is to see those with a
zeal for good, Christian rules as more mature in the faith.  If you are
exhorting others to do this and stop doing that, you are more likely to be
viewed as a mature Christian.  However, the Bible says that the opposite is
true.  Strong Christians have a greater freedom in the gospel than their weaker
brothers.  Their conscience doesn&#8217;t prevent them from doing certain things.
Their legalistic tendencies areminimal.</p>
<p>A great example before you go: in Acts 10, Peter is told to eat unclean
animals.  These animals were unclean according to the law which was now
fulfilled inJesus.</p>
<blockquote>
But Peter said, &#8220;By no means, Lord; for I have never eaten anything that is
common or unclean.&#8221; (Acts 10:14, <span class="caps">ESV</span>)</blockquote>
<p>Peter&#8217;s conscience is weak and needs to be redeemed by the Holy Spirit.  This
is a great example of a weak person becoming stronger in thefaith.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Text editor UI</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/05/text-editor-ui"/>
            <updated>2013-05-24T21:30:00Z</updated>
            <published>2013-05-24T21:30:00Z</published>
            <id>http://honza.ca/2013/05/text-editor-ui</id>

            <content type="html">
                <div class="section" id="text-editor-ui">
<h1>Text editor<span class="caps">UI</span></h1>
<blockquote>
What I don&#8217;t understand is: why should you ever care how your editor looks,
unless you&#8217;re trying to win a screenshot competition?  The primary factor
in looking good should be the choice of a good font at a comfortable size,
and a syntax coloring theme that you like.  And that is not something
specific to an editor.  Editors like Emacs and vi have almost no <span class="caps">UI</span>!  If
Emacs is configured right, the only <span class="caps">UI</span> it has is the modeline and the
minibuffer.</blockquote>
<p>Vivek Haldar in <a class="reference external" href="http://blog.vivekhaldar.com/post/31970017734/new-frontiers-in-text-editing">New Frontiers In TextEditing</a></p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Google plus adoption</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/05/google-plus-adoption"/>
            <updated>2013-05-21T14:20:00Z</updated>
            <published>2013-05-21T14:20:00Z</published>
            <id>http://honza.ca/2013/05/google-plus-adoption</id>

            <content type="html">
                <div class="section" id="google-plus-adoption">
<h1>Google plusadoption</h1>
<p>Google+ has been the target of numerous jokes in the tech community.  Many
blogs claim that adoption has been minimal and that the product isn&#8217;t appealing
to common users over alternatives such asFacebook.</p>
<p>I have noticed quite the opposite is true.  Many of my extended family in the
Czech Republic have somewhat recently acquired new Android devices.  One by
one, they have added me to their circles on Google+.  My stream is now full of
pictures that my parents, aunts and uncles took with their phones.  Google
uploads those pictures as soon as you take them and reminds you to share them.
This interface is so simple that even the average joe can share their contentonline.</p>
<p>The way I see it, Google is doing somethingright.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Building a Lisp to Javascript compiler</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/05/building-a-lisp-to-javascript-compiler"/>
            <updated>2013-05-13T07:14:00Z</updated>
            <published>2013-05-13T07:14:00Z</published>
            <id>http://honza.ca/2013/05/building-a-lisp-to-javascript-compiler</id>

            <content type="html">
                <div class="section" id="building-a-lisp-to-javascript-compiler">
<h1>Building a Lisp to Javascriptcompiler</h1>
<p>In this post, I&#8217;m going to show you how I made a Lisp to Javascript compiler. I
really enjoy programming in Clojure but have often thought that the <span class="caps">JVM</span> isn&#8217;t
always the best platform for scripts due to the slow <span class="caps">JVM</span> start-up. So, I
decided to implement a simple version of Clojure that compiles to Javascript
and can be run on top ofnodejs.</p>
<p>Compilers are notoriously hard to understand and therefore make for great
mind-bending exercises.  Exactly my idea of weekendfun.</p>
<div class="section" id="what-we-are-going-to-do">
<h2>What we are going todo</h2>
<p>There are tons of Lisp to Javascript compilers out there.  What makes mine
special?  I&#8217;m using a <span class="caps">PEG</span> grammar to parse the source code.  Once it&#8217;s parsed,
I turn the result into a <a class="reference external" href="https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API">Parser <span class="caps">API</span></a> compatible <span class="caps">AST</span>.  The <span class="caps">AST</span> is then passed
to <a class="reference external" href="https://github.com/Constellation/escodegen">escodegen</a> which turns it into well-formattedJavascript.</p>
<p>This is great because I don&#8217;t have to worry about the particulars of Javascript
syntax.  Escodegen takes care of inserting semicolons where appropriate, etc.
and everything looks clean and consistent.  It&#8217;s nice because the parsing is
decoupled from the source code emission.  You can completely remove the
Javascript generation part and use some other software to dothat.</p>
</div>
<div class="section" id="lisp-basics">
<h2>Lispbasics</h2>
<p>If you are familiar with Lisp, you can skip thissection.</p>
<p>Lisp source code is made up of s-expressions.  An s-expression is a list whose
first element is a function and the rest are the arguments to thatfunction.</p>
<div class="highlight"><pre><span class="p">(</span><span class="nf">greet</span> <span class="s">&quot;honza&quot;</span><span class="p">)</span>
</pre></div>
<p>This is a list with two items.  <tt class="docutils literal">greet</tt> is the name of the function and
<tt class="docutils literal">&#8220;honza&#8221;</tt> is the argument.  In other languages, this might be represented as
<tt class="docutils literal"><span class="pre">greet(&#8220;honza&#8221;)</span></tt>.</p>
<p>Lisp uses s-expressions for everything, including function definitions, if
statements, assignments, binary expressions,etc.</p>
<div class="highlight"><pre><span class="p">(</span><span class="k">def </span><span class="nb">name </span><span class="s">&quot;honza&quot;</span><span class="p">)</span> <span class="c1">;; define a variable &quot;name&quot; and assign &quot;honza&quot; to it</span>
<span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>            <span class="c1">;; add 1 and 2 and return the result</span>

<span class="c1">;; If the name variable is equal to &quot;honza&quot;, print &quot;hey honza&quot;, otherwise,</span>
<span class="c1">;; just print &quot;hey stranger&quot;.</span>

<span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= name </span><span class="s">&quot;honza&quot;</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">print </span><span class="s">&quot;hey honza&quot;</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">print </span><span class="s">&quot;hey stranger&quot;</span><span class="p">))</span>

<span class="c1">;; Function definition; it takes one parameter called &quot;name&quot;.</span>

<span class="p">(</span><span class="k">def </span><span class="nv">greet</span>
  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">name</span><span class="p">]</span>
    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;hello&quot;</span> <span class="nv">name</span><span class="p">)))</span>
</pre></div>
<p>In Lisp, a function body can have multiple s-expression but only the last one
is returned.  There is no <tt class="docutils literal">return</tt> keyword in Lisp.  Binary operators and
things like the <tt class="docutils literal">if</tt> keyword are actually functions that returnvalues.</p>
</div>
<div class="section" id="the-mighty-peg">
<h2>The mighty<span class="caps">PEG</span></h2>
<p>Every <span class="caps">PEG</span> grammar starts with the <tt class="docutils literal">program</tt> directive.  This is where the
parser will startparsing.</p>
<pre class="literal-block">
program
  = s:sexp+ &quot;\n&quot;*  { return {
      type: 'Program',
      body: s
  };}
</pre>
<p>A Lisp program consists of one or more s-expressions, optionally followed by a
newline.  The list of one or more s-expressions is stored in the variable
<tt class="docutils literal">s</tt>.  We then return a Javascript object with two properties: <tt class="docutils literal">type</tt> and
<tt class="docutils literal">body</tt>.  Since we are at the top level, we return it as a type of
<tt class="docutils literal">Program</tt>, and our body will be made up of the matched s-expressions.  The
syntax is a little weird at first but you get used to it.  Fairly simplestuff.</p>
<p>If you tried to compile this grammar into a parser, it would fail because we
didn&#8217;t tell it what an s-expression lookslike.</p>
<pre class="literal-block">
sexp
  = _ a:atom _ { return a; }
  / _ l:list _ { return l; }
  / _ v:vector _ { return v; }
  / _ o:object _ { return o; }
</pre>
<p><span class="caps">OK</span>, so an s-expression is either an atom, a list, a vector or an object.  Each
of these can be preceded and followed by any amount of whitespace.  Cool,
that&#8217;s simple enough.  Except now we have to define what all those thingsare.</p>
<p>Let&#8217;s start with theatom:</p>
<pre class="literal-block">
atom
  = d:[0-9]+ _ { return {type: 'Literal', value: numberify(d)}; }
  / '&quot;' d:(!'&quot;' sourcechar)* '&quot;' _ { return {type: 'Literal', value: makeStr(d) }}
  / s:[-+/\*_&lt;&gt;=a-zA-Z\.!]+ _ { return {type: 'Identifier', name: s.join(&quot;&quot;)};}
</pre>
<p>So, an atom can be a list of one or more digits, a string or a valid
identifier.  In the digit directive, you will notice that we are assigning the
number to the <tt class="docutils literal">d</tt> variable.  This will contain a list of all of the matched
numbers.  We then concatenate them and parse them into an integer.  That&#8217;s what
the <tt class="docutils literal">numberify</tt> function does.  A number or a string is a literal value so we
return it as such.  An identifier is a variable name, so we return it as such,too.</p>
<p>Next up, vectors andobjects:</p>
<pre class="literal-block">
vector
  = &quot;[]&quot; { return {type: 'ArrayExpression', elements: []}; }
  / _ &quot;[&quot; _ a:atom+ _ &quot;]&quot; _ { return {type: 'ArrayExpression', elements: a};}
  / _ &quot;[&quot; _ o:object+ _ &quot;]&quot; _ { return {type: 'ArrayExpression', elements: o};}

object
  = &quot;{}&quot; { return {type: 'ObjectExpression', properties: []}; }
  / _ &quot;{&quot; _ a:atom+ _ &quot;}&quot; _ { return makeObject(a); }
</pre>
<p>Continuing in the same vein, a vector is either an empty array, an array with
at least one atom in it, or an array with at least one object init.</p>
<p>The <tt class="docutils literal">makeObject</tt> function will take a pair by pair from the array and take
the first item in the pair and turn it into an object key and set as its value
to the second item in the pair.  If the number of elements in the array isn&#8217;t
divisible by 2, it will yell atyou.</p>
<p>Next up, lists.  Now, lists are special because the first item is the name of a
function.  This gives us the opportunity to define some built-in functions that
would otherwise be really tricky todefine.</p>
<pre class="literal-block">
list
  = &quot;()&quot; { return []; }
  /  _ &quot;(&quot; _ s:sexp+ _ &quot;)&quot; _ {
    if (first(s).name === 'def') {
      return {
        type: 'VariableDeclaration',
        declarations: [{
          type: 'VariableDeclarator',
          id: s[1],
          init: s[2].expression? s[2].expression : s[2]
        }],
        kind: 'var'
      };
    }

    if (first(s).name === 'fn') {
      return {
        type: 'FunctionExpression',
        id: null,
        params: s[1].elements ? s[1].elements : s[1],
        body: {
          type: 'BlockStatement',
          body: init(rest(rest((s)))).concat(returnStatement(last(rest(s))))
        }
      };
    }

    if (Object.keys(builtins).indexOf(first(s).name) &gt; -1) {
      return builtins[first(s).name](rest(s));
    }

    return processCallExpression(s);

  }
</pre>
<p><span class="caps">OK</span>, there is quite a bit here, so let&#8217;s step through it.  A list canbe</p>
<ul class="simple">
<li>an emptylist</li>
<li>a list of at least ones-expression</li>
</ul>
<p>If it&#8217;s an empty list, we just return an empty array.  If it&#8217;s a list of
s-expressions, we check for other things.  We look at the first element and see
what its name is.  It can beeither:</p>
<ul class="simple">
<li><tt class="docutils literal">def</tt> - variabledeclaration</li>
<li><tt class="docutils literal">fn</tt> - an anonymousfunction</li>
<li>a built-in function (<tt class="docutils literal">if</tt>, <tt class="docutils literal">+</tt>, <tt class="docutils literal">list</tt>,etc.)</li>
<li>other function (userdefined)</li>
</ul>
<p>The only thing left is the definition ofwhitespace</p>
<pre class="literal-block">
_
  = [\n, ]*
</pre>
<p>Zero or more of the following characters: newline, comma andspace.</p>
</div>
<div class="section" id="obstacles">
<h2>Obstacles</h2>
<p>When converting the parsed source code to the Parser <span class="caps">API</span> tree, I hit a few
obstacles.  It turns out that Lisp and Javascript don&#8217;t map perfectly to each
other and therefore some post-processing isneeded.</p>
<div class="section" id="statement-vs-expression">
<h3>Statement vsexpression</h3>
<p>In Lisp, everything is an expression.  In Javascript, there are both
expressions and statements.  The hardest part is the fact that a function call
can be both a statement and an expression depending on how it&#8217;s used.  So you
can&#8217;t represent it the same way everytime.</p>
<p>I wrote a function that takes a list which represents an s-expression (the
first element is a function call, the rest are theparameters).</p>
<div class="highlight"><pre><span class="kd">function</span> <span class="nx">processCallExpression</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">callee</span> <span class="o">=</span> <span class="nx">first</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span>
      <span class="nx">args</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>

  <span class="nx">args</span> <span class="o">=</span> <span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">expression</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">expression</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;CallExpression&#39;</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">expression</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">s</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="nx">args</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;ExpressionStatement&#39;</span><span class="p">,</span>
    <span class="nx">expression</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;CallExpression&#39;</span><span class="p">,</span>
      <span class="nx">callee</span><span class="o">:</span> <span class="nx">callee</span><span class="p">,</span>
      <span class="s1">&#39;arguments&#39;</span><span class="o">:</span> <span class="nx">args</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="p">}</span>
</pre></div>
<p>This will check if any of the arguments passed to the function are also
function calls.  If it&#8217;s a nested function call, it&#8217;s placed in the <span class="caps">AST</span> as a
<tt class="docutils literal">CallExpression</tt>, otherwise it&#8217;s a <tt class="docutils literal">CallExpression</tt> inside a
<tt class="docutils literal">ExpressionStatement</tt>.  The <span class="caps">PEG</span> parser can&#8217;t detect this because it&#8217;s context
free - each node only knows aboutitself.</p>
</div>
<div class="section" id="implicit-return">
<h3>Implicitreturn</h3>
<p>In Lisp, the last s-expression in a function&#8217;s body is implicitly returned.
You don&#8217;t need to denote this with a return statement, it&#8217;s built-in.  Again,
we need to do some more processing.  If we are processing a function
declaration, we need to check its body and wrap the last expression in a
<tt class="docutils literal">ReturnStatement</tt>.</p>
</div>
<div class="section" id="if-is-an-expression-in-lisp">
<h3>If is an expression inLisp</h3>
<p>The if statement in Lisp is an expression, just like a function call or
anything else.  This means that the expression in any of the two branches is
effectively returned to the caller.  This means that we need to add an extra
wrapper around the statement and wrap each of the branch-expressions in a
returnstatement.</p>
<p>Likethis:</p>
<div class="highlight"><pre><span class="c1">// this</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">&quot;it&#39;s zero&quot;</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">&quot;it&#39;s more than zero&quot;</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// becomes</span>

<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">&quot;it&#39;s zero&quot;</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">&quot;it&#39;s more than zero&quot;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">})();</span>
</pre></div>
</div>
</div>
<div class="section" id="standard-library">
<h2>Standardlibrary</h2>
<p>A lisp would be no fun without some fun functional programming functions.  I
have started working on a standard library for our lisp.  It lives in a file
called <tt class="docutils literal">lib.js</tt>.  This file includes functions that are accessible from any
program that youwrite.</p>
<p>Forexample:</p>
<div class="highlight"><pre><span class="kd">function</span> <span class="nx">nth</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">list</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">first</span><span class="p">(</span><span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">nth</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<p>And muchmore.</p>
</div>
<div class="section" id="putting-it-all-together">
<h2>Putting it alltogether</h2>
<p>Here is how it all comestogether:</p>
<ol class="arabic simple">
<li>Use peg.js to compile the grammar into aparser</li>
<li>Take the parser and append to it the compilerprogram</li>
</ol>
<p>The compiler program is the command line utility that decides how your program
should be compiled, it parsers <span class="caps">CLI</span> flags, etc.  It can return the <span class="caps">AST</span> instead
of Javascript, it can uglify the resulting Javascript,etc.</p>
<p>You can use the result likeso</p>
<pre class="literal-block">
$ ./inertia sample.clj
</pre>
<p>And it will print the resulting Javascript to stdout.  What the compiler
program will also do is prepend the compiled Javascript with the standard
library.  It simply reads the standard library code from the <tt class="docutils literal">lib.js</tt> file
and prependsit.</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>This has certainly been a fun exercise for me.  You can check out the finished
product on <a class="reference external" href="https://github.com/honza/inertia">GitHub</a>.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Software Engineering Interviews</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/05/software-engineering-interviews"/>
            <updated>2013-05-09T15:35:00Z</updated>
            <published>2013-05-09T15:35:00Z</published>
            <id>http://honza.ca/2013/05/software-engineering-interviews</id>

            <content type="html">
                <div class="section" id="software-engineering-interviews">
<h1>Software EngineeringInterviews</h1>
<p>If you find yourself interviewing for a software engineering position today,
you can be 90 percent sure that you will be asked to solve some programmingpuzzles.</p>
<p>We’ve all been there.  You come to the office for an interview, spend a few
minutes talking about the job and you, and then the inevitable hits:
programming puzzles and quizzes.  You are asked to solve nonsensical,
irrelevant, theoretical problems on the spot while the interviewer waits.
These problems in no way represent the actual work for which you’reinterviewing.</p>
<p>How do you detect a palindrome?  What is the worst-case performance of the
quicksort algorithm?  How do you find depth of a binary tree?  These are all
utter nonsense.  If your cutting-edge application needs to detect palindromes,
I’m pretty sure you have bigger problems than you think.  All of these can be
easily solved after a few minutes of research on theInternet.</p>
<p>I get especially annoyed at these things because my mind doesn’t work well in
this area.  I don’t like to solve unrealistic problems.  My nonsense detector
kicks in and I can’t concentrate.  Instead, ask me if I know how to debug
messaging queue issues, how I like to set up a new server, how I like to run my
Django apps, how I’d solve a specific problem you’re having, etc.  Have me work
on your product alongside someone in your company.  Get to know me.  I can
program.  I’m good at what I do.  I’m just not good at those stupidpuzzles.</p>
<p>It’s not that I don&#8217;t like to think.  I’m learning Haskell and I think I have
understood monads (don’t ask me to explain them to you though).  I like parsers
and parser combinators.  That stuff is hard to understand and takes some serious
alone time togrok.</p>
<p>I’m sure you can find a person out there who is the inverse of me.  They love
puzzles and excel at them.  They get to the final round of Google Jam.  I
don’t. Not even close.  But they are terrible programmers.  Who would you
rather hire?  Every now and then I get this idea that I’ll go and learn a whole
bunch of puzzles and quizzes so I can wow the next interviewer.  But then I
inevitably start to feel dishonest and drop the wholething.</p>
<div class="section" id="how-to-interview-someone">
<h2>How to interviewsomeone</h2>
<p>Find a small problem in your code base.  Give them access to your Git
repository.  Assign the ticket to them.  Explain why it’s a problem and suggest
a few possible solutions.  Have them work on it either alone or alongside one
of your developers.  This gives your team the chance to get to know this
potential hire and see if they would be a good fit.  This is how I interviewed
at Amara and it wasgreat.</p>
<p>I’d like to end with a brilliant <a class="reference external" href="https://twitter.com/holman/status/154986236640112641">Zach Holman</a> quote oninterview:</p>
<blockquote>
I think programming riddles, games, and brain teasers are a great way to
hire. First one to say &#8220;fuck this&#8221; and walk out gets the job.</blockquote>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>International families</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/04/international-families"/>
            <updated>2013-04-10T14:10:00Z</updated>
            <published>2013-04-10T14:10:00Z</published>
            <id>http://honza.ca/2013/04/international-families</id>

            <content type="html">
                <div class="section" id="international-families">
<h1>Internationalfamilies</h1>
<p>I&#8217;m from the Czech republic.  My wife is from Canada.  We got married in
Canada.  Our son was born in the United Kingdom.  Our daughter was born in
Canada.  Both of our children are by birth Czech and Canadian at the sametime.</p>
<p>We want our children to be able to prove both of those citizenships and the
following is theprocess.</p>
<div class="section" id="our-son">
<h2>Ourson</h2>
<p>Our son Wyatt was born in the <span class="caps">UK</span>.  He has a British birth certificate but is
not a British citizen.  In order to travel out of the <span class="caps">UK</span>, he had to get a
passport.  Because we now live in Canada, we decided it would make more sense
to get the Canadian one donefirst.</p>
<p>In order for someone without a Canadian birth certificate to get a Canadian
passport, you need to get a proof of citizenship.  This is a piece of paper
that Wyatt will have to use for the rest of his life to prove his Canadian
citizenship instead of a birth certificate like all normalCanadians.</p>
<p>So, to get a passport, you first need a proof of citizenship.  Wyatt is a
Canadian citizen because his mother is Canadian.  In order to get the proof of
citizenship, you need to send a superlegalized British birth certificate to the
Canadian government and include the mother&#8217;s birth certificate to prove the she
is Canadian.  Super what?  Superlegalization is a process whereby Canada and
the <span class="caps">UK</span> agree to authorize the use of each other&#8217;s legal documents.  Wyatt&#8217;s
British birth certificate must be stamped by a Canadian embassy in the <span class="caps">UK</span> to
say that this is in fact a legal document issued by the United Kingdom.  Also,
along with his application we had to send in our marriagecertificate.</p>
<p>Once he&#8217;s obtained the proof of citizenship, we can apply for a passport.
Fortunately, the Canadian government is nice enough to allow you to apply for
the proof of citizenship and the passport on one application.  We had his
passport in a fewweeks.</p>
<p>Now we are living in Canada and want to get him all the papers he needs to be a
true Czech citizen.  This means that we need to have his British birth
certificate legalized by the <span class="caps">UK</span>, then translated into Czech by a
government-approved translator, then approved by the Ministry of Interior of
the Czech republic and then we can apply for a Czech birth certificate.  Of
course, the application requires us to send in our marriage certificate.  Since
we got married in Canada, we have a Canadian marriage certificate.  This means
that we need to have to superlegalized, translated into Czech and approved by
the Ministry.  More fees and translators aren&#8217;tcheap.</p>
<p>Once he has a Czech birth certificate, he needs to apply for a birth number
which isn&#8217;t unlike a social security number except it&#8217;s derived from your date
ofbirth.</p>
</div>
<div class="section" id="our-daughter">
<h2>Ourdaughter</h2>
<p>Our daughter Eliška was born in Canada.  This means she can fortunately get a
Canadian passport without any issues.  She is a real Canadian like most people
and doesn&#8217;t need to have any special paperwork to prove that she is.  Piece ofcake.</p>
<p>When it comes to the Czech side of things, it&#8217;s seems it&#8217;s much more
complicated than with ourson.</p>
<p>First, she needs to apply for a proof of Czech citizenship.  Her Canadian birth
certificate needs to be superlegalized, translated and approved.  This is
fortunately done at the Czech embassy in Ottawa and you are allowed to
translate the document yourself and they will verify it for you.  One of the
forms that you need to send in with the application requires you to have your
signature verified by a notary.  No big deal, right?  Well, good luck finding a
notary in Canada who speaks Czech and is willing to notarize your signature.  I
was emailing back and forth with the embassy that they allowed me to photocopy
my <span class="caps">ID</span> and take that to the notary instead.  I&#8217;ll sign it in front of him and he
can verify my identity and signature.  I&#8217;ll send this in along with the
application.  The application process takes about 4-6 months according to theirwebsite.</p>
<p>I have yet to apply for this.  But when it comes back, we will have to apply
for a Czech birth certificate and a birth number.  More forms, more fees, more
superlegalization,etc.</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>No matter what you do, do not romanticize international families.  It&#8217;s not all
that fun all thetime&#8230;</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Calvin on predestination</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/03/calvin-on-predestination"/>
            <updated>2013-03-01T19:50:00Z</updated>
            <published>2013-03-01T19:50:00Z</published>
            <id>http://honza.ca/2013/03/calvin-on-predestination</id>

            <content type="html">
                <div class="section" id="calvin-on-predestination">
<h1>Calvin onpredestination</h1>
<p><a class="reference external" href="http://www.ccel.org/ccel/calvin/institutes.v.xxiii.html">Book 3, chapter23</a></p>
<blockquote>
<p>When Paul declares that we were chosen in Christ before the foundation of
the world (Eph. 1:4), he certainly shows that no regard is had to our own
worth; for it is just as if he had said, Since in the whole seed of Adam
our heavenly Father found nothing worthy of his election, he turned his eye
upon his own Anointed, that he might select as members of his body those
whom he was to assume into the fellowship oflife.</p>
<p>By saying they were elected before the foundation of the world, he takes
away all reference toworth.</p>
<p>In the additional statement that they were elected that they might be holy,
the apostle openly refutes the error of those who deduce election from
prescience, since he declares that whatever virtue appears in men is the
result ofelection.</p>
<p>Then, if a higher cause is asked, Paul answers that God so predestined, and
predestined according to the good pleasure of hiswill.</p>
<p>If you say that he foresaw they would be holy, and therefore elected them,
you invert the order of Paul.  You may, therefore, safely infer, If he
elected us that we might be holy, he did not elect us because he foresaw
that we would beholy.</p>
<p>Hence, what Christ said to his disciples is found to be universally
applicable to all believers, &#8220;Ye have not chosen me, but I have chosen
you,&#8221; (John15:16)</p>
<p>In another passage, to suppress the vain boasting of those who, while only
covered with a mask, claim for themselves in the view of the world a first
place among the godly, Paul says, &#8220;The Lord knoweth them that are his,&#8221; (2
Tim. 2:19). In short, by that term he designates two classes of people, the
one consisting of the whole race of Abraham, the other a people separated
from that race, and though hidden from human view, yet open to the eye of
God. And there is no doubt that he took the passage from Moses, who
declares that God would be merciful to whomsoever hepleased</p>
<p><span class="dquo">&#8220;</span>All that the Father giveth me shall come to me.&#8221; &#8220;And this is the Father&#8217;s
will which has sent me, that of all which he has given me I should lose
nothing,&#8221; (John 6:37, 39). Observe that the donation of the Father is the
first step in our delivery into the charge and protection of Christ. Some
one, perhaps, will here turn round and object, that those only peculiarly
belong to the Father who make a voluntary surrender by faith. But the only
thing which Christ maintains is that though the defections of vast
multitudes should shake the world, yet the counsel of God would stand firm,
more stable than heaven itself, that his election would never fail. The
elect are said to have belonged to the Father before he bestowed them on
his only begottenSon.</p>
<p>We must, indeed hold, when he affirms that he knows whom he has chosen,
first, that some individuals of the human race are denoted; and, secondly,
that they are not distinguished by the quality of their virtues, but by a
heavenly decree. Hence it follows, that since Christ makes himself the
author of election, none excel by their own strength orindustry.</p>
<p>For when he says, &#8220;Those that thou gavest me I have kept, and none of them
is lost but the son of perdition,&#8221; (John 17:12), the expression, though
there is a catachresis in it, is not at all ambiguous. The sum is, that God
by gratuitous adoption forms those whom he wishes to have for sons; but
that the intrinsic cause is in himself, because he is contented with his
secretpleasure.</p>
<p>Some object that God would be inconsistent with himself, in inviting all
without distinction while he elects only a few. Thus, according to them,
the universality of the promise destroys the distinction of special grace.
[&#8230;] by external preaching all are called to faith and repentance, and
that yet the Spirit of faith and repentance is not given to all [&#8230;] But
it is by Isaiah he more clearly demonstrates how he destines the promises
of salvation specially to the elect (Isa. 8:16); for he declares that his
disciples would consist of them only, and not indiscriminately of the whole
human race. Whence it is evident that the doctrine of salvation, which is
said to be set apart for the sons of the Church only, is abused when it is
represented as effectually available to all. [&#8230;] Isaiah assigns the cause
when he says that the arm of the Lord is not revealed to all (Isa.53:1).</p>
<p>How, then, can it consistently be said, that God calls while he knows that
the called will not come? [&#8230;] Moreover, if election is, as Paul declares,
the parent of faith, I retort the argument, and maintain that faith is not
general, since election is special. For it is easily inferred from the
series of causes and effects, when Paul says, that the Father &#8220;has blessed
us with all spiritual blessings in heavenly places in Christ, according as
he has chosen us in him before the foundation of the world,&#8221; (Eph. 1:3, 4),
that these riches are not common to all, because God has chosen only whom
hewould.</p>
<p>We come now to the reprobate, to whom the Apostle at the same time refers
(Rom. 9:13). For as Jacob, who as yet had merited nothing by good works, is
assumed into favor; so Esau, while as yet unpolluted by any crime, is
hated. If we turn our view to works, we do injustice to the Apostle, as if
he had failed to see the very thing which is clear to us. Moreover, there
is complete proof of his not having seen it, since he expressly insists
that when as yet they had done neither good nor evil, the one was elected,
the other rejected, in order to prove that the foundation of divine
predestination is not in works. Then after starting the objection, Is God
unjust? instead of employing what would have been the surest and plainest
defense of his justice-viz. that God had recompensed Esau according to his
wickedness, he is contented with a different solution-viz. that the
reprobate are expressly raised up, in order that the glory of God may
thereby be displayed. At last, he concludes that God has mercy on whom he
will have mercy, and whom he will he hardeneth (Rom. 9:18). You see how he
refers both to the mere pleasure of God. Therefore, if we cannot assign any
reason for his bestowing mercy on his people, but just that it so pleases
him, neither can we have any reason for his reprobating others but his
will. When God is said to visit in mercy or harden whom he will, men are
reminded that they are not to seek for any cause beyond hiswill.</p>
</blockquote>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Haskell vs Clojure syntax</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/02/haskell-vs-clojure-syntax"/>
            <updated>2013-02-12T16:33:00Z</updated>
            <published>2013-02-12T16:33:00Z</published>
            <id>http://honza.ca/2013/02/haskell-vs-clojure-syntax</id>

            <content type="html">
                <div class="section" id="haskell-vs-clojure-syntax">
<h1>Haskell vs Clojuresyntax</h1>
<p>Clojure has virtually zero syntax.  What I mean by that is that all structures
look the same: the first item in a list is the function and the rest are the
arguments.  This is true for variable assignment, if statements, data
structures and functionsthemselves.</p>
<div class="highlight"><pre><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">greet</span> <span class="p">[</span><span class="nv">name</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Hello &quot;</span> <span class="nv">name</span><span class="p">))</span>

<span class="p">(</span><span class="k">def </span><span class="nv">user-count</span> <span class="mi">334</span><span class="p">)</span>
</pre></div>
<p>However, before you can do anything useful in Haskell, you must learn all kinds
of crazy syntax: function definitions, pattern matching, do forms, functors,
monads, typeclasses,&#8230;</p>
<div class="highlight"><pre><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&lt;$&gt;</span> <span class="kt">Just</span> <span class="mi">2</span> <span class="o">&lt;*&gt;</span> <span class="kt">Just</span> <span class="mi">8</span>

<span class="kt">Nothing</span> <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">return</span> <span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span>

<span class="kr">instance</span> <span class="kt">Applicative</span> <span class="kt">Maybe</span> <span class="kr">where</span>
    <span class="n">pure</span> <span class="ow">=</span> <span class="kt">Just</span>
    <span class="kt">Nothing</span> <span class="o">&lt;*&gt;</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">Nothing</span>
    <span class="p">(</span><span class="kt">Just</span> <span class="n">f</span><span class="p">)</span> <span class="o">&lt;*&gt;</span> <span class="n">something</span> <span class="ow">=</span> <span class="n">fmap</span> <span class="n">f</span> <span class="n">something</span>
</pre></div>
<p>This is why I find Haskell extremely hard to learn.  It&#8217;s not because of
monads, recursion or functional programming concepts.  It&#8217;s because of the huge
amount of special syntax.  And you need to learn a lot of it before you can do
somethinguseful.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Canada is a schizophrenic country</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2013/01/canada-is-a-schizophrenic-country"/>
            <updated>2013-01-23T07:26:00Z</updated>
            <published>2013-01-23T07:26:00Z</published>
            <id>http://honza.ca/2013/01/canada-is-a-schizophrenic-country</id>

            <content type="html">
                <div class="section" id="canada-is-a-schizophrenic-country">
<h1>Canada is a schizophreniccountry</h1>
<p>I have now lived in Canada for over two years and there are some things that
Canadians can&#8217;t seem to make up their mindon.</p>
<div class="section" id="spelling">
<h2>Spelling</h2>
<p>Canadian spelling is stuck half way between British spelling and American
spelling.  Canadians willsay:</p>
<ul class="simple">
<li>colour, favourite, honour (which are allBritish)</li>
<li>program, realize (which are allAmerican)</li>
</ul>
</div>
<div class="section" id="measuring-units">
<h2>Measuringunits</h2>
<p>When you&#8217;re driving in Canada, everything is in kilometers.  Snow fall is
measured in centimeters.  And yet, people insist on weighing and measuring
themselves in pounds.  We just had a baby girl here in Canada and they kept
saying, <em>Look she is so big, she is probably over eight.</em>.  Sure, she was nice
and big but she certainly didn&#8217;t weight 8kg!  People ask me, <em>How tall are
you?</em>, and I respond with 178 and receive blankstares.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>10 chapters</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/12/10-chapters"/>
            <updated>2012-12-28T15:38:00Z</updated>
            <published>2012-12-28T15:38:00Z</published>
            <id>http://honza.ca/2012/12/10-chapters</id>

            <content type="html">
                <div class="section" id="chapters">
<h1>10chapters</h1>
<ul class="simple">
<li>You get through the less glamorous parts while still beingnourished.</li>
<li>It&#8217;s not a <em>read-your-bible-in-a-year</em> plan.  It&#8217;s more of a plan for reading
the Bible as a way of life.  You&#8217;re neverdone.</li>
<li>You don&#8217;t read the Bible so many times in a year.  You read Acts 12 times,
all gospels 4 times,etc.</li>
<li>You always read different thingstogether.</li>
<li>There isn&#8217;t as much guilt when skipping a day because you don&#8217;t fallbehind.</li>
<li>10 chapters a day might be a lot for some people but I find it a nicebalance.</li>
</ul>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Gender inclusive language</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/12/gender-inclusive-language"/>
            <updated>2012-12-19T20:21:00Z</updated>
            <published>2012-12-19T20:21:00Z</published>
            <id>http://honza.ca/2012/12/gender-inclusive-language</id>

            <content type="html">
                <div class="section" id="gender-inclusive-language">
<h1>Gender inclusivelanguage</h1>
<p>In a <a class="reference external" href="http://www.bedfordbaptist.ca/services/156">recent sermon</a> at our church, a pastor student said to us that we are no
longer able to say that Jesus will make his disciples <em>fishers of men</em>. Rather,
she suggested, we should use the politically correct phrase <em>fishers of
people</em>.</p>
<p>There is always talk of gender-inclusive language when it comes to Bible
translation.  But this one seems a little too far.  Or it doesn&#8217;t feelright.</p>
<p>As I have been thinking about this, I came across other things we say that that
are sexist in this way that don&#8217;t seem to botheranyone.</p>
<ol class="arabic simple">
<li>Watch any detective show and without fail, the perpetrator or killer will
be called <em>he</em> and <em>him</em>.  Women neverkill.</li>
<li>Within the committees of our church, we longer say <em>chairman</em> but
<em>chairperson</em>.  If we were to follow that same logic, we should refer to
<em>snowmen</em> as <em>snowpeople</em>.</li>
<li>The other day, my family visited my mother-in-law while she was selling her
home <span class="amp">&amp;</span> gift products at an event.  At one point, she said &#8220;&#8230; I can&#8217;t I&#8217;m
manning my table.&#8221;  Was she really?  Shouldn&#8217;t she have said <em>womanning</em>?</li>
</ol>
<p>A littleabsurd.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Mutt sidebar labels</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/10/mutt-sidebar-labels"/>
            <updated>2012-10-30T06:28:00Z</updated>
            <published>2012-10-30T06:28:00Z</published>
            <id>http://honza.ca/2012/10/mutt-sidebar-labels</id>

            <content type="html">
                <div class="section" id="mutt-sidebar-labels">
<h1>Mutt sidebarlabels</h1>
<p>The sidebar in Mutt is useful if you have multiple email accounts and want to
switch between them quickly.  It shows you each inbox with a number of unread
emails.  I have 6 Gmail accounts plugged into my Mutt and here is what I used
tosee.</p>
<pre class="literal-block">
INBOX (1)
INBOX
INBOX (2)
INBOX (1)
INBOX (7)
INBOX
</pre>
<p>And I had to remember which one was which.  Let&#8217;s say you have your mailboxes
in <tt class="docutils literal"><span class="pre">~/.mail</span></tt>.</p>
<pre class="literal-block">
$ ls ~/.mail
work home
</pre>
<p>Create a directory called <tt class="docutils literal">aliases</tt> and symlink the inboxes to thatdirectory:</p>
<pre class="literal-block">
$ ln -s ~/.mail/work/INBOX ~/.mail/alias/work
$ ln -s ~/.mail/home/INBOX ~/.mail/alias/home
</pre>
<p>Then, point your Mutt sidebar config at those.  When you open Mutt the next
time, it should look likethis</p>
<pre class="literal-block">
work (1)
home (8)
</pre>
<p>That&#8217;s much more useful than just a list of <tt class="docutils literal"><span class="caps">INBOX</span></tt> things.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Haskell Strings</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/10/haskell-strings"/>
            <updated>2012-10-24T10:01:00Z</updated>
            <published>2012-10-24T10:01:00Z</published>
            <id>http://honza.ca/2012/10/haskell-strings</id>

            <content type="html">
                <div class="section" id="haskell-strings">
<h1>HaskellStrings</h1>
<p>It continues to amaze me how bad Haskell is at processing strings.  One of the
reasons I wanted to learn Haskell was to be able to write short,
dynamic-language-like programs that execute fast once compiled.  Somehow
rather, Haskell has failed to deliver on its promise of <em>bare metal</em> speed.  I
mostly write scripts and utilities meant to run on my machine&#8212;these scripts
mostly process text.  Read a file, parse it and spit somethingout.</p>
<div class="section" id="example">
<h2>Example</h2>
<p>Let&#8217;s build a simple program that will show what I&#8217;m talkingabout.</p>
<ul class="simple">
<li>Read a file called <tt class="docutils literal">file</tt> which containsprose</li>
<li>Capitalize every word in that body oftext</li>
<li>Print the result tostdout</li>
</ul>
<p>We will be testing our programs with a file with about 1.2 million lines of
Lorem Ipsum.  This file is around<span class="caps">75MB</span>.</p>
<p>Here is attemp number one.  This is really simpleHaskell.</p>
<div class="highlight"><pre><span class="c1">-- Normal.hs</span>

<span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
<span class="kr">import</span> <span class="nn">Data.Char</span>

<span class="nf">convert</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
<span class="nf">convert</span> <span class="ow">=</span> <span class="n">unlines</span> <span class="o">.</span> <span class="p">(</span><span class="n">map</span> <span class="n">convertLine</span><span class="p">)</span> <span class="o">.</span> <span class="n">lines</span>

<span class="nf">convertLine</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
<span class="nf">convertLine</span> <span class="ow">=</span> <span class="n">unwords</span> <span class="o">.</span> <span class="p">(</span><span class="n">map</span> <span class="n">convertWord</span><span class="p">)</span> <span class="o">.</span> <span class="n">words</span>

<span class="nf">convertWord</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
<span class="nf">convertWord</span> <span class="n">s</span> <span class="ow">=</span> <span class="p">(</span><span class="n">toUpper</span> <span class="p">(</span><span class="n">head</span> <span class="n">s</span><span class="p">))</span><span class="kt">:</span><span class="p">(</span><span class="n">tail</span> <span class="n">s</span><span class="p">)</span>

<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
    <span class="n">name</span> <span class="ow">&lt;-</span> <span class="n">readFile</span> <span class="s">&quot;file&quot;</span>
    <span class="n">putStr</span> <span class="o">$</span> <span class="n">convert</span> <span class="n">name</span>
</pre></div>
<p>Compile and executewith</p>
<pre class="literal-block">
ghc -O2 -o normal Normal.hs
time ./normal &gt; /dev/null
</pre>
<p>This takes about 17 seconds.  Let&#8217;s see if we can do any better.  When you
complain about Strings in Haskell being slow on some neckbeard forum, people
will tell you to use <tt class="docutils literal">Data.Text</tt>.</p>
<div class="highlight"><pre><span class="c1">-- Main.hs</span>

<span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">Data.Char</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text</span> <span class="k">as</span> <span class="n">T</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text.<span class="caps">IO</span></span> <span class="k">as</span> <span class="n">X</span>

<span class="nf">convert</span> <span class="ow">::</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span> <span class="ow">-&gt;</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span>
<span class="nf">convert</span> <span class="ow">=</span> <span class="kt">T</span><span class="o">.</span><span class="n">unlines</span> <span class="o">.</span> <span class="p">(</span><span class="n">map</span> <span class="n">convertLine</span><span class="p">)</span> <span class="o">.</span> <span class="kt">T</span><span class="o">.</span><span class="n">lines</span>

<span class="nf">convertLine</span> <span class="ow">::</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span> <span class="ow">-&gt;</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span>
<span class="nf">convertLine</span> <span class="ow">=</span> <span class="kt">T</span><span class="o">.</span><span class="n">unwords</span> <span class="o">.</span> <span class="p">(</span><span class="n">map</span> <span class="n">convertWord</span><span class="p">)</span> <span class="o">.</span> <span class="kt">T</span><span class="o">.</span><span class="n">words</span>

<span class="nf">convertWord</span> <span class="ow">::</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span> <span class="ow">-&gt;</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span>
<span class="nf">convertWord</span> <span class="n">s</span> <span class="ow">=</span> <span class="kt">T</span><span class="o">.</span><span class="n">cons</span> <span class="p">(</span><span class="n">toUpper</span> <span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">head</span> <span class="n">s</span><span class="p">))</span> <span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">tail</span> <span class="n">s</span><span class="p">)</span>

<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
    <span class="n">name</span> <span class="ow">&lt;-</span> <span class="kt">X</span><span class="o">.</span><span class="n">readFile</span> <span class="s">&quot;file&quot;</span>
    <span class="kt">X</span><span class="o">.</span><span class="n">putStr</span> <span class="o">$</span> <span class="n">convert</span> <span class="n">name</span>
</pre></div>
<p>This is mostly the same as above.  Instead of using the <tt class="docutils literal">String</tt> type to work
with text, we use the <tt class="docutils literal">Data.Text.Text</tt> type.</p>
<pre class="literal-block">
ghc -O2 -o main Main.hs
time ./main &gt; /dev/null
</pre>
<p>How did it do?  One entire minute, that&#8217;s 5 times slower.  And it uses obscene
amounts of memory (around <span class="caps">600MB</span> on my machine).  Let&#8217;s use lazy <span class="caps">IO</span> when reading
the file, maybe it willimprove.</p>
<div class="highlight"><pre><span class="c1">-- change this</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text</span> <span class="k">as</span> <span class="n">T</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text.<span class="caps">IO</span></span> <span class="k">as</span> <span class="n">X</span>

<span class="c1">-- to this</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text.Lazy</span> <span class="k">as</span> <span class="n">T</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text.Lazy.<span class="caps">IO</span></span> <span class="k">as</span> <span class="n">X</span>
</pre></div>
<p>This clocks in at 27 seconds.  Much better than the non-lazy version.  Next
thing to try is to ignore unicode and go for the ultimate, bare-metal speed.
Let&#8217;s use <tt class="docutils literal">ByteString</tt> instead of <tt class="docutils literal">Text</tt>.</p>
<div class="highlight"><pre><span class="kr">module</span> <span class="nn">Byte</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">Data.Char</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString</span> <span class="k">as</span> <span class="n">B</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Char8</span> <span class="k">as</span> <span class="n">C</span>

<span class="nf">convert</span> <span class="ow">::</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="ow">-&gt;</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span>
<span class="nf">convert</span> <span class="ow">=</span> <span class="kt">C</span><span class="o">.</span><span class="n">unlines</span> <span class="o">.</span> <span class="p">(</span><span class="n">map</span> <span class="n">convertLine</span><span class="p">)</span> <span class="o">.</span> <span class="kt">C</span><span class="o">.</span><span class="n">lines</span>

<span class="nf">convertLine</span> <span class="ow">::</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="ow">-&gt;</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span>
<span class="nf">convertLine</span> <span class="ow">=</span> <span class="kt">C</span><span class="o">.</span><span class="n">unwords</span> <span class="o">.</span> <span class="p">(</span><span class="n">map</span> <span class="n">convertWord</span><span class="p">)</span> <span class="o">.</span> <span class="kt">C</span><span class="o">.</span><span class="n">words</span>

<span class="nf">convertWord</span> <span class="ow">::</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="ow">-&gt;</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span>
<span class="nf">convertWord</span> <span class="n">s</span> <span class="ow">=</span> <span class="kt">C</span><span class="o">.</span><span class="n">cons</span> <span class="p">(</span><span class="n">toUpper</span> <span class="p">(</span><span class="kt">C</span><span class="o">.</span><span class="n">head</span> <span class="n">s</span><span class="p">))</span> <span class="p">(</span><span class="kt">C</span><span class="o">.</span><span class="n">tail</span> <span class="n">s</span><span class="p">)</span>

<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
    <span class="n">name</span> <span class="ow">&lt;-</span> <span class="kt">B</span><span class="o">.</span><span class="n">readFile</span> <span class="s">&quot;file&quot;</span>
    <span class="kt">B</span><span class="o">.</span><span class="n">putStr</span> <span class="o">$</span> <span class="n">convert</span> <span class="n">name</span>
</pre></div>
<p>Hm, not that much better.  27 seconds.  That&#8217;s about as good as the lazy
version when using <tt class="docutils literal">Text</tt>.  Let&#8217;s see if we can squeeze more perfomance out
of this with a lazy <tt class="docutils literal">ByteString</tt></p>
<div class="highlight"><pre><span class="c1">-- change this</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString</span> <span class="k">as</span> <span class="n">B</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Char8</span> <span class="k">as</span> <span class="n">C</span>

<span class="c1">-- to this</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Lazy</span> <span class="k">as</span> <span class="n">B</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Lazy.Char8</span> <span class="k">as</span> <span class="n">C</span>
</pre></div>
<p>This takes about 10 seconds.  Awesome.  This is the best I can do with Haskell.
10 seconds to process 1.2 million lines of text.  I guess that&#8217;s not toobad.</p>
<p><strong><span class="caps">EDIT</span></strong>: Someone <a class="reference external" href="http://www.reddit.com/r/haskell/comments/120h6i/why_is_this_simple_text_processing_program_so/c6r6rm1">pointed out on Reddit</a> that this whole thing can be
accomplished as a simple one-liner.  This is actually a pretty elegantsolution.</p>
<div class="highlight"><pre><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">Data.Char</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text.Lazy</span> <span class="k">as</span> <span class="n">T</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Text.Lazy.<span class="caps">IO</span></span> <span class="k">as</span> <span class="n">X</span>

<span class="nf">convert</span> <span class="ow">::</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span> <span class="ow">-&gt;</span> <span class="kt">T</span><span class="o">.</span><span class="kt">Text</span>
<span class="nf">convert</span> <span class="ow">=</span> <span class="kt">T</span><span class="o">.</span><span class="n">tail</span> <span class="o">.</span> <span class="kt">T</span><span class="o">.</span><span class="n">scanl</span> <span class="p">(</span><span class="nf">\</span><span class="n">a</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">isSpace</span> <span class="n">a</span> <span class="kr">then</span> <span class="n">toUpper</span> <span class="n">b</span> <span class="kr">else</span> <span class="n">b</span><span class="p">)</span> <span class="sc">&#39; &#39;</span>

<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
    <span class="n">name</span> <span class="ow">&lt;-</span> <span class="kt">X</span><span class="o">.</span><span class="n">readFile</span> <span class="s">&quot;file&quot;</span>
    <span class="kt">X</span><span class="o">.</span><span class="n">putStr</span> <span class="o">$</span> <span class="n">convert</span> <span class="n">name</span>
</pre></div>
<p>This clocks in at 8.5 seconds.  Not bad atall.</p>
<p><strong><span class="caps">EDIT</span> 5</strong>: Someone pointed out that I didn&#8217;t include a version of the
one-liner that uses <tt class="docutils literal">ByteString</tt>.</p>
<div class="highlight"><pre><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nn">Data.Char</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Char8</span> <span class="k">as</span> <span class="n">T</span>

<span class="nf">convert</span> <span class="ow">::</span> <span class="kt">T</span><span class="o">.</span><span class="kt">ByteString</span> <span class="ow">-&gt;</span> <span class="kt">T</span><span class="o">.</span><span class="kt">ByteString</span>
<span class="nf">convert</span> <span class="ow">=</span> <span class="kt">T</span><span class="o">.</span><span class="n">tail</span> <span class="o">.</span> <span class="kt">T</span><span class="o">.</span><span class="n">scanl</span> <span class="p">(</span><span class="nf">\</span><span class="n">a</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="kr">if</span> <span class="n">isSpace</span> <span class="n">a</span> <span class="kr">then</span> <span class="n">toUpper</span> <span class="n">b</span> <span class="kr">else</span> <span class="n">b</span><span class="p">)</span> <span class="sc">&#39; &#39;</span>

<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
<span class="nf">name</span> <span class="ow">&lt;-</span> <span class="kt">T</span><span class="o">.</span><span class="n">readFile</span> <span class="s">&quot;file&quot;</span>
<span class="kt">T</span><span class="o">.</span><span class="n">putStr</span> <span class="o">$</span> <span class="n">convert</span> <span class="n">name</span>
</pre></div>
<p>This clocks in at 3.5s on my machine.  Prettyfast!</p>
</div>
<div class="section" id="python">
<h2>Python</h2>
<p>Let&#8217;s try this inPython</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">process_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">process_line</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
    <span class="n">new</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">words</span><span class="p">]</span>
    <span class="k">return</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">new</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;file&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">process</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</pre></div>
<p>Executewith</p>
<pre class="literal-block">
$ time python main.py &gt; /dev/null
</pre>
<p>Six seconds!  Six!  How can a dynamic language be so much faster than compiledHaskell?</p>
<p><strong><span class="caps">EDIT</span> 4</strong>: There has been some discussion on Reddit about being able to
accomplish this task in only one line in Haskell.  It&#8217;s actually possible in
Python,too.</p>
<div class="highlight"><pre><span class="k">print</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;file&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>
</pre></div>
<p>This clocks in at 2seconds.</p>
</div>
<div class="section" id="javascript-and-v8">
<h2>Javascript andV8</h2>
<div class="highlight"><pre><span class="c1">// main.js</span>

<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">capitalize</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">string</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">string</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">processLine</span><span class="p">(</span><span class="nx">line</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">words</span> <span class="o">=</span> <span class="nx">line</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">words</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">capitalize</span><span class="p">(</span><span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">words</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">lines</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">processLine</span><span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">run</span><span class="p">());</span>
</pre></div>
<p>Execute itwith:</p>
<pre class="literal-block">
$ time node main.js &gt; /dev/null
</pre>
<p>Wait for it!  4.5 seconds.  I have nowords.</p>
</div>
<div class="section" id="how-about-go">
<h2>How aboutGo?</h2>
<p><strong><span class="caps">EDIT</span> 3</strong>: (Add this section.  Looks like this post is turning into a language
shootout, lesigh).</p>
<div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;fmt&quot;</span>
    <span class="s">&quot;io/ioutil&quot;</span>
    <span class="s">&quot;bytes&quot;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">body</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="s">&quot;file&quot;</span><span class="p">)</span>
    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Title</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>
<p>Put this into <tt class="docutils literal">title.go</tt>, compile and runwith</p>
<pre class="literal-block">
$ go build title.go
$ time ./title &gt; /dev/null
</pre>
<p>This is around 2 seconds.  Pretty crazy performance.  Only twice the time
compared toC.</p>
</div>
<div class="section" id="how-about-c">
<h2>How aboutC?</h2>
<p><strong><span class="caps">EDIT</span> 2</strong>: (Add thissection)</p>
<p><a class="reference external" href="https://twitter.com/andrewstwrt">Andrew Stewart</a> has graciously written a C version of this program.  Like he
<a class="reference external" href="https://twitter.com/andrewstwrt/status/261282584263286784">said</a>, you should do all of your scripting inC.</p>
<div class="highlight"><pre><span class="c1">// script.c</span>

<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">filename</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;file&quot;</span><span class="p">;</span>
    <span class="kt"><span class="caps">FILE</span></span> <span class="o">*</span><span class="n">file</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">file</span> <span class="o">!=</span> <span class="nb"><span class="caps">NULL</span></span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
        <span class="k">while</span><span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">line</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span> <span class="o">!=</span> <span class="nb"><span class="caps">NULL</span></span><span class="p">)</span> <span class="p">{</span>
        <span class="n">line</span><span class="p">[</span><span class="n">strcspn</span> <span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>

        <span class="kt">int</span> <span class="n">lengthOfLine</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">word</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>

        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lengthOfLine</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">isalpha</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">word</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">line</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="n">toupper</span> <span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
                <span class="n">word</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">word</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">fclose</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Compile and run thiswith:</p>
<pre class="literal-block">
$ gcc -o script script.c
$ time ./script &gt; /dev/null
</pre>
<p>Of course, this is ripping fast.  It takes about 1 second (1.05-1.15, never
below1).</p>
</div>
<div class="section" id="recap">
<h2>Recap</h2>
<pre class="literal-block">
Haskell - String              17s
Haskell - Text                60s
Haskell - Text (Lazy)         27s
Haskell - ByteString          27s
Haskell - ByteString (Lazy)   10s
Haskell - Text, scanl (Lazy)  8.5s
Haskell - ByteString, scanl   3.5s

Python -                      6s
Python - One line, titl()     2s

Javascript <span class="amp">&amp;</span> V8               4.5s

Go                            2s

C                             1s
</pre>
<p>Not sure if I want to continue learning Haskell afterthis.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>On Learning Clojure</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/08/on-learning-clojure"/>
            <updated>2012-08-26T22:45:00Z</updated>
            <published>2012-08-26T22:45:00Z</published>
            <id>http://honza.ca/2012/08/on-learning-clojure</id>

            <content type="html">
                <div class="section" id="on-learning-clojure">
<h1>On LearningClojure</h1>
<div class="section" id="prefix-notation">
<h2>Prefixnotation</h2>
<p>I&#8217;m a big fan of the prefix notation.  It makes everything appear the same
(if-statements, function calls , etc).  I like how it removes the need for
operator precedencerules.</p>
</div>
<div class="section" id="all-the-parentheses">
<h2>All theparentheses</h2>
<p>Once you get into learning Clojure and you have written a small application,
you don&#8217;t really see the parens anymore.  Sure, sometimes you still get the
<em>Unbalanced parens</em> error but those are easy to spot.  If you are afraid of
learning a <span class="caps">LISP</span> because of this, don&#8217;t worry, you&#8217;ll befine.</p>
</div>
<div class="section" id="jvm">
<h2><span class="caps">JVM</span></h2>
<p>Let&#8217;s just say that the start-up time of the <span class="caps">JVM</span> isn&#8217;t the fastest.  This makes
Clojure effectively useless for writing utility scripts.  However, the <span class="caps">JVM</span> is a
robust platform that runs your code really fast.  With Clojure, you get all the
benefits of the <span class="caps">JVM</span>: garbage collection, <span class="caps">JIT</span>, uberjars, etc.  Using Java
libraries in Clojure is usually pretty straightforward if you know the basics
of Java (but the code isn&#8217;t the prettiest).  This is great because some of the
lower level stuff doesn&#8217;t have to be reimplemented (think <span class="caps">SHA1</span> digests,
sockets,etc).</p>
</div>
<div class="section" id="documentation">
<h2>Documentation</h2>
<p>The language itself seems to be documented pretty well.  I haven&#8217;t had any
issues when trying to find the signature for a built-in function.  However, the
community isn&#8217;t exactly known for writing documentation.  Most of the time, you
find a library on Github and you are left to read the source.  If you are
lucky, you are told what to import and a few basic examples.  Good
documentation is something I take for granted coming from the Pythonworld.</p>
</div>
<div class="section" id="libraries">
<h2>Libraries</h2>
<p>While you can certainly find a lot of good libraries for doing common things,
one area is still painful to develop for: the web.  Clojure still needs a
Django-like web framework that has all the batteries included.  Right now, the
only popular web framework is Noir and it&#8217;s more like Sinatra or Flask.
Without a Django-like platform, you end up reinventing all the common things
for every application: authentication, form validation, <span class="caps">ORM</span>,etc.</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>I really like the language.  I like the functional aspects of it and the
immutability.  I like lazy sequences and refs.  What I don&#8217;t like is that the
community and the ecosystem is still a bit young and immature.  I find myself
waiting for stuff to happen before I can use this languagemore.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Large Javascript Application Tips</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/07/large-javascript-application-tips"/>
            <updated>2012-07-16T08:13:00Z</updated>
            <published>2012-07-16T08:13:00Z</published>
            <id>http://honza.ca/2012/07/large-javascript-application-tips</id>

            <content type="html">
                <div class="section" id="large-javascript-application-tips">
<h1>Large Javascript ApplicationTips</h1>
<p>This post isn&#8217;t going to tell you that you should use <span class="caps">MVC</span> to structure your
application.  It isn&#8217;t going to tell you which framework to use.  It&#8217;s not
going to tell you to use CoffeeScript or MongoDB.  But I&#8217;m going to talk about
some small helpful things you can do to your Javascript application to make
easier to develop andmaintain.</p>
<div class="section" id="naming-conventions">
<h2>NamingConventions</h2>
<p>Improperly naming your variables, functions and classes can make it nearly
impossible to navigate large portions of existing code.  You have to follow the
chain all the way up where that variable was created (sometimes in a different
file) to see what type of value it holds.  By looking at a variable name, you
should be able to tell if it&#8217;s a class definition or an instance.  You should
be able to distinguish between a constant and afunction.</p>
</div>
<div class="section" id="file-dependency">
<h2>Filedependency</h2>
<p>Writing large Javascript applications for the browser is tricky because your
application needs to be split over multiple files and there doesn&#8217;t seem to be
a good way to manage dependencies.  When you open up a file in your project,
you can&#8217;t really know what Javascript code was loaded and executed before this
file.  Often times you find yourself looking at your build script or the
<tt class="docutils literal">head</tt> of your <span class="caps">HTML</span> document to see when this file is loaded in the grand
scheme of things.  In Python, you say <tt class="docutils literal">from app import get_user</tt> to use a
function from a different file or module.  In the browser, you just don&#8217;t.  I
find it useful to specify these kinds of dependencies at the top of each file
within a simplecomment.</p>
<div class="highlight"><pre><span class="c1">// maps.js</span>
<span class="c1">//</span>
<span class="c1">// This file provides the ``Maps`` namespace.</span>
<span class="c1">// It depends on jQuery and jquery.cookie.js.</span>
<span class="c1">// It depends on the ``userId`` variable from the document.</span>
<span class="c1">//</span>
<span class="c1">// (function($) {</span>
<span class="c1">//   ...</span>
</pre></div>
</div>
<div class="section" id="class-definition-time-and-consumption-time">
<h2>Class definition time and consumptiontime</h2>
<p>There should be a clear distinction between when your classes are defined and
when they are consumed.  I like to prepare all my classes and functions
beforehand, and then kick off the app with a single call when the document is
ready.  It&#8217;s nice to be able to tell that this is where the appstarts.</p>
</div>
<div class="section" id="namespaces">
<h2>Namespaces</h2>
<p>Your entire application should be contained within a namespace.  Putting all of
your code under a namespace makes it easy to tell where what function or class
definition is coming from.  It makes sure that you don&#8217;t pollute the global
namespace.  It also allows you to select which functions and variables are
going to be exposedpublicly.</p>
</div>
<div class="section" id="documentation">
<h2>Documentation</h2>
<p>If your application isn&#8217;t going to be open-source, you might be tempted to skip
writing documentation.  Adding a few comments here and there in the code can
help you quickly understand what is going on and where related code might live.
This also helps a lot when on-boarding new developers.  When a new member of
your team opens up an 800-line-of-code file with zero comments, they might
crawl under their desk and cry (I&#8217;ve wanted to do that a few timesbefore).</p>
</div>
<div class="section" id="frameworks">
<h2>Frameworks</h2>
<p>If you do decide to use a framework like Backbone.js, you should make sure that
you use it in a sane way.  When a new member joins your team, it&#8217;s really nice
when you can point them to the framework&#8217;s documentation and have them start
learning.  Obviously, you will want to do some custom things and maybe even
build extensions to the framework and that&#8217;s fine as long as it&#8217;s documented
andobvious.</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>Thanks forlistening</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Why you should use Heroku for your next start-up</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/05/why-you-should-use-heroku-for-your-next-start-up"/>
            <updated>2012-05-21T16:43:00Z</updated>
            <published>2012-05-21T16:43:00Z</published>
            <id>http://honza.ca/2012/05/why-you-should-use-heroku-for-your-next-start-up</id>

            <content type="html">
                <div class="section" id="why-you-should-use-heroku-for-your-next-start-up">
<h1>Why you should use Heroku for your nextstart-up</h1>
<p>You are a ninja-rockstar developer with a billion dollar idea.  You write Ruby
and Javascript.  You like <span class="caps">BDD</span>, responsive design, <span class="caps">HTML5</span> and node.js.  You are
really good at <span class="caps">UX</span> and quickly producing a prototype.  You have been working on
your app for a fewmonths.</p>
<p>Now it&#8217;s time to deploy yourapp.</p>
<p>Because you are a hot new start-up, you will of course use <span class="caps">AWS</span>.  You spend a
few hours trying to figure out how many of which instance type you will need.
You decide you need a load balancer, a bunch of app servers, a database server
and a worker server.  That should about cover you.  Next up is Chef.  You spend
a few days learning about provisioning a new <span class="caps">VM</span> with Chef.  You are so excited
about how you can automatically provision a new app server when your start-up
hits the front page of TechCrunch.  You spend a week configuring and testing
your Chef scripts.  And then the big day comes.  You deploy your application.
Everything works the first time and you are overjoyed.  First users start to
appear and your architecture performs really well.  You hit the front page of
HackerNews and get tens of thousands of hits on your site.  You find a small
bug in your cache invalidation logic which you fix really quickly.  You deploy
your fix and what do you know?  That script that installs your project&#8217;s
dependencies when you deploy just pulled in a new version of a library that
deploys your static files to S3.  And of course that new version contains
backwards incompatible changes and completely breaks your app.  You are
frantically trying to figure out what happened.  You think, <span class="caps">OK</span>, I will put up a
maintenance page while I sort this out.  You try to <span class="caps">SSH</span> into your load balancer
and try to change the routing settings.  What a mess.  What do you do when your
database starts swapping? What happens when your Redis server runs out of
memory and dies?  You barely understand how to install MySQL, let alone how to
get the most out ofit.</p>
<p>EnterHeroku.</p>
<p>Single command deployments.  Fully-managed database service.  Automatic
load-balancing.  On-demand scaling.  No manual <span class="caps">SSH</span> to see what&#8217;swrong.</p>
<p>A request comes in, the load balancer picks it up and sends it to a suitable
app server instance.  The app server instance talks to a highly optimized
database instance.  Redis is sitting on a super beefy machine with lots of <span class="caps">RAM</span>
and you never have to worry about it.  When you are ready to make a deployment,
the load balancer bounces each app server in turn to make sure you don&#8217;t lose
any requests.  All you need to do is <tt class="docutils literal">git push heroku master</tt>.</p>
<p>Sure, Heroku is a bit more expensive than <span class="caps">EC2</span>.  But when you think of how many
smart people are taking care of your app, it&#8217;s really cheap.  It&#8217;s like having
your own sysadmin.</p>
<p>You needit.</p>
<p><strong>Disclaimer</strong>: I&#8217;m in no way connected to Heroku.  This posts is an attempt to
convince myself that I shouldn&#8217;t be using Chef for my
side-project-start-up-ideas.  And I&#8217;m not a Rubyguy.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>How I use git</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/05/how-i-use-git"/>
            <updated>2012-05-11T12:30:00Z</updated>
            <published>2012-05-11T12:30:00Z</published>
            <id>http://honza.ca/2012/05/how-i-use-git</id>

            <content type="html">
                <div class="section" id="how-i-use-git">
<h1>How I usegit</h1>
<p>Recently, I have noticed that there are quite a few wrappers around git to give
you a nicer interface to work with.  The new commands promise to be easy to
remember and make your life less frustrating.  I find these a little silly
because git on its own is a great tool.  Here I&#8217;m going to describe how I use
git to convince you (and myself) that it&#8217;s not thathard.</p>
<div class="section" id="cloning">
<h2>Cloning</h2>
<p>This couldn&#8217;t be anysimpler:</p>
<pre class="literal-block">
git clone git://github.com/honza/dotfiles.git
</pre>
</div>
<div class="section" id="committing">
<h2>Committing</h2>
<p>Once I have cloned a repo, I start to make changes.  To see what files I have
changed, Irun</p>
<pre class="literal-block">
git status
</pre>
<p>Or to see what actual changes Imade</p>
<pre class="literal-block">
git diff
</pre>
<p>Then, when I&#8217;m ready to commit, I stage the files.  The index is one of my
favorite features of git.  It lets me decide what changes I want to commit.
Maybe I correct something as I work on something else.  Those things aren&#8217;t
related so they shouldn&#8217;t go into the same commit.  I grew up on Mercurial and
not having the index in Mercurial now really bothersme.</p>
<p>To stage all changed files, Ido</p>
<pre class="literal-block">
git add -u
</pre>
<p>If I decide that the changes I made are stupid and I want to get rid of them, Ido</p>
<pre class="literal-block">
git checkout .
</pre>
<p>To make sure all staged changes are the rightones</p>
<pre class="literal-block">
git diff --cached
</pre>
</div>
<div class="section" id="stashing">
<h2>Stashing</h2>
<p>I often stash my code.  Sometimes you need to look at some code in a different
branch, sometimes I notice something is broken and I want to see if I broke it
ornot.</p>
<pre class="literal-block">
git stash
</pre>
<p>will stash your changes.  To get it back Ido</p>
<pre class="literal-block">
git stash pop
</pre>
<p>And also, often I will see what I hadstashed</p>
<pre class="literal-block">
git stash list
</pre>
</div>
<div class="section" id="branches">
<h2>Branches</h2>
<p>Creating new branches is simple andcheap</p>
<pre class="literal-block">
git checkout -b new_branch
</pre>
<p>Delete abranch</p>
<pre class="literal-block">
git branch -d branch_name
</pre>
<p>Or delete a branch on a remoteserver</p>
<pre class="literal-block">
git push origin :branch_name
</pre>
</div>
<div class="section" id="rebasing">
<h2>Rebasing</h2>
<p>I have <a class="reference external" href="http://honza.ca/2011/05/the-importance-of-git-rebase">written</a> on
rebasing before.  It makes your history much nicer.  Any time I pull code from
a remote repository, Ido</p>
<pre class="literal-block">
git pull --rebase
</pre>
<p>Or, if it&#8217;s a specificbranch</p>
<pre class="literal-block">
git pull --rebase origin dev
</pre>
</div>
<div class="section" id="bisecting">
<h2>Bisecting</h2>
<p>I <em>love</em> the bisect commnad in git.  You can use it to determine which commit
introduced a bug.  This is especially useful if you have a comprehensive test
suite.  For example, the latest commit is broken and you remember that all
tests where passing in version 1.2.  This example usesDjango.</p>
<pre class="literal-block">
git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
git bisect run python manage.py test
</pre>
<p>Git will then keep running your tests until it finds the first commit that&#8217;sbroken.</p>
</div>
<div class="section" id="merging">
<h2>Merging</h2>
<p>When a feature branch is finished, I merge it into masterwith</p>
<pre class="literal-block">
git checkout master
git merge --no-ff feature
</pre>
</div>
<div class="section" id="viewing-history">
<h2>Viewinghistory</h2>
<p>For viewing history, I really like the followingcommand</p>
<pre class="literal-block">
git log --pretty=format:&quot;%h - %an, %ar : %s&quot;'
</pre>
<p>This gives you the commit <span class="caps">SHA</span>, then the author&#8217;s name, how long ago it was made
and a brief, one-line summary of the changes.  I have it aliased as <tt class="docutils literal">gitl</tt>.
I also use a simple graph to see the relationships betweenbranches</p>
<pre class="literal-block">
git log --oneline --graph
</pre>
</div>
<div class="section" id="upgrading-all-submodules-in-a-project">
<h2>Upgrading all submodules in aproject</h2>
<p>This one is great, too.  I use it to upgrade all of my vimplugins.</p>
<pre class="literal-block">
git submodule foreach git pull
</pre>
</div>
<div class="section" id="pulling-and-pushing">
<h2>Pulling andpushing</h2>
<p>This is pretty straightforward</p>
<pre class="literal-block">
git pull
git pull origin dev

git push
git push origin dev
</pre>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>Once you learn what git calls what, it&#8217;s pretty easy to just google the thing
you&#8217;re trying to do.  I&#8217;m definitely not an expert but this gets meby.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Standing desk - first impressions</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/04/standing-desk-first-impressions"/>
            <updated>2012-04-24T09:29:00Z</updated>
            <published>2012-04-24T09:29:00Z</published>
            <id>http://honza.ca/2012/04/standing-desk-first-impressions</id>

            <content type="html">
                <div class="section" id="standing-desk-first-impressions">
<h1>Standing desk - firstimpressions</h1>
<p>I have recently switched jobs and had to set up a home office.  I have heard a
lot of good things about standing desks and thought this was the perfect
opportunity to try one.  I had looked for one online but those things aren&#8217;t
cheap (~$800).</p>
<p>Instead of dropping some serious cash, I stacked up some bins and made a
poorman&#8217;s standing desk.  I have a laptop stand and a second monitor.  Nothing
special,really.</p>
<p>I have been standing while programming for over a week now and I wanted to
share a few thoughts.  If you&#8217;re wondering if you should get a standing desk,
I&#8217;d definitely recommendit.</p>
<div class="section" id="incentives">
<h2>Incentives</h2>
<p>I have set up my desk in such a way that if I want to sit down to do some work
I have to give up the second monitor and my Das keyboard.  I use a 13&#8221; Macbook
Pro so the number of pixels is rather limited.  I <em>love</em> my loud Das keyboard
and want to use it as much as possible.  This works extremelywell.</p>
</div>
<div class="section" id="breaks">
<h2>Breaks</h2>
<p>When I take a break to have lunch with my family (or something like that), I
make it a point to sit down and rest my feet.  When I get back in the office, I
don&#8217;t feel like I&#8217;m gonnadie.</p>
</div>
<div class="section" id="distractions">
<h2>Distractions</h2>
<p>I have found that when I&#8217;m standing I rarely check Hacker News or read
articles.  I think it&#8217;s because reading an article or two isn&#8217;t complex enough
for my brain and it can do other things at the same time&#8212;like think about how
much my feet hurt.  I find that when I&#8217;m standing I get a lot more done because
I can focus a lot more.  Near the end of the day when I&#8217;m tired and actually do
sit down to work, I feel like I&#8217;m walking under water.  Since I&#8217;m just getting
started I have allowed myself some slack here and there.  I don&#8217;t want to go
too fast and <em>burn out</em>.</p>
</div>
<div class="section" id="dancing">
<h2>Dancing</h2>
<p>I have heard that people like to dance when they&#8217;re standing at their desk.  I
always thought this was pretty silly until I caught myself doing it.  I listen
to a lot of rock n roll so it&#8217;s not exactlysurprising.</p>
</div>
<div class="section" id="pain">
<h2>Pain</h2>
<p>Obviously, your feet will hurt.  However, it&#8217;s not nearly as bad as I thought.
I&#8217;m 23 and fairly fit so maybe that&#8217;s a factor.  I have had some minor lower
back pain which I think is caused by the fact that I now have good posture and
the body isn&#8217;t used toit.</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>Do you stand while working?  Ever thought about getting a standingdesk?</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>How Rackspace deleted my server</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/02/how-rackspace-deleted-my-server"/>
            <updated>2012-02-15T08:00:00Z</updated>
            <published>2012-02-15T08:00:00Z</published>
            <id>http://honza.ca/2012/02/how-rackspace-deleted-my-server</id>

            <content type="html">
                <div class="section" id="how-rackspace-deleted-my-server">
<h1>How Rackspace deleted myserver</h1>
<p>I have been with Rackspace for a while now and never had problems.  The server
has been fast and responsive and their prices are great.  However, what
happened yesterday blew my mind and totally made me change how I view server
providers as a whole&#8212;including the likes of <span class="caps">AWS</span> andHeroku.</p>
<p>Here is how it wentdown.</p>
<div class="section" id="pm-cst">
<h2>2:07pm<span class="caps">CST</span></h2>
<p>I got an email from one of my administrators that the front end was
unreachable.  I immediately tried to visit the web application in my browser,
log into the machine via <span class="caps">SSH</span> and ping the server <span class="caps">IP</span> address.  All failed.  I
went on the Rackspace Cloud Server Live Chat to raise the issue withthem.</p>
</div>
<div class="section" id="id1">
<h2>2:48pm<span class="caps">CST</span></h2>
<p>I was told to open a ticket through the admin console.  So I did and I handed
the ticket number to the operator who said they&#8217;d pass it on tooperations.</p>
</div>
<div class="section" id="id2">
<h2>5:05pm<span class="caps">CST</span></h2>
<p>I got a reply on the ticket.  All it says is <em>we&#8217;re working on it</em>.  At this
point, I&#8217;m freaking out because I have been down for over threehours.</p>
</div>
<div class="section" id="id3">
<h2>6:00pm<span class="caps">CST</span></h2>
<p>Still no word from Rackspace.  I got on the phone and explained the issue and
that I didn&#8217;t feel it was being taken seriously.  The operator got the account
manager on the phone who in turn got a <em>tech guy</em> on the call.  They said that
the <span class="caps">VM</span> wasn&#8217;t built properly when I first created it like 6 months ago and that
at that time it was queued up to be deleted and rebuilt.  It took this long to
finally come down the queue and actually get deleted.  They said they would
rebuild the server and let me keep the same <span class="caps">IP</span> and that I would get an email
with newcredentials.</p>
</div>
<div class="section" id="id4">
<h2>6:17pm<span class="caps">CST</span></h2>
<p>I received said email and started to restore the server.  Luckily, I had a
working Chef script which made this very simple to do.  I think I was back
online in about 30minutes.</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>Everyone has been really nice and apologetic.  They even gave me a month&#8217;s
credit to cover the damages.  I still think Rackspace is great but this whole
incident made me realize that anything can fail and that you should design your
application for easy recovery.  And test yourbackups!</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Remap CapsLock to something useful</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/02/remap-capslock-to-something-useful"/>
            <updated>2012-02-07T09:30:00Z</updated>
            <published>2012-02-07T09:30:00Z</published>
            <id>http://honza.ca/2012/02/remap-capslock-to-something-useful</id>

            <content type="html">
                <div class="section" id="remap-capslock-to-something-useful">
<h1>Remap CapsLock to somethinguseful</h1>
<p>Arguably, CapsLock is <a class="reference external" href="http://capsoff.org/">the most useless key</a> on your keyboard. I honestly
can&#8217;t remember the last time I had a real use for it. If are a programmer, you
should remap it to something more useful. The rest of this post will describe
how to remap your CapsLock on a Mac <span class="caps">OSX</span>installation.</p>
<div class="section" id="what-we-are-going-to-do">
<h2>What we are going todo</h2>
<p>I&#8217;m a heavy vim user and reaching for the Esc key all the is a pain. We will
remap the CapsLock to Esc. However, I want to be able to use it for something
else if I&#8217;m not in vim. We will set it up so that when you hit CapsLock on its
own, it will send Esc. However, if you hold CapsLock and press another key, it
will send Ctrl. That way you can do things like Ctrl+F,etc.</p>
<p>On Mac <span class="caps">OSX</span>, you will want to do use <a class="reference external" href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a>. It&#8217;s an excellent
piece of software that will allow you to take control of yourkeyboard.</p>
</div>
<div class="section" id="settings">
<h2>Settings</h2>
<p>Once you have installed KeyRemap4MacBook, go to System Preferences and select
the Keyboard submenu. Hit the Modifier Keys button and remap CapsLock to Ctrl.
You will have to do this once for every keyboard that youuse.</p>
<p>Next, head over to the KeyRemap4MacBook settings. The magical setting you are
looking foris</p>
<pre class="literal-block">
Control_L to Control_L
    (+ When you type Control_L only, send Escape)
</pre>
<p>That&#8217;sit!</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>How not to depend on PyPI</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/02/how-not-to-depend-on-pypi"/>
            <updated>2012-02-04T20:00:00Z</updated>
            <published>2012-02-04T20:00:00Z</published>
            <id>http://honza.ca/2012/02/how-not-to-depend-on-pypi</id>

            <content type="html">
                <div class="section" id="how-not-to-depend-on-pypi">
<h1>How not to depend onPyPI</h1>
<p>When deploying a Django application, you often use a <tt class="docutils literal">requirements.txt</tt> file
that contains a list of the application&#8217;s dependencies. During deployment, your
provisioning system will <tt class="docutils literal">pip install</tt> all of those to make sure that your
application runs asdesired.</p>
<p>The format of a typical <tt class="docutils literal">requirements.txt</tt> files isn&#8217;t unlike thefollowing</p>
<pre class="literal-block">
django==1.3.1
psycopg2==2.4.4
Fabric==1.3.3
...
</pre>
<p>By default, <tt class="docutils literal">pip</tt> will go to the <a class="reference external" href="http://pypi.python.org">Python Package Index</a> (PyPI) and look for
that packagethere.</p>
<p>Unfortunately, PyPI has been known to be down or slow at times; and you want
your deployments to be as smooth aspossible.</p>
<div class="section" id="what-you-can-do">
<h2>What you cando</h2>
<p>Instead of depending on PyPI for a production application, you can host the
packages that your application needs yourself. It&#8217;s actually surpringly easy to
do. Your existing deployment strategy can easily be modified to remove thedependency.</p>
<p>First, we will create a freeze of your requirements. This will look into your
environment and figure out which version of which package you will need for the
productionenvironment.</p>
<pre class="literal-block">
$ pip freeze -r requirements.txt &gt; freeze.txt
</pre>
<p>Once you have the list of packages, you can tell <tt class="docutils literal">pip</tt> to download all the
packages into a directory without installingthem.</p>
<pre class="literal-block">
$ pip install -d pypi -r freeze.txt
</pre>
<p>This will download all packages from <tt class="docutils literal">freeze.txt</tt> into the <tt class="docutils literal">pypi/</tt>
directory.</p>
<p>The next step is to upload all these packages to a publicly accessible server
that can serve static files. This can anything from S3, Cloudfiles or even
Github pages. I like to place all of these packages into a <tt class="docutils literal">packages/</tt>
directory. You will also need a simple index file to go with your packages. All
the index file needs to is provide a list of <span class="caps">HTML</span> links to those packages. The
index will be used by <tt class="docutils literal">pip</tt> to locate the package sourcedistribution.</p>
<p>I have put together a simple Fabric task that will read the contents of the
<tt class="docutils literal">pypi/</tt> directory and create this index file foryou.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">make_index</span><span class="p">():</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;ls pypi&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">packages</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>

    <span class="n">html</span> <span class="o">=</span> <span class="s">&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span><span class="si">%s</span><span class="s">&lt;/body&gt;&lt;/html&gt;&quot;</span>

    <span class="n">links</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">package</span> <span class="ow">in</span> <span class="n">packages</span><span class="p">:</span>
        <span class="n">link</span> <span class="o">=</span> <span class="s">&#39;&lt;a href=&quot;packages/</span><span class="si">%s</span><span class="s">&quot;&gt;</span><span class="si">%s</span><span class="s">&lt;/a&gt;&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">package</span><span class="p">,</span> <span class="n">package</span><span class="p">)</span>
        <span class="n">links</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">link</span><span class="p">)</span>

    <span class="n">links</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">links</span><span class="p">)</span>

    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">html</span> <span class="o">%</span> <span class="n">links</span><span class="p">)</span>
    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
<p>Upload the index file to your server and you&#8217;re ready to deploy. Instead of theusual:</p>
<pre class="literal-block">
$ pip install -r requirements.txt
</pre>
<p>You will runthis:</p>
<pre class="literal-block">
$ pip install -r freeze.txt -f http://yourPypiHost.com/index.html --no-index
</pre>
<p>This will completely ignore PyPI and only use your index when locating
packages. This way your deploys will be faster and morereliable.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Disrupt the multiple-gmail space</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/01/disrupt-the-multiple-gmail-space"/>
            <updated>2012-01-18T09:00:00Z</updated>
            <published>2012-01-18T09:00:00Z</published>
            <id>http://honza.ca/2012/01/disrupt-the-multiple-gmail-space</id>

            <content type="html">
                <div class="section" id="disrupt-the-multiple-gmail-space">
<h1>Disrupt the multiple-gmailspace</h1>
<p>We all know that Gmail is the best email provider out there. It&#8217;s in the
browser, it&#8217;s all ajaxy, you never delete anything, your emails are
cleverly organized into conversations, you know thedrill&#8230;</p>
<p>But have you ever tried to use more than one account at a time? It&#8217;s horribly
broken. Let&#8217;s have a look at youroptions&#8230;</p>
<div class="section" id="multiple-sign-in">
<h2>Multiplesign-in</h2>
<p>Google allows you to log into more than one account at a time. They provide you
with a menu option to switch between the two and you are all set. The problem
is that the constant switching back and forth just isn&#8217;t worthit.</p>
</div>
<div class="section" id="use-a-desktop-client">
<h2>Use a desktopclient</h2>
<p>If you use a desktop client like Thunderbird or Mail.app, you can have as many
accounts as you want. But you don&#8217;t get access to your contacts and rarely get
the nice conversation view for your messages. In addition, the applications are
often bloated and use a ton ofmemory.</p>
</div>
<div class="section" id="use-mutt-or-pino">
<h2>Use mutt orpino</h2>
<p>These light-weight applications are popular especially among programmers. They
are a pain to setup and lack email addressautocompletion.</p>
</div>
<div class="section" id="use-multiple-browsers">
<h2>Use multiplebrowsers</h2>
<p>If you have one or two Gmail accounts, you could probably get away with using
two browsers - one for each account. This is silly and you shouldn&#8217;t dothat.</p>
</div>
<div class="section" id="use-chrome-profiles">
<h2>Use Chromeprofiles</h2>
<p>Newer versions of Chome will allow you to be logged into different Gmail
accounts in different windows. This means that each window is logged into a
single Google account and can only access the services associated with that
account. This is fine for two accounts, but if you have 4+ it can get
ridiculous prettyfast.</p>
<p>None of these options give you a good solution for a unified inbox. They all
have theirshortcomings.</p>
<p>There is a huge opportunity to disrupt this space as they are a lot of us who
have to use a lot of different Gmailaccounts.</p>
<p>I have been using Mozilla Thunderbird with two add-ons: Google contacts and
Google Conversations. They are rather close to doing the right thing but it&#8217;s
still missing something. I tried to set up mutt but it wasn&#8217;t working for me
because of the missingautocomplete.</p>
</div>
<div class="section" id="your-say">
<h2>Yoursay</h2>
<p>What do you use? How do you deal with thismess?</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Upgrading your Django media files to use a CDN</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn"/>
            <updated>2012-01-17T08:45:00Z</updated>
            <published>2012-01-17T08:45:00Z</published>
            <id>http://honza.ca/2012/01/upgrading-your-django-media-files-to-use-a-cdn</id>

            <content type="html">
                <div class="section" id="upgrading-your-django-media-files-to-use-a-cdn">
<h1>Upgrading your Django media files to use a<span class="caps">CDN</span></h1>
<p>I was using <a class="reference external" href="http://readthedocs.org/docs/django-filebrowser/en/latest/">django-filebrowser</a> on a project and my Rackspace <span class="caps">VM</span> quickly ran
out of disk space. Since the site isn&#8217;t getting much traffic at all, I didn&#8217;t
want to pay extra for a bigger <span class="caps">VM</span>. Instead, I decided to move all of the user
uploaded media to <a class="reference external" href="http://www.rackspace.com/cloud/cloud_hosting_products/files/">Rackspace Cloudfiles</a>. It&#8217;s super cheap and they have a
nice<span class="caps">API</span>.</p>
<p>Now, the challenge was to make the transition from a filebrowser-based system.
First of all, I knew I was going to use <a class="reference external" href="http://django-storages.readthedocs.org/en/latest/index.html">django-storages</a> as the new storage
class for my class. I played around with it on the side and it worked like acharm.</p>
<p>Next, I wrote a quick little Python script to upload all of the files to
Cloudfiles. Since the filenames didn&#8217;t change at all, I could just write a
South migration that would strip the <tt class="docutils literal">/uploads</tt> part and be done withit.</p>
<p>I had a look at the Django documentation to see what exactly a <a class="reference external" href="https://docs.djangoproject.com/en/1.3/ref/models/fields/#filefield">FileField</a> was.
It turns out it takes a Django <a class="reference external" href="https://docs.djangoproject.com/en/1.3/ref/files/file/#django.core.files.File">File</a> object which in turn is a thin wrapper
around the Python built-in file object. This didn&#8217;t sound exactly easy to do. I
would have to open a remote file with Python&#8217;s <tt class="docutils literal"><span class="pre">open(&#8216;file.mp3&#8217;)</span></tt> and have
Django inspect it for size and file type. This is clunky at best if you
remember that this will have to live in a Southmigration.</p>
<p>Also worth noting is the fact that filebrowser&#8217;s model field is a subclass of
<tt class="docutils literal">CharField</tt> and has no special file-related properties ormethods.</p>
<p>You can&#8217;t use the <tt class="docutils literal">DEFAULT_STORAGE_CLASS</tt> setting because filebrowser will
start yelling at you. Instead, you specify the storage class right in the new
modelfield.</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">storages.backends.mosso</span> <span class="kn">import</span> <span class="n">cloudfiles_upload_to</span><span class="p">,</span> <span class="n">CloudFilesStorage</span>
<span class="n">cloudfiles_storage</span> <span class="o">=</span> <span class="n">CloudFilesStorage</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">Item</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">old_field</span> <span class="o">=</span> <span class="n">FileBrowseField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">new_field</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">FileField</span><span class="p">(</span><span class="n">upload_to</span><span class="o">=</span><span class="n">cloudfiles_upload_to</span><span class="p">,</span>
            <span class="n">storage</span><span class="o">=</span><span class="n">cloudfiles_storage</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</pre></div>
<p>Now you can go and write your migration and Django won&#8217;t yell at you. Now we go
back to the problem outlined above. How do you create an instance of <tt class="docutils literal">File</tt>
to pass to <tt class="docutils literal">item.new_field</tt>.</p>
<p>After hours of reading the source and debugging, I realized that you can simply
pass in the filename as a string and the storage class will do the right thing.
It&#8217;s actually really simple and painless. Your data migration might look
somethinglike:</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">orm</span><span class="o">.</span><span class="n">Item</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">():</span>
    <span class="n">item</span><span class="o">.</span><span class="n">new_field</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">old_field</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
    <span class="n">item</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</pre></div>
<p>So, I was already somewhat overjoyed that this would in fact be easy and then I
discovered that the change from filebrowser to django-storages doesn&#8217;t require
a schema migration. This means that if your file names are the same there is no
database change needed at all. How cool isthat?</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Inerrancy</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/01/inerrancy"/>
            <updated>2012-01-13T20:13:00Z</updated>
            <published>2012-01-13T20:13:00Z</published>
            <id>http://honza.ca/2012/01/inerrancy</id>

            <content type="html">
                <div class="section" id="inerrancy">
<h1>Inerrancy</h1>
<p>As evangelical Christians, we believe in what is called the inerrancy of the
Bible. This means that we believe that the Word of God contains no mistakes. I
love the way pastor Mark Driscoll putsit:</p>
<blockquote>
If we see something in the Bible that we don&#8217;t agree with, it means we&#8217;re
wrong.</blockquote>
<p>I am continually amazed at how many people will dismiss entire passages in the
Bible as silly or primitive. We are intelligent modern people, we don&#8217;t believe
in fairy tales. We have democracy now. We believe inequality.</p>
<p>Let me remind you that the Bible is the book that God wrote. Is God different
today andyesterday?</p>
<p>Augustine:</p>
<blockquote>
If you believe what you like in the gospel, and reject what you don&#8217;t like,
it is not the gospel you believe, but yourself.</blockquote>
<p>D. A.Carson:</p>
<blockquote>
Those who don&#8217;t have a high view of Scripture, do not feel bound to obey
it.</blockquote>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Writing node.js modules</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2012/01/writing-nodejs-modules"/>
            <updated>2012-01-05T14:00:00Z</updated>
            <published>2012-01-05T14:00:00Z</published>
            <id>http://honza.ca/2012/01/writing-nodejs-modules</id>

            <content type="html">
                <div class="section" id="writing-node-js-modules">
<h1>Writing Node.jsmodules</h1>
<p>To say that node.js has enjoyed a great deal of positive publicity in the last
few months would most certainly be an understatement. New node.js-related
projects are popping up all over the place, and there seems to be this notion
that if you aren&#8217;t using it you&#8217;re not coolenough.</p>
<p>Over the Christmas holidays, I sat down to sort out my photo library and I
wanted to make a web photo gallery to share the images with family and friends.
Being a mainly Python programmer, I wrote a Python script that will go through
all of my photos and create smaller versions and thumbnails of the images that
are suitable for the web. I think I have around 1500 images at the moment and
it took a good 20 minutes to convert everything using Python ImagingLibrary.</p>
<p>I was rather frustrated with the performance. I think the reason for the
slowness was the fact that the images were processed sequentially, one by one.
What if I could modify my program to process more than one image at a time.
This would certainly speed by the process. Then I thought about using threads
in Python and I think I threw up in my mouth alittle.</p>
<p>Then I remembered Node.js. It&#8217;s supposed to be all asynchronous and
non-blocking. Perfect match. So I wrote a thumbnailer innode.</p>
<p>Essentially, it&#8217;s a worker queue that resizes images. You give it a source and
destination directories and a number of workers and run it. The total time went
from 20 minutes to 2 using about 5 workers. Much better,eh?</p>
<p>I decided to open source the project because I couldn&#8217;t find any node.js
projects that do something even remotely similar. It&#8217;s called <a class="reference external" href="https://github.com/honza/node-thumbnail">node-thumbnail</a>
and you can find it on both Github andnpmjs.</p>
<p>So what does the <span class="caps">API</span> looklike?</p>
<div class="highlight"><pre><span class="nx">thumb</span><span class="p">({</span>
  <span class="nx">source</span><span class="o">:</span> <span class="s1">&#39;source/path&#39;</span><span class="p">,</span>
  <span class="nx">destination</span><span class="o">:</span> <span class="s1">&#39;dest/path&#39;</span><span class="p">,</span>
  <span class="nx">concurrency</span><span class="o">:</span> <span class="mi">4</span>
  <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;All done!&#39;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Interpretation mistakes</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/12/interpretation-mistakes"/>
            <updated>2011-12-22T20:16:00Z</updated>
            <published>2011-12-22T20:16:00Z</published>
            <id>http://honza.ca/2011/12/interpretation-mistakes</id>

            <content type="html">
                <div class="section" id="interpretation-mistakes">
<h1>Interpretationmistakes</h1>
<p>Many people today who claim to be and likely are sincere followers of Jesus
Christ aren&#8217;t properly educated in the discipline of biblical exegesis and
interpretation. Of course not everyone can or wants to go to seminary to study
this topic. We can&#8217;t fault people to be ignorant about rather complexmatters.</p>
<p>However, an introduction to the art of interpretation wouldn&#8217;t hurt anyone. My
reasoning behind this assertion is that the lack of basic understanding of
exegesis causes <em>unnecessary</em> conflict within the church. In the rest of this
articles, I would like to show an example of this. Please bear in mind that the
arguments presented here aren&#8217;t meant to convince anyone of any particular
position, but rather, to show how difficult these arguments canbe.</p>
<p>Let&#8217;s dive right in. Many people in the church today argue over the issue of
women&#8217;s position within the Christian society. Some argue that they are equal
to men in all regards and some argue that God created men and women in his
image but for different purposes. This becomes an issue in two particular
passages: Ephesians 5 where we learn of how the husband and the wife are to
conduct themselves in the marriage; and 1 Timothy 2 where Paul forbids women
from entering into the office of anelder.</p>
<p>Let&#8217;s look at the Ephesians passage first. When women read that passage, the
first thing they think is that they are by no means going submit to their
husbands because they live in a society that doesn&#8217;t discriminated based on
gender. They dismiss the biblical account based on how they see themselves in
the 21st century society. The Pauline theology is deemed out-dated and
irrelevant to the modern person. If instead they read on and paid attention to
what the husband&#8217;s responsibilities are, they might learn that much greater
burden is placed upon him. The husband is to love his wife with the same love
that Christ loves the church! The same love with which the Father loves the
Son. The sacrificial love that allowed Jesus to suffer and die for undeserving
sinners. And that&#8217;s no smalltask!</p>
<p>The passage from Timothy is dismissed on similar grounds. A women is as able as
a man and shouldn&#8217;t be told to refrain from entering into office based on her
being a woman. However, this passage says nothing of competency or
intelligence. The passage in question in question reads asfollows:</p>
<blockquote>
I do not permit a woman to teach or to exercise authority over a man;
rather, she is to remain quiet. For Adam was formed first, then Eve; and
Adam was not deceived, but the woman was deceived and became a
transgressor. 1 Timothy 2:12-14</blockquote>
<p>In this case, it&#8217;s a question of language that is being ignored. What is Paul&#8217;s
reason for forbidding the woman from teaching? The order of creation. When God
was finished creating the world, he announced that it was very good. This was
before the sin entered into the world. Paul <em>grounds</em> his argument in the work
of God. He follows God&#8217;s hand in history and is consistent with it. This means
that we cannot dismiss this instruction as having come from a particular city
where women were causing problems and meaning that it doesn&#8217;t apply tous.</p>
<p>The biggest problem in today&#8217;s layperson interpretation is that they project
their own ideas onto the biblical text and refuse to accept those verses and
ideas that don&#8217;t align with they own. This is a very flawed approach. Rather,
we should approach the Bible with an attitude of awe, expecting the God of the
universe to speak to use in his infinite wisdom. Sadly, a great many people
today choose to ignore their God and pursue their own egos andagendas.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Programmers and sore eyes</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/12/programmers-and-sore-eyes"/>
            <updated>2011-12-13T13:00:00Z</updated>
            <published>2011-12-13T13:00:00Z</published>
            <id>http://honza.ca/2011/12/programmers-and-sore-eyes</id>

            <content type="html">
                <div class="section" id="programmers-and-sore-eyes">
<h1>Programmers and soreeyes</h1>
<p>Under normal circumstances, the human eye should blink about once every 5
seconds. When you stare at an <span class="caps">LCD</span> screen all day long, the blink interval gets
larger. As a result, your eyes become dry and sore. This is further worsened by
coffee. Drinking lots of water and using over-the-counter drops will help. This
is what my eye doctor told meyesterday.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Data-driven javascript applications</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/10/data-driven-javascript-applications"/>
            <updated>2011-10-25T11:00:00Z</updated>
            <published>2011-10-25T11:00:00Z</published>
            <id>http://honza.ca/2011/10/data-driven-javascript-applications</id>

            <content type="html">
                <div class="section" id="data-driven-javascript-applications">
<h1>Data-driven javascriptapplications</h1>
<p>Over the last few weeks, I have been trying to think of a way to design medium
to large client-heavy web applications. There are many projects and ideas
floating around that are meant to help you with this and I have had a look at
quite a few of them. I don&#8217;t mean to say that I found the best one &#8212; just one
that Ilike.</p>
<p>I want to talk about data-driven applications. What I mean is that everything
you do somehow manipulates or shows specific data. Let me describe what I mean
by a way of example. I have been working on a piece of photo gallery software
called <a class="reference external" href="https://github.com/honza/rembrant">rembrant</a>. The interface for actually organizing your images into
albums is veryclient-heavy.</p>
<p>The user interface is similar to that of iPhoto. The larger panel displays a
grid of small thumbnails. The sidebar shows a list of albums and a count of
selectedimages.</p>
<p>When the application loads, it makes two calls to the server: one to get a list
of all images (image models, including metadata), and a second to get album
information. Everything else in the <span class="caps">UI</span> is based on these two lists. The list of
albums and the image grid are prettyself-explanatory.</p>
<p>Once the browser has this data, we can start building out the <em>views</em>. A view
is a little windows, or a perspective upon a piece of data. It&#8217;s meant to
display the data in a meaningful way to the user. For example, in our
application, there is a list of albums in the sidebar. These are represented as
list items with anchortags:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">SidebarView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="kr">extends</span><span class="p">({</span>
  <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#sidebar&#39;</span><span class="p">),</span>

  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
    <span class="s1">&#39;click #new-album-link&#39;</span><span class="o">:</span> <span class="s1">&#39;newAlbum&#39;</span>
  <span class="p">},</span>

  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;reset&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
  <span class="p">},</span>

  <span class="nx">add</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">album</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">albumView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SidebarAlbumView</span><span class="p">({</span>
      <span class="nx">model</span><span class="o">:</span> <span class="nx">album</span>
    <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">albumView</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
  <span class="p">},</span>

  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></div>
<p>Here you can see we are binding the view to an existing <span class="caps">DOM</span> element with an <span class="caps">ID</span>
of <em>sidebar</em>. The <tt class="docutils literal">&#64;collection</tt> variable is the collection of albums we spoke
about earlier. The view subscribes to the collection&#8217;s <em>reset</em> and <em>add</em>
events. When a new album is added to the collection, the view will
automatically update itself. Also, the <em>events</em> hash allows us to bind event
handlers to <span class="caps">DOM</span> elements in thesidebar.</p>
<p>You may have noticed that I&#8217;m using Backbone to actually structure the
application. I find that Backbone provides a good compromise between structure
and freedom to do as you please. To be honest, it took me a good while to wrap
my head around what Backbone is trying to do for you. It may seem a little
wordy at times but you shouldn&#8217;t expect your application to consist of littlecode.</p>
<p>Now, suppose we wanted to add a count to each album list item which would
indicate how many photos are currently in that album. This is easily done by
inspecting the photos collection. Backbone provides a simple way to filter your
collection based on predefined criteria. To get all photos that belong to the
album with an <span class="caps">ID</span> of <tt class="docutils literal">1</tt>, we woulddo:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">PhotoCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="kr">extends</span><span class="p">({</span>
  <span class="nx">model</span><span class="o">:</span> <span class="nx">Photo</span><span class="p">,</span>
  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/photos&#39;</span><span class="p">,</span>

  <span class="nx">byAlbum</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">photo</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">photo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;albums&#39;</span><span class="p">),</span> <span class="nx">id</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// collection is an instance of PhotoCollection</span>
<span class="nx">photos</span> <span class="o">=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">byAlbum</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</pre></div>
<p>As you can see, this is very simple and elegant. Now, if a photo is deleted, it
will be removed from the collection. This will be reflected both in the grid
and in the sidebar. It will all work automatically because all of the views are
looking at the same date. They are subscribed to the data&#8217;s events and reactaccordingly.</p>
<p>The nice thing is that you don&#8217;t have to worry about changing classes, binding
data to <span class="caps">DOM</span> elements, attaching click handlers, making <span class="caps">AJAX</span> requests, none of
this. The difficult part about this approach is deciding what your elementary
data is and how you should get it. In the case of <a class="reference external" href="https://github.com/honza/rembrant">rembrant</a> it was prettysimple.</p>
<div class="section" id="further-reading">
<h2>FurtherReading</h2>
<ul class="simple">
<li><a class="reference external" href="https://github.com/honza/rembrant">rembrant</a> for a real worldimplementation</li>
<li><a class="reference internal" href="#backbone-js">Backbone.js</a></li>
<li><a class="reference internal" href="#spine-js">Spine.js</a></li>
<li><a class="reference internal" href="#google-web-toolkit">Google WebToolkit</a></li>
<li><a class="reference internal" href="#cappuccino">Cappuccino</a></li>
</ul>
<span class="target" id="cappuccino"><span id="google-web-toolkit"></span><span id="spine-js"></span><span id="backbone-js"></span></span></div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>On why we lack mature Christians</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/10/on-why-we-lack-mature-christians"/>
            <updated>2011-10-21T20:15:00Z</updated>
            <published>2011-10-21T20:15:00Z</published>
            <id>http://honza.ca/2011/10/on-why-we-lack-mature-christians</id>

            <content type="html">
                <div class="section" id="on-why-we-lack-mature-christians">
<h1>On why we lack matureChristians</h1>
<p>The leadership in the local church is often made up of very incompetent people.
I don&#8217;t mean incompetent in the sense that they can&#8217;t lead. I mean in their
knowledge and understanding of theology in general and of the gospel in
particular. The Bible says that the leaders in the church should be first and
foremost able to teach. If you can&#8217;t teach the Bible, perform mature exegesis
on a text or even struggle to find a book in the Bible, you shouldn&#8217;t lead.
Yet, this happens all the time. I have a theory on how thishappens.</p>
<p>The local church often runs programs that are designed to attract seekers.
People come and are lead to Christ. They pray the sinner&#8217;s prayer and are
introduced to church life. The original group of evangelists moves on to reach
new people and the new believer is left mostly alone in the sea of church
goers. There is rarely any follow-up. These people are left to themselves. New
believers tend to be very excited about their new-found faith and they read
their Bibles whenever they get achance.</p>
<p>Time goes on and these new believers learn to walk the walk and talk the talk
in the church. They learn some key concepts about how church life works. They
learn stories from the gospels, they memorize a few verses from Paul&#8217;s epistles
and they feel good about themselves. They listen to sermons, they go to prayer
meetings and help out where they can. On the outside, it seems that they have
it all figured out and their walk with Christ has beenfruitful.</p>
<p>Once they have been in the church for some 30 years, they naturally gravitate
towards leadership roles. They are nominated to serve on the deacon&#8217;s board or
on the finance committee. Their sense of self-worth rises. They begin to think
that since they made it to their new leadership role, they must be a really
good Christian. After all, they have been in the church for over 30 years. They
have been coming every Sunday, participated in programs and lotsmore.</p>
<p>However, they haven&#8217;t been under good Bible teaching. They haven&#8217;t read their
Bibles in years because they&#8217;ve got it all figured out. They know all the
stories and parables. They know the hymns and worship songs. But they don&#8217;t
know basic Christian doctrine. They wouldn&#8217;t be able to explain to you the
doctrine of sanctification, justification or redemption. They lack
understanding of the divineeconomy.</p>
<p>Moreover, they haven&#8217;t walked with Christ and therefore lack the practical
knowledge of his grace. They don&#8217;t pray on a daily basis to align their hearts
with the will of God. They are proud and feel a strong sense of entitlement and
deservedness. They don&#8217;t reflect on the depths of God and his royal
magnificence. They are obsessed with legalism and rule-keeping. They think that
if they were able to make this far, anyone can. They value tradition. Why
change things if they have worked for so many years? They aren&#8217;t willing to
learn because they know it all. They won&#8217;t come to basic Christianity classes
because it would be boring forthem.</p>
<p>The saddest thing about this reality is that we allow these unlearned people to
make decisions that impact the life of the widercongregation.</p>
<p>What about those who grow up in the church? They have even tougher times
getting to the truth because of the older generation that is in power. If you
don&#8217;t read the Bible for yourself, why would you read it for to your children?
If you don&#8217;t understand a particular text in the Scriptures, how could yourwife?</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Steve Jobs and Richard Stallman</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/10/steve-jobs-and-richard-stallman"/>
            <updated>2011-10-07T19:00:00Z</updated>
            <published>2011-10-07T19:00:00Z</published>
            <id>http://honza.ca/2011/10/steve-jobs-and-richard-stallman</id>

            <content type="html">
                <div class="section" id="steve-jobs-and-richard-stallman">
<h1>Steve Jobs and RichardStallman</h1>
<p>Today, news <a class="reference external" href="http://stallman.org/archives/2011-jul-oct.html#06_October_2011_(Steve_Jobs)">broke</a> about Richard Stallman&#8217;s comment on Steve Job&#8217;s death. The
news of the giant&#8217;s passing has stirred up a wave of emotions ranging from
utter sadness to feelings of empowerment to do great things. Tributes were paid
to Steve Jobs all over the internet. His life is described as one of a genius.
Technology celebrities have publicly commented on hisdeath.</p>
<p>Richard Stallman said thefollowing:</p>
<blockquote>
I&#8217;m not glad he&#8217;s dead, but I&#8217;m glad he&#8217;s gone.</blockquote>
<p>While this could have been said better, I&#8217;m absolutely shocked by the harsh
comments the community has made towards Dr Stallman. I&#8217;m not trying to defend
him. He is a caricature like no other. The man possesses no social skills. But
he is a respected computer engineer that has changed the way software works
today. He has a <a class="reference external" href="http://en.wikipedia.org/wiki/Richard_Stallman#Recognition">number</a> of doctorates. Like Steve Jobs, Dr Stallman is a
programming genius. His work on the <span class="caps">GCC</span> compiler issubstantial.</p>
<p>Articles like the on <a class="reference external" href="http://www.readwriteweb.com/enterprise/2011/10/why-fsf-founder-richard-stallm.php">ReadWriteWeb</a> are very disappointing. Let&#8217;s all be
civil and respectful of eachother.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>On heaven and boredom</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/10/on-heaven-and-boredom"/>
            <updated>2011-10-05T20:09:00Z</updated>
            <published>2011-10-05T20:09:00Z</published>
            <id>http://honza.ca/2011/10/on-heaven-and-boredom</id>

            <content type="html">
                <div class="section" id="on-heaven-and-boredom">
<h1>On heaven andboredom</h1>
<p>One of the complaints many atheists raise against becoming a Christian is the
fact that heaven will be boring. They have in their minds this idea of us in
heaven as chubby toddlers in diapers playing harps and flying around. To me
that would behell.</p>
<p>I would like to talk to you about why I think that heaven won&#8217;t be boring. Let
me start by telling you a how my high school teacher explained to us the
concept of geometric parallels. She said they were two lines that didn&#8217;t
intersect or touch. She also made a side note that the two parallels will
intersect at one specific point, beinginfinity.</p>
<p>It takes the two parallel lines all of infinity to reach each other. Now, keep
that in mind while we look at someScripture.</p>
<blockquote>
Behold, the dwelling place of God is with man. He will dwell with them, and
they will be his people, and God himself will be with them as their God. &#8211;
Revelation 21:3, <span class="caps">ESV</span></blockquote>
<p>The Bible says that God will live with us, among us, so we can know Him fully.
God is omnipotent, omniscient and infinite. To comprehend all of the depths of
God, all his wisdom, love and grace, we will need a longtime.</p>
<p>How long? Well, it&#8217;s easy. Exactly <em>one eternity</em>.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Bible translations and the Christian life</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/10/bible-translations-and-the-christian-life"/>
            <updated>2011-10-01T20:16:00Z</updated>
            <published>2011-10-01T20:16:00Z</published>
            <id>http://honza.ca/2011/10/bible-translations-and-the-christian-life</id>

            <content type="html">
                <div class="section" id="bible-translations-and-the-christian-life">
<h1>Bible translations and the Christianlife</h1>
<p>There are many English translations of the Bible. They were all made for
different audiences. They employ different translation techniques. Each
Christian celebrity endorses a differenttranslation.</p>
<p>The truth of the matter is that a certain Bible translation can be elevated to
such a degree that the common believer is made to believe that the translation
contains actual words of God. You need to realize that a translation is just
that: a translation. No matter how many scholars with the best schools you
commission to create this new, true translation of the Scriptures, it is bound
to be imperfect in some way. One language cannot accurately convey the same
meaning as an another. Each language carries with it a certain culture, sense
of humor and ways of expressing commonidioms.</p>
<p>This is perhaps a little hard to understand if you only speak one language. If
you have had to learn English and you moved to foreign country, this idea may
be clearer toyou.</p>
<p>So, where do you go from here? As you may know, the Bible was written in three
languages: Hebrew, Aramaic and Greek. As Christians, we focus most of our
attention on the New Testament which is written inGreek.</p>
<p>I am going to suggest that if you are even remotely interested in serious study
of the Word of God that you invest a few years of your life and learn New
Testament Greek. Now you are thinking that I&#8217;m completely crazy. Bear with me
for amoment.</p>
<p>The vocabulary of the New Testament is final. You don&#8217;t need to learn words
like <em>airplane</em>, <em>computer</em> or <em>email</em>. If you learn only 300 Greek words, you
will understand over 80% of the New Testament; double the amount and you will
get up to 90%. I&#8217;m confident that after a year of casual study of Greek you can
begin to read some of the simpler passages (like 1 John). After another year,
you will read Paul&#8217;s writing without muchhindrance.</p>
<p>After 3-4 years, you will be ready to abandon reading the New Testament in
English altogether. Let that sinkin.</p>
<p>There are plenty of good resource for learning New Testament Greek. Both online
and inprint.</p>
<p>One last thing: if you are in your twenties or event thirties and you expect to
be alive for another 50-60 years, wouldn&#8217;t it be a good investment to spend a
few years learning the language Paul, Luke, John and others spoke and wrotein?</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Using Chef with small Django apps</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/09/using-chef-with-small-django-apps"/>
            <updated>2011-09-20T20:00:00Z</updated>
            <published>2011-09-20T20:00:00Z</published>
            <id>http://honza.ca/2011/09/using-chef-with-small-django-apps</id>

            <content type="html">
                <div class="section" id="using-chef-with-small-django-apps">
<h1>Using Chef with small Djangoapps</h1>
<p>This year at <a class="reference external" href="http://djangocon.us">DjangoCon</a>, it seemed like everybody was talking about automatic
deployments and namely <a class="reference external" href="http://www.opscode.com/chef/">Chef</a>. After coming home from the conference, I spent
a considerable amount of time learning chef and thinking about how it can be
best used with small to medium size Django apps. In this post, I will walk you
through how Chef works and how it can help you make awesome webapps.</p>
<p>When I say small apps, I mean single-server deployments. This means that your
web server, your database, memcached, rabbitmq, etc is installed on a single
Ubuntu <span class="caps">VM</span>. When learning Chef, I found that most of the available tutorials
focus on multi-server setups and are too complex for ordinaryapps.</p>
<p>Unfortunately, Chef is written in Ruby and it can be a little tricky to debug
since all the tracebacks are meaningless to a Python developer. However, don&#8217;t
despair, you can usually tell pretty quickly what&#8217;s going on. To test your
deployment, we will be using <a class="reference external" href="http://vagrantup.com">Vagrant</a> which is an awesome tool for running
virtual machines on your developmentmachine.</p>
<div class="section" id="what-we-will-install">
<h2>What we willinstall</h2>
<p>Our Django application will be deployed using thefollowing:</p>
<ul class="simple">
<li>nginx</li>
<li>gunicorn</li>
<li>postgresql</li>
<li>memcached</li>
<li>rabbitmq</li>
<li>git</li>
</ul>
<p>Your development machine will need to have <a class="reference external" href="http://docs.fabfile.org/en/1.2.2/index.html">Fabric</a>installed.</p>
</div>
<div class="section" id="how-chef-works">
<h2>How Chefworks</h2>
<p>Chef is a tool that is installed on your server. You give it a bunch
configuration files and tell it to provision server with the necessary packages
and settings. This means that our automatic deployment will have to parts: Chef
configuration files for the sever, and several Fabric tasks to install Chef
remotely and start the provisioningprocess.</p>
<p>So, to configure Chef, we will create a <em>deploy</em> directory inside our project&#8217;s
repository. I like to keep the followingstructure:</p>
<div class="highlight"><pre><span class="gp">$</span> ls -a
<span class="go">.git coolapp docs deploy <span class="caps">README</span>.md Vagrantfile fabfile.py</span>
</pre></div>
<p>&#8230; where <em>coolapp</em> is your Django project. We will focus on the <em>deploy</em>
directory and the <em>fabfile</em>. Chef is a cook how prepares your server for
dinner. So, Chef needs some cookbooks and recipes. Each cookbook is a directory
that contains various configuration files for a specific application that you
want installed. So for example, you will have a <em>PostgreSQL cookbook</em> and a
<em>nginx cookbook</em>. The  deploy directory will contain a directory called
<em>cookbooks</em> which will contain all other cookbooks. Now, the good news is that
you don&#8217;t have to make the cookbooks yourself. <a class="reference external" href="http://www.opscode.com">Opscode</a>, the company behind
Chef, maintains a large selection of cookbooks on <a class="reference external" href="https://github.com/opscode/cookbooks">Github</a>. You can copy and
paste the cookbooks you need for you project. We will need thefollowing:</p>
<ul class="simple">
<li>build-essential (for building fromsource)</li>
<li>erlang (rabbitmq depends onthis)</li>
<li>git</li>
<li>memcached</li>
<li>nginx</li>
<li>postgresql</li>
<li>python (for virtualenv and python headerfiles)</li>
<li>rabbitmq</li>
</ul>
</div>
<div class="section" id="cookbooks">
<h2>Cookbooks</h2>
<p>Each cookbook contains a <em>recipes</em> directory. Each recipe tells Chef how this
particular application is to be installed and configured. For example, it will
tell nginx to create an entry in <em>sites-available</em> and <em>sites-enabled</em>. Or, it
will restart PostreSQL when it&#8217;s done beinginstalled.</p>
<p>There is also a <em>files</em> directory and a <em>templates</em> directory. Templates are
Ruby templates which define a particular configuration file. For example, in
order for Chef to be able to properly configure nginx with the proper server
name, it needs to know on what domain your application will be hosted. More on
this later, but there is a master file which has all your settings in it and
Chef reads from that and substitutes the necessary values. The <em>files</em>
directory contains files that need no further modification and can be copied
oververbatim.</p>
</div>
<div class="section" id="node-json">
<h2>node.json</h2>
<p>The <em>node.json</em> file is a per project file that specifies certain values for
Chef to use. For example, you can tell Chef what you want your PostgreSQL
database to be called, what the name of your django project is, etc. It has a
simple <span class="caps">JSON</span>syntax.</p>
</div>
<div class="section" id="your-app-s-recipe">
<h2>Your app&#8217;srecipe</h2>
<p>Your application is going to need a simple recipe. This means creating a
cookbook bearing your project&#8217;s name and creating a <em>recipes</em> directory within
in. The recipe should be called <em>default.rb</em> and all it needs to include is a
list of applications to install. Forexample:</p>
<div class="highlight"><pre><span class="c1"># Example django app cookbook</span>

<span class="n">execute</span> <span class="s2">&quot;Update apt repos&quot;</span> <span class="k">do</span>
    <span class="n">command</span> <span class="s2">&quot;apt-get update&quot;</span>
<span class="k">end</span>

<span class="n">include_recipe</span> <span class="s1">&#39;nginx&#39;</span>
<span class="n">include_recipe</span> <span class="s1">&#39;build-essential&#39;</span>
<span class="n">include_recipe</span> <span class="s1">&#39;python&#39;</span>
<span class="n">include_recipe</span> <span class="s1">&#39;postgresql::server&#39;</span>
<span class="n">include_recipe</span> <span class="s1">&#39;memcached&#39;</span>
<span class="n">include_recipe</span> <span class="s1">&#39;runit&#39;</span>
<span class="n">include_recipe</span> <span class="s1">&#39;git&#39;</span>

<span class="n">execute</span> <span class="s2">&quot;restart postgres&quot;</span> <span class="k">do</span>
    <span class="n">command</span> <span class="s2">&quot;sudo /etc/init.d/postgresql-8.4 restart&quot;</span>
<span class="k">end</span>

<span class="n">execute</span> <span class="s2">&quot;create-database&quot;</span> <span class="k">do</span>
    <span class="n">command</span> <span class="s2">&quot;createdb -U postgres -O postgres </span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:dbname</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
</pre></div>
<p>You can see it&#8217;s pretty simple. We update Ubuntu&#8217;s repositories, include some
recipes, restart PostgreSQL and create a newdatabase.</p>
</div>
<div class="section" id="start-the-engines">
<h2>Start theengines</h2>
<p>At this point, you can try out your configuration with Vagrant. To help you
out, I have create a <a class="reference external" href="https://github.com/honza/django-chef">template</a> project on Github that you can download and
use out of thebox.</p>
<p>The next big part is writing the Fabric scripts. You will want the followingtasks:</p>
<ul>
<li><p class="first">InstallChef</p>
</li>
<li><p class="first">Transfer the cookbooks directory to theserver</p>
</li>
<li><dl class="first docutils">
<dt>Bootstrap the Djangoproject</dt>
<dd><ul class="first last simple">
<li>Moving code to theserver</li>
<li>Creating avirtualenv</li>
<li>Installingrequirements</li>
<li>Syncing thedatabase</li>
<li>Runningmigrations</li>
<li>Startinggunicorn</li>
</ul>
</dd>
</dl>
</li>
<li><p class="first">Deploy</p>
</li>
</ul>
<p>You can see how I implemented mine <a class="reference external" href="https://github.com/honza/django-chef/blob/master/fabfile.py">here</a>. I recommend that you use Fabric&#8217;s
<em>roledefs</em> which will allow you to specify vagrant as thehost:</p>
<div class="highlight"><pre><span class="gp">$</span> fab -R vagrant bootstrap
</pre></div>
</div>
<div class="section" id="the-real-thing">
<h2>The realthing</h2>
<p>Once you&#8217;ve tested your application in Vagrant so you are ready to deploy to a
server. All that&#8217;s left to do is create a new <em>roledef</em> in the <em>fabfile</em> and
runit!</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>I am by no means a Chef expert&#8212;I learned how to use it a few days ago. If you
have any feedback, do let meknow.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Google APIs - Y U NO WORK</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/09/google-apis-y-u-no-work"/>
            <updated>2011-09-13T21:00:00Z</updated>
            <published>2011-09-13T21:00:00Z</published>
            <id>http://honza.ca/2011/09/google-apis-y-u-no-work</id>

            <content type="html">
                <div class="section" id="google-apis-y-u-no-work">
<h1>Google APIs - Y U <span class="caps">NO</span><span class="caps">WORK</span></h1>
<p>Recently, at <a class="reference external" href="http://www.sheepdoginc.ca">SheepDogInc</a>, I have been working with various Google APIs,
especially the Calendar <span class="caps">API</span>. The state of these APIs is rather <em>unfortunate</em>.
Google is a web giant and you&#8217;d think that their APIs would be state-of-the-art
given the number of professionals theyemploy.</p>
<div class="section" id="documentation">
<h2>Documentation</h2>
<p>Before we go anywhere, let me just talk about the documentation for a minute.
As an open-source software author and advocate, I always encourage developers
to write extensive and good documentation. Somehow, Google didn&#8217;t get the demo.
Most of their documentation is sparse, incorrect and out-of-date. If you would
like to know what data a call returns, you&#8217;re better off just making the call
and inspecting the response. This will actually save you time because the docs
are probably wronganyway.</p>
</div>
<div class="section" id="reliability">
<h2>Reliability</h2>
<p>Google is like the master of scalability. They have an estimated one million
servers world-wide. And yet, they cannot consistently return a 200 to an <span class="caps">API</span>
call. I have written horrible, horrible glue code and hacky workarounds to
account for this unpredictability. Sometimes you will get a response, sometimes
it will timeout, sometime you will get a404&#8230;</p>
</div>
<div class="section" id="engineering">
<h2>Engineering</h2>
<p>With all these amazing engineers, can Google really not make a better <span class="caps">API</span>?
Honestly, if I was in a position to hire a person who worked on the Google <span class="caps">API</span>
team, I would think twice. Seriously &#8212; test your app, keep your docs
up-to-date, and mainly, stop pissing meoff!</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>DjangoCon 2011 Take-Aways</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/09/djangocon-2011-take-aways"/>
            <updated>2011-09-10T21:30:00Z</updated>
            <published>2011-09-10T21:30:00Z</published>
            <id>http://honza.ca/2011/09/djangocon-2011-take-aways</id>

            <content type="html">
                <div class="section" id="djangocon-2011-take-aways">
<h1>DjangoCon 2011Take-Aways</h1>
<p>My employer, <a class="reference external" href="http://www.sheepdoginc.ca/">SheepDogInc</a>, sent me and a colleague of mine to <a class="reference external" href="http://djangocon.us/">DjangoCon
2011</a>. It was my first developer conference and I had a blast. Here a few
quick points about what the conference has clarified forme.</p>
<div class="section" id="deploying-django">
<h2>DeployingDjango</h2>
<p>Despite the Django official documentation&#8217;s recommendation to use Apache and
mod_wsgi, most people seem to deploy Django with nginx and gunicorn. This has
been a pleasant surprise to me because I like it but though that it was too
simple (or less robust thanApache).</p>
</div>
<div class="section" id="provisioning-servers">
<h2>Provisioningservers</h2>
<p>It seemed that everybody was talking about <a class="reference external" href="http://www.opscode.com/chef/">Chef</a> and automatic deployments.
Instead of manually connecting to a server via ssh, you can run one command
which will install all the necessary packages for your application (nginx,
postgresql, etc) and configure them. It makes the whole process less
error-prone. Also, you&#8217;re more likely to spin up a new <span class="caps">VM</span> on your development
machine to try things out because you don&#8217;t have to thing about setting it up.
Especially with tools like <a class="reference external" href="http://vagrantup.com/">vagrant</a>, it&#8217;s deadeasy.</p>
</div>
<div class="section" id="pronouncing-things">
<h2>Pronouncingthings</h2>
<p>When you read names of technical products, you can&#8217;t always be sure how it&#8217;s
supposed to bepronounced.</p>
<ul class="simple">
<li>PyPI:pie-pee-eye</li>
<li>PyPy:pie-pie</li>
<li>wsgi:wizz-gy</li>
<li>nginx:engine-x</li>
</ul>
<p>Did you go to DjangoCon 2011? What are yourthoughts?</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>The pre-GPS world</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/07/the-pre-gps-world"/>
            <updated>2011-07-28T15:00:00Z</updated>
            <published>2011-07-28T15:00:00Z</published>
            <id>http://honza.ca/2011/07/the-pre-gps-world</id>

            <content type="html">
                <div class="section" id="the-pre-gps-world">
<h1>The pre-<span class="caps">GPS</span>world</h1>
<p>When I was a kid, our family used to travel a lot. I grew up in central Europe
and over the years, we visited most of continental Europe. This was in the
early &#8216;90s. Usually, Mom would have a map on her lap and she would tell Dad
where to go. To keep me and my little brother entertained, they gave us another
map and we would followalong.</p>
<p>We had fun trying to pronounce funny city names and calculating distances that
we had travelled that day. Mostly, we had fun travelling in the car. Sometimes,
we would get lost though and tension in the car would rise. My brother and I
were always trying to help get us <em>unlost</em>. I remember thinking that it would
be so cool to have a tiny little car on the map to show you where you were so
you&#8217;d always know where you weregoing.</p>
<p>Now, some fifteen years later, <span class="caps">GPS</span> units are very common. A dream cometrue?</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Why I love reStructuredText</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/07/why-i-love-restructuredtext"/>
            <updated>2011-07-19T14:00:00Z</updated>
            <published>2011-07-19T14:00:00Z</published>
            <id>http://honza.ca/2011/07/why-i-love-restructuredtext</id>

            <content type="html">
                <div class="section" id="why-i-love-restructuredtext">
<h1>Why I lovereStructuredText</h1>
<p>A lot of geeks are using Markdown as their markup generation tool today. It&#8217;s
simple, effective and used everywhere. It allows you to focus on your content
and not on the <span class="caps">HTML</span> code that will be used to display the content on a web
page. I have used Markdown extensively and its simplicity is appealing tome.</p>
<p><a class="reference external" href="http://docutils.sourceforge.net/">reStructuredText</a> is similar to Markdown. If you know Markdown, it&#8217;s dead
simple to learn to use <span class="caps">RST</span>. So, why bother? There are many things it can do
that Markdown simple wasn&#8217;t designed todo.</p>
<p>Let me give you a bit of a background. As a programmer, I like to write and
save documents in text files, using the vim editor. This way I can easily keep
track of different versions of those documents and I will always be able to
open them. The problem is that most non-technical people, such as my family or
perhaps your clients, are trained to use Word documents or <span class="caps">PDF</span> files. Most
computer users wouldn&#8217;t know what to do with that file and wouldn&#8217;t understand
the syntax. I was looking for a way to write my documents in text files and
still be able to share those with others via Word/<span class="caps">PDF</span>. At first, I set up
simple LaTex templates. Then, I thought about writing a script to parse
Markdown files to <span class="caps">PDF</span> via ReportLab. All very cumbersome and not quiteright.</p>
<p>Then, I dicovered <span class="caps">RST</span>. It&#8217;s written in Python which means that any
customizations won&#8217;t be impossible. When I installed it, I was surprised that
it came with a set of command line tools to parse <span class="caps">RST</span> files to other common
formats suchas:</p>
<ul class="simple">
<li><span class="caps">HTML</span></li>
<li><span class="caps">PDF</span> viaLatex</li>
<li><span class="caps">ODT</span> (OpenOfficeformat)</li>
</ul>
<p>I played around a bit with the tools and found them useful, but not great. The
default formatting was ugly and it seemed like it would take too much work to
manually edit the embedded <span class="caps">CSS</span>/Latex/<span class="caps">ODT</span>styles.</p>
<p>I read through the documentation more and found out that you can set up global
or project specific configuration files that <span class="caps">RST</span> parsers will look for by
default. The syntax is simple and effective. This way, you only set up your
styles once and then all you have to do to convert those stylesis</p>
<div class="highlight"><pre><span class="gp">$</span> rst2html.py doc.rst &gt; doc.html
</pre></div>
<p><span class="caps">RST</span> is extensible and you can configure it to do almost anything you want. Once
good example is Pygments syntax highlighting. You can add a new directive and
automatically run your code examples through Pygments. Or, you can customize
the LaTex writer to use a specific font, page size and lotsmore.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>On prayer and the closing of the eyes</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/07/on-prayer-and-the-closing-of-the-eyes"/>
            <updated>2011-07-18T20:13:00Z</updated>
            <published>2011-07-18T20:13:00Z</published>
            <id>http://honza.ca/2011/07/on-prayer-and-the-closing-of-the-eyes</id>

            <content type="html">
                <div class="section" id="on-prayer-and-the-closing-of-the-eyes">
<h1>On prayer and the closing of theeyes</h1>
<p>Virtually every Christian has been taught that prayer is when you talk to God
with your eyes <em>closed</em>. We tell our children, &#8220;Close your eyes and we will
pray&#8221;. The idea of having your eyes closed when you pray is so engrained in our
culture that we don&#8217;t give it a secondthought.</p>
<p>As protestant Christians, we believe that the Bible contains actual words of
God. We also believe in the sufficiency of the Bible&#8217;s instruction. Let&#8217;s
survey the Scriptures and see what the proper mode and posture is when wepray.</p>
<p>In the English Standard Version translation of the Bible, the word <em>pray</em>
occurs ninety times. Fifty-three times of that is in the New Testament. These
verses describe prayer as urgent and emotional. For example, the Psalmistexclaims:</p>
<blockquote>
Give attention to the sound of my cry, my King and my God, for to you do I
pray. (Psalm 5:2, <span class="caps">ESV</span>)</blockquote>
<p>In the New Testament, the disciples ask Jesus to teach them how to pray. The
apostle Paul prays for his coworkers in the gospel. Jesus often prayed in
private, away from the crowds. However, we are not told any specifics. Jesus
also prayed in public. For example, in the story of feeding of the fivethousand:</p>
<blockquote>
Then he ordered the crowds to sit down on the grass, and taking the five
loaves and the two fish, he looked up to heaven and said a blessing.
(Matthew 14:19, <span class="caps">ESV</span>)</blockquote>
<p>Jesus is looking up to heaven, possibly stretching his arms and is speaking to
his father. The lifting of hands or arms is also described in 1 Timothy where
Paul is telling Timothy how a church service should beconducted:</p>
<blockquote>
I desire then that in every place the men should pray, lifting holy hands
without anger or quarreling; (1 Timothy 2:8, <span class="caps">ESV</span>)</blockquote>
<p>The Bible records many occasions where people pray to their God but in no
instance does it describe or prescribe that the believer&#8217;s eyes be closed. Why
do we do it then? I can think of a few different reasons. One, we don&#8217;t want to
embarrass the one leading the prayer; two, it helps us focus on the task at
hand; or, three, we want others around us to know that we are praying and
shouldn&#8217;t bedisturbed.</p>
<p>These reasons are understandable and certainly not sinful in any way. But I do
believe that we rob ourselves of some joy by closing our eyes. If we only ever
pray with our eyes closed, we won&#8217;t pray very often. Prayer becomes a holy
moment that we plan ahead. Your prayer life should be an ongoing conversation
with your Father. Jesus prayed constantly. And so needwe.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>What is a blog?</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/07/what-is-a-blog"/>
            <updated>2011-07-04T10:00:00Z</updated>
            <published>2011-07-04T10:00:00Z</published>
            <id>http://honza.ca/2011/07/what-is-a-blog</id>

            <content type="html">
                <div class="section" id="what-is-a-blog">
<h1>What is ablog?</h1>
<p>I have noticed that many people don&#8217;t know what a blog is, so I would like to
talk about thatbriefly.</p>
<blockquote>
A blog is a type of website or part of a website. Blogs are usually
maintained by an individual with regular entries. (&#8230;) Entries are
commonly displayed in reverse-chronological order. Blog can also be used as
a verb, meaning to maintain or add content to a blog. Source: <a class="reference external" href="http://en.wikipedia.org/wiki/Blog">Wikipedia</a></blockquote>
<p>A blog is a website. A blog has many <em>entries</em> or <em>posts</em>. To write a post
means to update your existing blog with a new article. To create or write a new
blog means to start a newwebsite.</p>
<p>Please, don&#8217;t say that you are going write a blog when you mean you will write
a post. That would be wrong.<span class="caps">OK</span>?</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Why I don't like the Ruby community</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/06/why-i-dont-like-the-ruby-community"/>
            <updated>2011-06-20T20:20:00Z</updated>
            <published>2011-06-20T20:20:00Z</published>
            <id>http://honza.ca/2011/06/why-i-dont-like-the-ruby-community</id>

            <content type="html">
                <div class="section" id="why-i-don-t-like-the-ruby-community">
<h1>Why I don&#8217;t like the Rubycommunity</h1>
<p>I write Python and Javascript code. I use Django and jQuery. And I cringe every
time I have to run <tt class="docutils literal">gem install x</tt>. I only have a limited understanding of
Ruby and hardly any of Ruby on Rails. It seems disorganized to me and hard to
process. All this is fine &#8211; I don&#8217;t have to use any of it if I don&#8217;t like it,right?</p>
<p>I always knew there was something wrong with the way Ruby works. I don&#8217;t mean
wrong like murdering children, I just mean wrong like I don&#8217;t know why things
are the way they are. There are a lot of talented Ruby programmers and I don&#8217;t
mean to dismissthat.</p>
<p>Recently, though, I came across a tweet that I made me realize what it was that
I didn&#8217;t like about Ruby. It was like a smallrevelation.</p>
<blockquote>
Markup is markup, not Ruby. JavaScript is JavaScript, not Ruby. <span class="caps">CSS</span> is <span class="caps">CSS</span>,
not Ruby. Get that in your head before I slap you. - <a class="reference external" href="https://twitter.com/#!/ara_p/status/81425173965832193">&#64;ara_p</a></blockquote>
<p>Do you get it? <a class="reference external" href="http://ruby-doc.org/stdlib/libdoc/erb/rdoc/classes/ERB.html"><span class="caps">ERB</span></a> is Ruby with some html-like fragments mixed in.
<a class="reference external" href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> is a Ruby-like language that compiles to Javascript. <a class="reference external" href="http://sass-lang.com/">Sass</a> is
a Ruby-like language for writing cssfiles.</p>
<p>Before you know it, everything will be inRuby.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>The best IDE</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/06/the-best-ide"/>
            <updated>2011-06-19T20:50:00Z</updated>
            <published>2011-06-19T20:50:00Z</published>
            <id>http://honza.ca/2011/06/the-best-ide</id>

            <content type="html">
                <div class="section" id="the-best-ide">
<h1>The best<span class="caps">IDE</span></h1>
<p>I have tried dozens of code editors, text editors and IDEs. I have carefully
weighed the pros and cons of each. I have studied features, extensibility,
themes, syntax highlighting options, price, and many other criteria. I have
reached my verdict and I&#8217;m ready to publish myfindings.</p>
<p>The best <span class="caps">IDE</span> is the one that works foryou.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Scalability and feet and asses</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/06/scalability-and-feet-and-asses"/>
            <updated>2011-06-19T20:16:00Z</updated>
            <published>2011-06-19T20:16:00Z</published>
            <id>http://honza.ca/2011/06/scalability-and-feet-and-asses</id>

            <content type="html">
                <div class="section" id="scalability-and-feet-and-asses">
<h1>Scalability and feet andasses</h1>
<p>I love talking about scalability. Everyone has their own opinion, their own way
of performing benchmarks and their own conclusions. And we all know that this
is <em>very</em> silly. I recently came across an article by <a class="reference external" href="http://twitter.com/dozba">Ted Dziuba</a> that
summarizes it very nicely foryou:</p>
<blockquote>
Shut up about scalability, no one is using your app anyway.</blockquote>
<p>I love how the author explains the use of the word <em>scalability</em> in this day
andage:</p>
<blockquote>
The most common butthurt about scalability is this: choose a technology. If
you like the technology, claim &#8220;technology X scales better!&#8221; If you don&#8217;t
like it, claim &#8220;technology X doesn&#8217;t scale!&#8221;</blockquote>
<p>You can find the article <a class="reference external" href="http://teddziuba.com/2008/04/im-going-to-scale-my-foot-up-y.html">here</a>.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Install Ruby gems into virtualenv</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/06/install-ruby-gems-into-virtualenv"/>
            <updated>2011-06-10T11:00:00Z</updated>
            <published>2011-06-10T11:00:00Z</published>
            <id>http://honza.ca/2011/06/install-ruby-gems-into-virtualenv</id>

            <content type="html">
                <div class="section" id="install-ruby-gems-into-virtualenv">
<h1>Install Ruby gems intovirtualenv</h1>
<p>You are a Python developer and every time you have to install a Ruby gem you
throw up in your mouth a little. Wouldn&#8217;t it be nice if you could install Ruby
gems into your virtualenv? Yeah, itwould.</p>
<p>Stick this in your virtualenv&#8217;s <tt class="docutils literal">postactivate</tt> script:</p>
<div class="highlight"><pre><span class="nb">export </span><span class="nv">GEM_HOME</span><span class="o">=</span><span class="s2">&quot;$VIRTUAL_ENV/gems&quot;</span>
<span class="nb">export </span><span class="nv">GEM_PATH</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
<span class="nb">export </span><span class="nv"><span class="caps">PATH</span></span><span class="o">=</span><span class="nv">$<span class="caps">PATH</span></span>:<span class="s2">&quot;$GEM_HOME/bin&quot;</span>
</pre></div>
<p>That&#8217;s it! You&#8217;re welcome.:)</p>
<div class="section" id="credit">
<h2>Credit</h2>
<p>Give credit where credit is due. I stole this idea from <a class="reference external" href="http://twitter.com/idangazit">Idan Gazit</a> and
made itbetter.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Deploying Django with nginx and gunicorn</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn"/>
            <updated>2011-05-30T09:15:00Z</updated>
            <published>2011-05-30T09:15:00Z</published>
            <id>http://honza.ca/2011/05/deploying-django-with-nginx-and-gunicorn</id>

            <content type="html">
                <div class="section" id="deploying-django-with-nginx-and-gunicorn">
<h1>Deploying Django with nginx andgunicorn</h1>
<p>The amazing Django <a class="reference external" href="https://docs.djangoproject.com/en/1.3/howto/deployment/modwsgi/">documentation</a> recommends that you use Apache and modwsgi
to deploy your webapp. While this is certainly not bad advice, you may not want
to use Apache after all. Apache is a beast that eats up a lot of memory, is
kind of slow and can&#8217;t handle as much traffic. As a fun alternative, I would
like to talk about deploying Django on nginx using the <a class="reference external" href="http://gunicorn.org/">gunicorn</a> webserver.</p>
<p>Just a quick note before we start: this isn&#8217;t an out-there deployment option. I
spoke to one of the gunicorn developers and was told that every django hosting
company (think ep.io) uses thissetup.</p>
<div class="section" id="get-your-server-ready">
<h2>Get your serverready</h2>
<p>I use Rackspace for small, single server web apps. I created an Ubuntu 10.10
instance with <span class="caps">256MB</span> of <span class="caps">RAM</span>. Then, I created a user for my app and added my ssh
key to <tt class="docutils literal">authorized_keys</tt>. Basicstuff.</p>
</div>
<div class="section" id="install-nginx">
<h2>Installnginx</h2>
<p>Installing nginx couldn&#8217;t be simpler. Latest stable release is provided via a
pparepository.</p>
<div class="highlight"><pre><span class="gp">$</span> sudo apt-get install python-software-properties -y
<span class="gp">$</span> sudo -s
<span class="gp">$</span> apt-add-repository ppa:nginx/stable
<span class="gp">$</span> apt-get update
<span class="gp">$</span> apt-get install nginx
<span class="gp">$</span> <span class="nb">exit</span>
</pre></div>
</div>
<div class="section" id="project-structure">
<h2>Projectstructure</h2>
<p>The user under which the app will run is <tt class="docutils literal">webapp</tt>, so I checkout my app in
<tt class="docutils literal">/home/webapp</tt>.</p>
<div class="highlight"><pre><span class="go">/home/webapp/app</span>
<span class="go">/home/webapp/app/static</span>
<span class="go">/home/webapp/env</span>
</pre></div>
<p>Note that I&#8217;m using <tt class="docutils literal">virtualenv</tt> to deploy thisapp.</p>
</div>
<div class="section" id="configure-nginx-and-gunicorn">
<h2>Configure nginx andgunicorn</h2>
<p>The following two files can be distributed with yourproject.</p>
<p>nginx.conf:</p>
<div class="highlight"><pre><span class="go">server {</span>
<span class="go">    listen 80;</span>
<span class="go">    server_name webapp.org;</span>

<span class="go">    access_log /home/webapp/access.log;</span>
<span class="go">    error_log /home/webapp/error.log;</span>

<span class="go">    location /static {</span>
<span class="go">        root /home/webapp/app;</span>
<span class="go">    }</span>

<span class="go">    location / {</span>
<span class="go">        proxy_pass http://127.0.0.1:8888;</span>
<span class="go">    }</span>
<span class="go">}</span>
</pre></div>
<p>Next, I symlinked <tt class="docutils literal">nginx.conf</tt> to the server&#8217;s <tt class="docutils literal"><span class="pre">sites-enabled</span></tt> directory.</p>
<div class="highlight"><pre><span class="gp">$</span> sudo ln -s /home/webapp/app/nginx.conf /etc/nginx/sites-enable/webapp.org
</pre></div>
<p>This sets up nginx to directly serve the applications&#8217;s static files (css, js,
etc.). Everything else is proxied to the gunicornserver.</p>
<p>Now gunicorn is a Python <span class="caps">HTTP</span> server. It&#8217;s super simple and effective. I
installed it into the app&#8217;senvironment.</p>
<div class="highlight"><pre><span class="gp">$</span> <span class="o">(</span>env<span class="o">)</span> pip install gunicorn
</pre></div>
<p>gunicorn.conf.py:</p>
<div class="highlight"><pre><span class="n">bind</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1:8888&quot;</span>
<span class="n">logfile</span> <span class="o">=</span> <span class="s">&quot;/home/webapp/gunicorn.log&quot;</span>
<span class="n">workers</span> <span class="o">=</span> <span class="mi">3</span>
</pre></div>
<p>That&#8217;s it! The config files are simple and easy toread.</p>
</div>
<div class="section" id="running">
<h2>Running</h2>
<p>I then collected all the static files into the <tt class="docutils literal">static</tt> directory:</p>
<div class="highlight"><pre><span class="gp">$</span> <span class="o">(</span>env<span class="o">)</span> python manage.py collectstatic
</pre></div>
<p>I restartednginx:</p>
<div class="highlight"><pre><span class="gp">$</span> sudo /etc/init.d/nginx restart
</pre></div>
<p>And finally, I ran the <tt class="docutils literal">gunicorn</tt> server:</p>
<div class="highlight"><pre><span class="gp">$</span> <span class="o">(</span>env<span class="o">)</span> <span class="nb">cd</span> /home/webapp/app
<span class="gp">$</span> <span class="o">(</span>env<span class="o">)</span> gunicorn_django -D -c gunicorn.conf.py
</pre></div>
<p>And I was good togo.</p>
</div>
<div class="section" id="notes">
<h2>Notes</h2>
<p>You may have to change the permissions on the <tt class="docutils literal">static</tt> directory. Also, the
command above starts <tt class="docutils literal">gunicorn</tt> as a deamon - a better way would be to use a
monitoring service to start it. Think <tt class="docutils literal">runit</tt> or <tt class="docutils literal">supervisord</tt>. Also, I
didn&#8217;t include any database specific configurations since that&#8217;s indentical to
an Apachedeployment.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>The importance of git rebase</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/05/the-importance-of-git-rebase"/>
            <updated>2011-05-14T14:00:00Z</updated>
            <published>2011-05-14T14:00:00Z</published>
            <id>http://honza.ca/2011/05/the-importance-of-git-rebase</id>

            <content type="html">
                <div class="section" id="the-importance-of-git-rebase">
<h1>The importance of gitrebase</h1>
<p>Git isn&#8217;t just something you have to put up with when working with other
developers. Git is a wonderful tool that allows you to manage your code, its
evolution and help you recover from mistakes should they arise. One of the
things that people are intimidated by is <tt class="docutils literal">git rebase</tt>.</p>
<p>Let&#8217;s look at an example. You&#8217;re working on a team with two other developers.
You have a blessed repository that sits on your company&#8217;s server. Everyone is
working on the same project but on slightly different tasks. Everyone is
working on the master branch. You write a bit of code here and there, you
commit a bunch of times and then it&#8217;s time to share your code with the rest of
the team by pushing it up to the sharedrepository.</p>
<p>You run <tt class="docutils literal">git push</tt> but receive an error saying that there are changes on the
server and your commit cannot be fast-forwarded. No big deal, right? You run
<tt class="docutils literal">git pull</tt> to download the changes that you don&#8217;t have and automatically
merge your changes in. Then you can <tt class="docutils literal">git push</tt> again and it will work justfine.</p>
<p>The problem is that it makes the history of your projectmessy.</p>
<div class="highlight"><pre><span class="go">* 9:35 - Nancy - Merge branch &#39;master&#39;</span>
<span class="go">|\</span>
<span class="go">* | 9:35 - Nancy - Second commit</span>
<span class="go">| |</span>
<span class="go">| * 9:30 - Brad - First commit</span>
<span class="go">|/</span>
<span class="go">* 9:12 - Nancy - First commit</span>
</pre></div>
<p>As you can see, there is this strange <strong>Merge branch &#8216;master&#8217;</strong> commit that&#8217;s a
little out of place. If everyone on your team is regularly pushing to the
shared repository, the history gets littered with these weird commits prettyquickly.</p>
<p>You may have guessed that there is a better way. We&#8217;ll replay the above
scenario using <tt class="docutils literal">git rebase</tt>. Instead of running <cite>git pull</cite>, we will run <tt class="docutils literal">git
pull <span class="pre">&#8211;rebase</span></tt>. What this will do is temporarily hide the commits that only you
have, then pull the changes from the remote repository, fast-forward (no merge
commit) and then re-apply your commits on top of the current <span class="caps">HEAD</span>. The end
result from a code point of view is the same, but the history is muchcleaner:</p>
<div class="highlight"><pre><span class="go">* 9:35 - Nancy - Second commit</span>
<span class="go">* 9:30 - Brad - First commit</span>
<span class="go">* 9:12 - Nancy - First commit</span>
</pre></div>
<p>See? Isn&#8217;t this so much better? The only difference to your current workflow is
that instead of <tt class="docutils literal">git pull</tt> you will run <tt class="docutils literal">git pull <span class="pre">&#8211;rebase</span></tt>.Easy!</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>The modern web developer and open source licenses</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/05/the-modern-web-developer-and-open-source-licenses"/>
            <updated>2011-05-03T19:00:00Z</updated>
            <published>2011-05-03T19:00:00Z</published>
            <id>http://honza.ca/2011/05/the-modern-web-developer-and-open-source-licenses</id>

            <content type="html">
                <div class="section" id="the-modern-web-developer-and-open-source-licenses">
<h1>The modern web developer and open sourcelicenses</h1>
<p>The world of open source is full of wonders. People write code for free and
make it available for free for anyone to use. If you write a quick little
program on the weekend, it&#8217;s usually because there is a need that has to be
filled. There&#8217;s a repetitive task that you wish you didn&#8217;t have to do so you
write a short program to do it foryou.</p>
<p>Web development can be hard. You have to worry about your database, your
server-side code, your client-side templates and javascript and it all has to
magically work together. We web developers have created a ton of tools to help
us get the job done. And those of us who are really commited to the best and
most reliable software make what we create in our spare time available for
everyone else to use. We share the awesome idea we had in hopes that someone
had the same problem and we could help them solve it. Massive projects like
Django and Ruby on Rails come to mind. jQuery and Prototype. Fabric and
Capistrano. The list just goeson.</p>
<p>The world of open source is full of wonders. All of this is possible by
releasing our code under a license. And not just any license. If you were to
publish your code online without describing how it can be used, by default you
are reserving all the rights to yourself. Nobody else can legally use it. You
as the creator have the right and responsibility to decide how your code will
beused.</p>
<p>I was introduced to the world of open source by Linux and the <span class="caps">GNU</span> movement. For
the longest time, I would claim that the only true open source license is the
<a class="reference external" href="http://www.gnu.org/licenses/gpl.html"><span class="caps">GPL</span></a>. It&#8217;s a great license. It ensures that your software will never be used
in a non-free way (free as in freedom). It works great for medium to large
scale pieces of software, such as the Linux kernel or git. The two are self
contained and don&#8217;t usually have anydependencies.</p>
<p>However, the more I moved from desktop software development towards developing
for the web, the more I found myself frustrated and confused by the <span class="caps">GPL</span>. If a
user downloads a web page generated by a <span class="caps">GPL</span>-covered web framework, do I need
to also make available to the user the code that generated the page? If I use
jQuery on my page (which is released under the <span class="caps">GPL</span>) and my scripts use it, do I
have to provide non-minified versions of my scripts? Can I legally use a
<span class="caps">GPL</span>-covered web framework to build a website for client and not make the source
codeavailable?</p>
<p>There are plenty more options to think about and my head starts to hurt every
time I try to make a sense of itall.</p>
<p>I believe that the General Public License is <em>unsuitable</em> for web-based
projects such as web frameworks, javascript libraries, etc. In a modern web
application, there are way too many moving parts created by different parties.
It&#8217;s the web developer&#8217;s job to find the best tools to get their job done. I
believe that the best tools available today are of the open source variety
(<span class="caps">MS</span> <span class="caps">SQL</span> server,anyone?).</p>
<p>I was reading Jeff Atwood&#8217;s <a class="reference external" href="http://www.codinghorror.com/blog/2007/04/pick-a-license-any-license.html">article</a> on software licenses and became
convinced that I should abandon the <span class="caps">GPL</span> for my projects. After all, I want
people to use my software and making them try and understand the intricacies of
the legal language of the <span class="caps">GPL</span> is unnecessary. Starting today, I will make my
projects available under the terms of a more permissive license. My current
favoritesare:</p>
<ul class="simple">
<li><a class="reference external" href="http://www.opensource.org/licenses/bsd-license"><span class="caps">BSD</span></a></li>
<li><a class="reference external" href="http://www.opensource.org/licenses/mit-license.php"><span class="caps">MIT</span></a></li>
<li><a class="reference external" href="http://sam.zoy.org/wtfpl/"><span class="caps">WTFPL</span></a></li>
</ul>
<p>They are all short and easy to understand. Peoples&#8217; time is expensive, let&#8217;s
not wasteit.</p>
<p>If you are a developer and you maintain a project that&#8217;s useful for making the
web a better place, I would ask that you consider using a permissive license
for yourproject.</p>
<p><strong>Update (2012-01-09):</strong> After reading Van Lindberg&#8217;s <a class="reference external" href="http://shop.oreilly.com/product/9780596517960.do">book</a> on Open source
licenses, I have learned that the <span class="caps">WTFPL</span> isn&#8217;t a good idea. It doesn&#8217;t actually
do anything in terms of legal protection orwarranty.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Virtual machines for Django developers</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/04/virtual-machines-for-django-developers"/>
            <updated>2011-04-19T12:00:00Z</updated>
            <published>2011-04-19T12:00:00Z</published>
            <id>http://honza.ca/2011/04/virtual-machines-for-django-developers</id>

            <content type="html">
                <div class="section" id="virtual-machines-for-django-developers">
<h1>Virtual machines for Djangodevelopers</h1>
<p><a class="reference external" href="http://vagrantup.com">Vagrant</a> is a tool for building and distributing virtualized
development environments. It&#8217;s based on VirtualBox VMs. This article describes
how this Ruby tool can be useful to Djangodevelopers.</p>
<div class="section" id="why-vagrant">
<h2>Whyvagrant?</h2>
<p>The modern web developer works on many different projects. Each project has a
unique set of requirements, dependencies and package versions needed for that
project to succeed. Keeping all of these libraries in check is difficult.
<tt class="docutils literal">virtualenv</tt> is a tool that creates isolated environments for Python
packages. Vagrant takes this approach a step further. You can virtualize the
entireserver.</p>
<p>Just as each Django project will have a <tt class="docutils literal">requirements.txt</tt> file which lists
the project&#8217;s <tt class="docutils literal">pip</tt> dependencies, your project will now have a
<tt class="docutils literal">Vagrantfile</tt> and a <tt class="docutils literal">cookbooks</tt> directory. The <tt class="docutils literal">Vagrantfile</tt> describes
how the <span class="caps">VM</span> should be created and the <tt class="docutils literal">cookbooks</tt> directory contains
instructions on what packages to install. For example, in the <tt class="docutils literal">Vagrantfile</tt>
you will specify a <span class="caps">VM</span> which runs an Ubuntu server with <span class="caps">256MB</span> of <span class="caps">RAM</span> and your
<tt class="docutils literal">cookbooks</tt> directory will tell vagrant to install apache2, git, postgresql
andmemcached.</p>
<p>Getting started with vagrant issimple.</p>
</div>
<div class="section" id="getting-started">
<h2>Gettingstarted</h2>
<p>vagrant is distributed as a Ruby gem and you can install it likeso:</p>
<div class="highlight"><pre><span class="go">gem install vagrant</span>
</pre></div>
<p>Next, you will download a base box that I made for you. It&#8217;s an Ubuntu 10.10
server with minimalconfiguration.</p>
<div class="highlight"><pre><span class="go">vagrant box add vagrant-ubuntu http://honza.ca/downloads/vagrant-ubuntu.box</span>
</pre></div>
<p>This will take a while so you may want to get abeverage.</p>
<p>Next, you will create a directory that will hold your project and initialize it
forvagrant.</p>
<div class="highlight"><pre><span class="go">cd ~/Code</span>
<span class="go">mkdir webapp</span>
<span class="go">cd webapp</span>
<span class="go">vagrant init vagrant-ubuntu</span>
</pre></div>
<p>This will create a <tt class="docutils literal">Vagrantfile</tt> in thatdirectory.</p>
<p>And thenrun</p>
<div class="highlight"><pre><span class="go">vagrant up</span>
</pre></div>
<p>to actually build and boot the environment. This might take a fewminutes.</p>
<p>After this, your environment is running. Your environment is a headless
virtualbox instance.  You can <tt class="docutils literal">ssh</tt> into the box byrunning:</p>
<div class="highlight"><pre><span class="go">vagrant ssh</span>
</pre></div>
<p>You will notice that your project directory (<tt class="docutils literal">webapp</tt>) is mounted inside the
environment under <tt class="docutils literal">/vagrant</tt>. Any changes to either directory will affect theother.</p>
<p>You can shutdown your environmentwith</p>
<div class="highlight"><pre><span class="go">vagrant halt</span>
</pre></div>
<p>Destroy itwith:</p>
<div class="highlight"><pre><span class="go">vagrant destroy</span>
</pre></div>
</div>
<div class="section" id="provisioning">
<h2>Provisioning</h2>
<p>Next, you will install some packages into the <span class="caps">VM</span>. You will install some common
Django packages: PostreSQL, Apache, <span class="caps">WSGI</span>, memcached andgit.</p>
<div class="highlight"><pre><span class="go">cd ~/Code/webapp</span>
<span class="go">git clone git@github.com:honza/cookbooks.git</span>
</pre></div>
<p>This downloads all kinds of cookbooks ready for our use. We will create a
custom cookbook inside that directory where we will define what packages wewant:</p>
<div class="highlight"><pre><span class="go">cd cookbooks</span>
<span class="go">mkdir webapp</span>
<span class="go">cd webapp</span>
<span class="go">mkdir recipes</span>
<span class="go">touch recipes/default.rb</span>
</pre></div>
<p>Now open up the <tt class="docutils literal">default.rb</tt> file and enter thefollowing:</p>
<div class="highlight"><pre><span class="n">require_recipe</span> <span class="s2">&quot;postgresql::server&quot;</span>
<span class="n">require_recipe</span> <span class="s2">&quot;apache2&quot;</span>
<span class="n">include_recipe</span> <span class="s2">&quot;apache2::</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:django</span><span class="o">][</span><span class="ss">:web_server</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="n">require_recipe</span> <span class="s2">&quot;git&quot;</span>
<span class="n">require_recipe</span> <span class="s2">&quot;memcached&quot;</span>
</pre></div>
<p>And modify your <tt class="docutils literal">Vagrantfile</tt> to use thecookbooks:</p>
<div class="highlight"><pre><span class="ss">Vagrant</span><span class="p">:</span><span class="ss">:Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;vagrant-ubuntu&quot;</span>
    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:chef_solo</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
      <span class="n">chef</span><span class="o">.</span><span class="n">cookbooks_path</span> <span class="o">=</span> <span class="s2">&quot;cookbooks&quot;</span>
      <span class="n">chef</span><span class="o">.</span><span class="n">add_recipe</span> <span class="s2">&quot;webapp&quot;</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
<p>For the configuration changes to take effect, you need torun:</p>
<div class="highlight"><pre><span class="go">vagrant reload</span>
</pre></div>
<p><span class="caps">OK</span>, that concludes our quick introduction to Vagrant. I hope you see how this
can be beneficial and how simple it is to getstarted.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Why you should be using CoffeeScript</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/04/why-you-should-be-using-coffeescript"/>
            <updated>2011-04-11T16:45:00Z</updated>
            <published>2011-04-11T16:45:00Z</published>
            <id>http://honza.ca/2011/04/why-you-should-be-using-coffeescript</id>

            <content type="html">
                <div class="section" id="why-you-should-be-using-coffeescript">
<h1>Why you should be usingCoffeeScript</h1>
<p>I&#8217;m sure you&#8217;ve heard of CoffeeScript. Everyone is talking about it, it seems.
It&#8217;s a beautiful language with a simple syntax that you use to write
Javascript. CoffeeScript compiles to Javascript. Here is why I think you should
be usingit:</p>
<div class="section" id="readability">
<h2>Readability</h2>
<p>CoffeeScript is designed to be beautiful and readable. There is no unnecessary
fluff. Less syntax boilerplate, fewer mistakes.Compare:</p>
<div class="highlight"><pre><span class="c1">// regular javascript</span>
<span class="kd">var</span> <span class="nx">author</span> <span class="o">=</span> <span class="s2">&quot;William Shakespeare&quot;</span><span class="p">;</span>
<span class="c1">// coffeescript</span>
<span class="nx">author</span> <span class="o">=</span> <span class="s2">&quot;William Shakespeare&quot;</span>
</pre></div>
<p>Indentation is also important in CoffeeScript - just like in Python. This makes
closures and blocks easier tospot.</p>
</div>
<div class="section" id="valid-code">
<h2>ValidCode</h2>
<p>There are many different coding styles when it comes to writing Javascript. The
good thing about CoffeeScript is that the Javascript it generates is valid - it
passes <a class="reference external" href="http://www.javascriptlint.com/">Javascript Lint</a>. And if your code isn&#8217;t valid CoffeeScript, it
won&#8217;t compile. It&#8217;s a win-win. This is perhaps my favoritefeature.</p>
</div>
<div class="section" id="easy-class-inheritance">
<h2>Easy classinheritance</h2>
<p>This is just great. It reminds me of Python andRuby:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nx">Animal</span>
    <span class="nv">constructor: </span><span class="nf">(@name) -&gt;</span>

    <span class="nv">move: </span><span class="nf">(meters) -&gt;</span>
        <span class="nx">alert</span> <span class="nx">@name</span> <span class="o">+</span> <span class="s">&quot; moved </span><span class="si">#{</span><span class="nx">meters</span><span class="si">}</span><span class="s">m.&quot;</span>

<span class="k">class</span> <span class="nx">Dog</span> <span class="k">extends</span> <span class="nx">Animal</span>
    <span class="nv">move: </span><span class="nf">-&gt;</span>
        <span class="nx">alert</span> <span class="s">&quot;Whoof...&quot;</span>
        <span class="k">super</span> <span class="mi">5</span>
</pre></div>
<p>Compiles to this inJavascript:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">Animal</span><span class="p">,</span> <span class="nx">Dog</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">__hasProp</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">,</span> <span class="nx">__extends</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">__hasProp</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">key</span><span class="p">))</span> <span class="nx">child</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="kd">function</span> <span class="nx">ctor</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">child</span><span class="p">;</span> <span class="p">}</span>
    <span class="nx">ctor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
    <span class="nx">child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ctor</span><span class="p">;</span>
    <span class="nx">child</span><span class="p">.</span><span class="nx">__super__</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">child</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">Animal</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">Animal</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">move</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">meters</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="p">(</span><span class="s2">&quot; moved &quot;</span> <span class="o">+</span> <span class="nx">meters</span> <span class="o">+</span> <span class="s2">&quot;m.&quot;</span><span class="p">));</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">Animal</span><span class="p">;</span>
<span class="p">})();</span>
<span class="nx">Dog</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">Dog</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">Dog</span><span class="p">.</span><span class="nx">__super__</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">__extends</span><span class="p">(</span><span class="nx">Dog</span><span class="p">,</span> <span class="nx">Animal</span><span class="p">);</span>
    <span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">move</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Whoof...&quot;</span><span class="p">);</span>
        <span class="k">return</span>
        <span class="nx">Dog</span><span class="p">.</span><span class="nx">__super__</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">Dog</span><span class="p">;</span>
<span class="p">})();</span>
</pre></div>
<p>Quite a difference, huh? Think how much time you&#8217;d need to understand each
version and make any changes required. In my mind, this encourages better code
organization andstructure.</p>
</div>
<div class="section" id="node-js-awesomeness">
<h2>Node.jsawesomeness</h2>
<p>CoffeeScript comes with a Node.js utility, <tt class="docutils literal">coffee</tt>. You can write your
Node.js code in CoffeeScript and run it with <tt class="docutils literal">coffee file.js</tt>. The utility
wraps the CoffeeScript compiler and the <tt class="docutils literal">node</tt> executable. This way, you can
whip up a quick server in no time.Genius.</p>
</div>
<div class="section" id="easy-debugging">
<h2>Easydebugging</h2>
<p>With tools like <a class="reference external" href="http://code.google.com/webtoolkit/">Google Web Toolkit</a>, your code compiles to <em>minified</em>
javascript. Non-minified code is obviously easier (possible?) to read anddebug.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>The latest greatest technology</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/04/the-latest-greatest-technology"/>
            <updated>2011-04-09T17:30:00Z</updated>
            <published>2011-04-09T17:30:00Z</published>
            <id>http://honza.ca/2011/04/the-latest-greatest-technology</id>

            <content type="html">
                <div class="section" id="the-latest-greatest-technology">
<h1>The latest greatesttechnology</h1>
<p>I just found an interesting quote by <a class="reference external" href="http://mir.aculo.us/">Thomas Fuchs</a>, the creator of
script.aculo.us and a core member of the Prototype team. The quote is from his
<a class="reference external" href="http://thomas.fuchs.usesthis.com/">Setup</a>interview:</p>
<blockquote>
For computer programmers, especially if you&#8217;re self-employed, there&#8217;s no
excuse whatsoever not to get the latest and greatest. You don&#8217;t really have
other expenses anyway, it&#8217;s tax-deductible and, most importantly, it will
make you happy and more productive if you know that you&#8217;re using the best
available tools.</blockquote>
<p>Do youagree?</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>JSLint syntax checker for vim</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/04/jslint-syntax-checker-for-vim"/>
            <updated>2011-04-05T09:00:00Z</updated>
            <published>2011-04-05T09:00:00Z</published>
            <id>http://honza.ca/2011/04/jslint-syntax-checker-for-vim</id>

            <content type="html">
                <div class="section" id="jslint-syntax-checker-for-vim">
<h1>JSLint syntax checker forvim</h1>
<p>Douglas Crockford&#8217;s <a class="reference external" href="http://www.jslint.com/">JSLint</a> script is almost a golden standard when it comes
to checking the syntax and general sanity of your javascript files. Being lazy
by nature, I got tired of copying and pasting my code into the webform.</p>
<p>I wanted to be able to run the JSLint tool from the command line. JSLint itself
is written in javascript. It&#8217;s a 6000-line beast. How do you run a javascript
library as a command line utility? The answer is <a class="reference external" href="http://nodejs.org/">node.js</a>.</p>
<p>I wrote a quick little script that takes a single argument (your file) and runs
JSLint over it, printing any errors to the console. I call it <tt class="docutils literal">jslintnode.js</tt>
and the code is on <a class="reference external" href="https://github.com/honza/jslintnode.js">Github</a>.</p>
<p>Well, checking my files from the command line is certainly better than using
the web interface. But I still have to run it over and over. As you may know,
I&#8217;m fanatical <a class="reference external" href="http://www.vim.org">vim</a> user. There is a cool plugin called <a class="reference external" href="https://github.com/scrooloose/syntastic">syntastic</a> which
runs through the file you are editing each time you save it. It puts little
<tt class="docutils literal">&gt;&gt;&gt;</tt> characters next to the line you are editing which tells you that you
screwed up and need to fix thatline.</p>
<p>However, by default, syntastic uses the <tt class="docutils literal">jsl</tt> utility to check javascript
files. With a little bit of work, you can modify the original script to use our
<tt class="docutils literal">jslintnode.js</tt> utility.</p>
<p>Go into the <tt class="docutils literal">/syntax_checkers/</tt> directory and open up the <tt class="docutils literal">javascript.vim</tt>
file.</p>
<p>Change thisline:</p>
<div class="highlight"><pre><span class="k">if</span> <span class="p">!</span>executable<span class="p">(</span><span class="s1">&#39;jsl&#39;</span><span class="p">)</span>
</pre></div>
<p>tothis:</p>
<div class="highlight"><pre><span class="k">if</span> <span class="p">!</span>executable<span class="p">(</span><span class="s1">&#39;jslintnode.js&#39;</span><span class="p">)</span>
</pre></div>
<p>And replace the body of the <tt class="docutils literal">SyntaxCheckers_javascript_GetLocList()</tt> function
with thefollowing:</p>
<div class="highlight"><pre><span class="k">let</span> <span class="nb">makeprg</span> <span class="p">=</span> <span class="s2">&quot;jslintnode.js &quot;</span>.shellescape<span class="p">(</span>expand<span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">))</span>
<span class="k">let</span> <span class="nb">errorformat</span><span class="p">=</span><span class="s1">&#39;%W%f(%l): lint warning: %m,%-Z%p^,%W%f(%l): warning: %m,%-Z%p^,%E%f(%l): SyntaxError: %m,%-Z%p^,%-G&#39;</span>
<span class="k">return</span> SyntasticMake<span class="p">(</span>{ <span class="s1">&#39;makeprg&#39;</span>: <span class="nb">makeprg</span><span class="p">,</span> <span class="s1">&#39;errorformat&#39;</span>: <span class="nb">errorformat</span> }<span class="p">)</span>
</pre></div>
<p>Save and restartvim.</p>
<p>That&#8217;s it. Now as you&#8217;re editing any javascript files you will get instant
feedback as to the quality of your code as judged by JSLint. And remember that
<em>JSLint will hurt your feelings</em>.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>The Irrationality of Being an Apple Fanboy</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/03/the-irrationality-of-being-an-apple-fanboy"/>
            <updated>2011-03-18T09:00:00Z</updated>
            <published>2011-03-18T09:00:00Z</published>
            <id>http://honza.ca/2011/03/the-irrationality-of-being-an-apple-fanboy</id>

            <content type="html">
                <div class="section" id="the-irrationality-of-being-an-apple-fanboy">
<h1>The Irrationality of Being an AppleFanboy</h1>
<p>It continues to amaze me how much people devote themselves to Apple products.
Every time the fruit company releases a new product, people line in front of
the store for days in hopes of being one of the first blessed people who get to
touch the shiny new toy. The Oatmeal has an awesome <a class="reference external" href="http://theoatmeal.com/comics/apple">comic</a> about
this. Being all crazy and sleeping on the sidewalk aside, let&#8217;s look at more of
a down-to-earthexample.</p>
<p>Being a geek and all, I get asked rather often if I would recommend someone
buys a Mac laptop. While I wholeheartadly agree that the Unix-like qualities of
Mac <span class="caps">OSX</span> are infinitely superior to the (non) qualities of the Windows kernel, I
cannot recommend to my friends that they buy a laptop with an apple onit.</p>
<p>Here iswhy.</p>
<p>I went on the <cite>FutureShop</cite> website to see what brand new laptops cost these
days and how powerful theyare.</p>
<p>First, I looked up the cheapest 15&#8217; <a class="reference external" href="http://www.futureshop.ca/en-CA/product/apple-apple-macbook-pro-15-4-intel-core-i5-2-53ghz-laptop-english-mc372ll-a/10144050.aspx?path=d60135943742891f1c13c3119725be53en02">Macbook Pro</a>. Here are thespecs:</p>
<ul class="simple">
<li>Intel Core i52.53GHz</li>
<li><span class="caps">4GB</span><span class="caps">RAM</span></li>
<li><span class="caps">500GB</span><span class="caps">HDD</span></li>
<li>Intel <span class="caps">HD</span> GraphicsCard</li>
<li>Price:$1,699.95</li>
</ul>
<p>Then, I looked for a solid laptop that could compete with the Macbook Pro. I
didn&#8217;t want to compare it to laptops of questionable quality like those made by
Acer or <span class="caps">HP</span>. I went for a <a class="reference external" href="http://www.futureshop.ca/en-CA/product/sony-sony-vaio-15-5-intel-core-i5-460m-laptop-vpceb37fdw-white-vpceb37fdw/10156213.aspx?path=b3cc400131894855a015719f00cd1728en02">Sony Vaio</a>:</p>
<ul class="simple">
<li>Intel Core i52.53GHz</li>
<li><span class="caps">4GB</span><span class="caps">RAM</span></li>
<li><span class="caps">500GB</span><span class="caps">HDD</span></li>
<li>Intel <span class="caps">HD</span> GraphicsCard</li>
<li>Price:$899</li>
</ul>
<p>I&#8217;m sure you will have noticed that the two computers have the exact same specs.
However, the Macbook is almost <em>double</em> the price. I say, buy the Vaio and
install Ubuntu on it. Rock solid laptop with a rock solid <span class="caps">OS</span>. You can also buy
your wife a netbook or an iPad with the money yousave.</p>
<p>Let the flamingbegin.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>7 ways Github has changed the open source world</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/03/7-ways-github-has-changed-the-open-source-world"/>
            <updated>2011-03-05T21:00:00Z</updated>
            <published>2011-03-05T21:00:00Z</published>
            <id>http://honza.ca/2011/03/7-ways-github-has-changed-the-open-source-world</id>

            <content type="html">
                <div class="section" id="ways-github-has-changed-the-open-source-world">
<h1>7 ways Github has changed the open sourceworld</h1>
<p>As the guys at <a class="reference external" href="http://thechangelog.com">the changelog</a> say, the world of open source is changing fast
and you have to keep up. I believe that Github has been very influential when
it comes to making open source more accessible. How has Github changed the
world of opensource?</p>
<div class="section" id="force-projects-to-include-a-good-readme">
<h2>Force projects to include a good<span class="caps">README</span></h2>
<p>Apart from the directory structure and files, the most prominent element on the
page is your <span class="caps">README</span> file. If you don&#8217;t have one, the page looks kind of weird. As
an administrator, if you don&#8217;t add a <span class="caps">README</span> file, Github will start yelling atyou.</p>
</div>
<div class="section" id="unified-place-for-all-your-projects">
<h2>Unified place for all yourprojects</h2>
<p>When I come across a cool project, I like to see what other stuff the author
has been hacking on. The best example I think is <a class="reference external" href="http://github.com/tpope">tpope</a> who is a famous
vim plugin creator. When you go to his profile page on Github, you can see all
of the plugins he has ever written andpublished.</p>
</div>
<div class="section" id="code-discussions">
<h2>Codediscussions</h2>
<p>Yes, you can discuss the project on <span class="caps">IRC</span> or on mailing lists. Those aren&#8217;t
exactly user friendly, and it&#8217;s hard to discuss code that way. Github makes it
easy for you to submit a pull request and have others comment on yourcode.</p>
</div>
<div class="section" id="publish-your-hacks-with-ease">
<h2>Publish your hacks withease</h2>
<p>Did you just write a patch that greatly improves an existing project? Fork it
and publish it in minutes. If you notify the original project, you can get
helpful feedback on your hacks. This encourages people to publish their code
even if it&#8217;s never merged into the originalproject.</p>
</div>
<div class="section" id="judge-how-active-a-project-is">
<h2>Judge how active a projectis</h2>
<p>Github makes it easy to quickly look through a project&#8217;s history to see how
active it is. In no time, you can tell how many people commit to it and how
often. Also, the number of watchers/forks in the corner gives you a pretty good
idea of how many people are actually using the project. This is possibly my
favorite feature. Open source developers don&#8217;t need to waste their time
exploring libraries that aren&#8217;tmaintained.</p>
</div>
<div class="section" id="discover-new-projects">
<h2>Discover newprojects</h2>
<p>Smart people come up with clever things all the time. If they share their code
on Github, you can find it in the Explore Github section. I can&#8217;t remember how
many times I&#8217;ve discovered a cool project this way. My favorite example is
<a class="reference external" href="https://github.com/jashkenas/coffee-script">CoffeeScript</a>.</p>
</div>
<div class="section" id="follow-the-development-of-your-favorite-projects">
<h2>Follow the development of your favoriteprojects</h2>
<p>When you first log in, you are presented with a list of changes that were made
to the projects you follow. This projects has a new release, this bug was
fixed. etc.Invaluable.</p>
<p>What are your thoughts? Any favorite features ofGithub?</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>How To Convert Vim Colorschemes To Pygments Themes</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes"/>
            <updated>2011-02-25T22:26:00Z</updated>
            <published>2011-02-25T22:26:00Z</published>
            <id>http://honza.ca/2011/02/how-to-convert-vim-colorschemes-to-pygments-themes</id>

            <content type="html">
                <div class="section" id="how-to-convert-vim-colorschemes-to-pygments-themes">
<h1>How To Convert Vim Colorschemes To PygmentsThemes</h1>
<p>Recently, I have grown to love <a class="reference external" href="http://pygments.org">Pygments</a>. It gives you syntax
highlighting in the browser without heavy Javascript files. It supports just
about any programming language on the planet and it&#8217;s just plain awesome. The
only thing that it&#8217;s lacking is good color schemes. It comes with a dozen
themes that will certainly do the trick, but if you&#8217;re used to looking at
pretty code in your favorite editor, the code examples on your website will
look a littledull.</p>
<p>I&#8217;m going to go out on a limb here and assume you have a favorite colorscheme.
I found a script that will turn a vim colorscheme into a Pygments theme. It
didn&#8217;t work perfectly out of the box so I patched it. You can download it
<a class="reference external" href="https://github.com/honza/vim2pygments">here</a>. Copy your vim colorscheme to the same directory as the script and run
it likeso:</p>
<div class="highlight"><pre><span class="gp">$</span> python vim2pygments.py molokai.vim &gt; molokai.py
</pre></div>
<p>This will produce a Python file containing a simple style class that Pygments
can use. Next step is to downloadPygments:</p>
<div class="highlight"><pre><span class="gp">$</span> hg clone http://dev.pocoo.org/hg/pygments-main pygments
</pre></div>
<p>And then you will install your newtheme:</p>
<div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd </span>pygments
<span class="gp">$</span> cp ../molokai.py pygments/styles/molokai.py
</pre></div>
<p><span class="caps">OK</span>, now for the fun part. We will use Pygments to generate the <span class="caps">CSS</span> file that
you will then use on yourwebsite:</p>
<div class="highlight"><pre><span class="gp">$</span> ./pygmentize -S molokai -f html -a .highlight &gt; molokai.css
</pre></div>
<p>If you are a TextMate user, you might be able to get your favorite theme done,
too. A lot of popular Vim colorschemes are inspired by TextMate. Sunburst,
mustang and idle fingers come to mind. Just find a Vim version and you&#8217;re good
togo.</p>
<p>That&#8217;sit!</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Why Nokia chose Windows over Android</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/02/why-nokia-chose-windows-over-android"/>
            <updated>2011-02-11T22:24:00Z</updated>
            <published>2011-02-11T22:24:00Z</published>
            <id>http://honza.ca/2011/02/why-nokia-chose-windows-over-android</id>

            <content type="html">
                <div class="section" id="why-nokia-chose-windows-over-android">
<h1>Why Nokia chose Windows overAndroid</h1>
<p>Today, we have all heard about the new deal struck between Nokia and Microsoft.
It is a major change in Nokia&#8217;s strategy which will without a doubt affect the
smartphonemarket.</p>
<p>A few month ago, the Executive Vice President of Nokia <a class="reference external" href="http://www.mobilecrunch.com/2010/09/22/nokia-evp-anssi-vanjoki-switching-to-android-is-like-peeing-in-your-pants-for-warmth/">announced</a> that
switching to Android is like peeing in your boots for warmth. Well, let me say
this: if switching to Android is like peeing in your boots, switching to
Windows is like shitting yourpants.</p>
<p>Perhaps, Nokia liked the latterbetter.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>How My Website Works</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/01/how-my-website-works"/>
            <updated>2011-01-22T21:18:00Z</updated>
            <published>2011-01-22T21:18:00Z</published>
            <id>http://honza.ca/2011/01/how-my-website-works</id>

            <content type="html">
                <div class="section" id="how-my-website-works">
<h1>How My WebsiteWorks</h1>
<p>I&#8217;m sure you&#8217;ve heard of static site generators like Jekyll (Ruby) or Hyde
(Python). The benefits are obvious - your site is hosted on a cheap shared
hosting and it can easily survive the Digg/Slashdot/Reddit effect. There is no
database latency - the browser requests a file on the server and gets it backimmediately.</p>
<div class="section" id="update-2011-02-27">
<h2>Update(2011-02-27):</h2>
<p>While I still use a static generator to power my site, it&#8217;s not a different
engine. I got tired of launching a django server just to write a post. I wrote
a new static site generator called <a class="reference external" href="https://github.com/honza/socrates">Socrates</a>. Each post is now a separate
file written in Markdown. Socrates then runs through those files and creates a
site for me. I&#8217;m still using django templates. What follows is the originalpost.</p>
</div>
<div class="section" id="django">
<h2>django</h2>
<p>The site is a simple django blog. There is nothing really of note when it comes
to django-specific coding. I run the django server locally when I&#8217;m editing or
adding articles. It provides a nice <span class="caps">UI</span>. It also lets me easily preview the site
without generatinganything.</p>
</div>
<div class="section" id="static-generator">
<h2>staticgenerator</h2>
<p>When I&#8217;m happy with the state of the website and want to publish it, I run the
static generator. It&#8217;s contained in the <tt class="docutils literal">generate.py</tt> file. It runs through
all possible urls and for each one it generates a static file. Each file is a
complete <span class="caps">HTML</span> page that the user&#8217;s browser will download. The folder structure
is asfollows:</p>
<div class="highlight"><pre>/2010/
    /02/
        post-one.html
        post-two.html
/2011/
    ..
        ..
/about/
    index.html
index.html
/page/
    /2/
        index.html
/category/
    /android/
        index.html
    /code/
        index.html
    ..
</pre></div>
<p>You get the idea. This way, with an <tt class="docutils literal">.htaccess</tt> file we can have the
following <span class="caps">URL</span>structure:</p>
<div class="highlight"><pre>/2010/02/post-one/
</pre></div>
</div>
<div class="section" id="ftp-deploy-script">
<h2><span class="caps">FTP</span> deployscript</h2>
<p>And the final piece is the <tt class="docutils literal">deploy.py</tt> script. It looks at the deploy
directory, and with a little help from git, it figures out what files were
changed since the last deploy. It then takes those files and throws them up on
the server. A normal sharedhosting.</p>
</div>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>You can check out the code on <a class="reference external" href="https://github.com/honza/honza.github.com">Github</a>.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Android Development disappointments</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/01/android-development-disappointments"/>
            <updated>2011-01-18T18:23:00Z</updated>
            <published>2011-01-18T18:23:00Z</published>
            <id>http://honza.ca/2011/01/android-development-disappointments</id>

            <content type="html">
                <div class="section" id="android-development-disappointments">
<h1>Android Developmentdisappointments</h1>
<p>The Android platform is the latest buzz in the smartphone world. I have
previously written on why I prefer Android over iPhone. In this article, we
will talk a little bit about what it&#8217;s like to develop native applications forAndroid.</p>
<p>Android <span class="caps">SDK</span> uses Java. I know Java but it&#8217;s not my favorite. After working with
Python and Django for months, going back to Java isn&#8217;t exactly easy. But it&#8217;s
not undoableeither.</p>
<p>Being from the Czech republic, I thought I would try to target the Czech
market. Android is starting to get really big over there. I decided to write a
simple news reader application for one of the leading news portals called iDnes
(&#8220;eToday&#8221;). The application downloads an <span class="caps">RSS</span> feed, parses it and displays a
list of news articles to the user. The user has the option to choose their
topic, and to manually refresh the application to get newarticles.</p>
<p>Not very complicated at all. It took me a few evenings to put it together. The
development process was quite fun. The Android <span class="caps">SDK</span> integration into Eclipse is
awesome. It tells you when you have to implement additional methods, or
automatically adds your imports when it&#8217;s needed. As part of the <span class="caps">SDK</span>, you get a
simulator for all kinds of versions of Android (from 1.5 to 2.2). This way, you
can test your application on various versions of the<span class="caps">API</span>.</p>
<p>I read all the articles on packaging and distributing. I made sure my
application was backwards compatible. I tried to follow their guidelines for
app icons as much as I could (well, I suck at graphic design). I exported the
applications, signed it, aligned it and uploaded it to the AndroidMarket.</p>
<p>I was excited. I did it. I published my first Android applications. But then
came thedisappointment.</p>
<p>My app started to get a lot of bad comments in the market. People complained
that the application didn&#8217;t do anything, and they couldn&#8217;t read any news, etc.
I didn&#8217;t come across any errors like that during testing. If the applications
doesn&#8217;t have internet, it will tell the user it doesn&#8217;t have internet. If there
is a problem, it will let themknow.</p>
<p>As a developer and author, I feel there is no way for me to receive helpful
information about the errors the users are getting when they are interacting
with theapplication.</p>
<p><span class="caps">OK</span>, that&#8217;s it. If you have any comments or suggestions, do let me know in thecomments.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Apple Finally Catches Up To Linux</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2011/01/apple-finally-catches-up-to-linux"/>
            <updated>2011-01-17T21:47:00Z</updated>
            <published>2011-01-17T21:47:00Z</published>
            <id>http://honza.ca/2011/01/apple-finally-catches-up-to-linux</id>

            <content type="html">
                <div class="section" id="apple-finally-catches-up-to-linux">
<h1>Apple Finally Catches Up ToLinux</h1>
<p>Apple recently unveiled their newest venture. It&#8217;s called the App Store, and
I&#8217;m sure you&#8217;ve heard of it. It&#8217;s a place on your computer that lets you
download and discover new applications. Just like the package manager on most
Linuxdistributions.</p>
<p>Except Linux has had &#8216;app stores&#8217; for years. Welcome to 21st century computing,Apple.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>How Money Is Made Online</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2010/12/how-money-is-made-online"/>
            <updated>2010-12-14T21:00:00Z</updated>
            <published>2010-12-14T21:00:00Z</published>
            <id>http://honza.ca/2010/12/how-money-is-made-online</id>

            <content type="html">
                <div class="section" id="how-money-is-made-online">
<h1>How Money Is MadeOnline</h1>
<p>My friends of the non-geek type often ask me how companies like Facebook can
make so much money and provide their service for free at the same time. Here is
a quick example of how you can make moneyonline.</p>
<p>Warning: this is a not a get rich quick scheme. I&#8217;m not going teach you how to
make millions working for Google fromhome.</p>
<p>I recently started following John Gruber&#8217;s blog <a class="reference external" href="http://daringfireball.net/">Darring Fireball</a>. This
gentleman seems to be rather influential in the hacker community. On the
website, he says that there are more than 400,000 subscribers that frequently
read his blog. In the world of Internet publishing, this is a great deal of
exposure. Not very many people get this muchattention.</p>
<p>If you browse through the site, you will soon notice that you can sponsor John
to write more articles. You can pay him $5,000/month - in return, a small
banner with your company&#8217;s advertising graphics will be displayed in a
prominent place on John&#8217;s blog for that month. You will get millions of people
every month looking at your ad for just$5,000/month.</p>
<p>Writing interesting articles about the web is a full-time job forJohn.</p>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Why I Chose Android</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2010/11/why-i-chose-android"/>
            <updated>2010-11-02T22:30:00Z</updated>
            <published>2010-11-02T22:30:00Z</published>
            <id>http://honza.ca/2010/11/why-i-chose-android</id>

            <content type="html">
                <div class="section" id="why-i-chose-android">
<h1>Why I ChoseAndroid</h1>
<p>Recently, we have heard that the Android operating system has the largest
market share in the <span class="caps">US</span>, and is set to take over the whole world. Personally, I
chose Android long before it was this popular.Why?</p>
<div class="section" id="background">
<h2>Background</h2>
<p>I won&#8217;t bore you with my personal history, but I&#8217;d like to say a few things.
I&#8217;m a programmer and like to tweet things. If there isn&#8217;t an application that
does the job, I write it myself. Couple years ago, I was given the then amazing
iPhone 3G. I was thrilled. Everyone wanted one, and I hadit.</p>
</div>
<div class="section" id="motorola-droid">
<h2>MotorolaDroid</h2>
<p>I sold the iPhone, and bought a Motorola Droid. Why? It&#8217;s actually pretty
simple. I don&#8217;t like closed systems. If you want to develop an application for
the iPhone, you have to buy an Apple computer. You have to use XCode, the
objective-C <span class="caps">IDE</span>. And only after your application gets approved, you can use it
on your phone. I don&#8217;t like the idea of spending an upwards of $1,000 to get an
underpowered machine just to be able to write anapp.</p>
</div>
<div class="section" id="blackberry">
<h2>Blackberry</h2>
<p>After deciding, I wanted to get off the iPhone train, I started looking around
for a new smartphone. The first choice was Blackberry. A serious Canadian
company, business-class smartphones, good prices, &#8230; What&#8217;s not to like? Well,
it turns out that you need Microsoft Windows in order to properly develop and
test your Blackberry application. Being an avid Linux user, I very much
disliked the idea of going back to Windows just because ofBlackberry.</p>
</div>
<div class="section" id="enter-android">
<h2>EnterAndroid</h2>
<p>Android was my next choice. I browsed over to the developers&#8217; website to see if
I can make apps for this platform. When I saw that Windows, Mac <span class="caps">OS</span> and Linux
were supported, I almost cried for joy! I learned that Android runs on the
Linux kernel, apps are written in Java using the open source<span class="caps">SDK</span>.</p>
</div>
<div class="section" id="google">
<h2>Google</h2>
<p>Yes, Google is behind this whole thing. You may not exactly care unless you use
their services. The integration of Google services into Android is phenomenal.
When you first turn on your device, you are asked to enter your Google account
information, and the device takes care of the rest. Your email, contacts,
calendar, Google Talk, etc. are set up automatically.Genius.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>How To Use Twitter OAuth On Android</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2010/09/how-to-use-twitter-oauth-on-android"/>
            <updated>2010-09-28T22:31:00Z</updated>
            <published>2010-09-28T22:31:00Z</published>
            <id>http://honza.ca/2010/09/how-to-use-twitter-oauth-on-android</id>

            <content type="html">
                <div class="section" id="how-to-use-twitter-oauth-on-android">
<h1>How To Use Twitter OAuth OnAndroid</h1>
<p>If you are developing an application for the Android platform, and you need to
interact with the Twitter <span class="caps">API</span>, you now have to use OAuth to authenticate the
user. In this article, we will have a look on how you can dothat.</p>
<div class="section" id="what-is-oauth">
<h2>What isOAuth?</h2>
<p>OAuth is a way of accessing a user&#8217;s data (e.g. tweets) without asking for the
user&#8217;s username and password. Your application opens the Twitter website which
will ask the user if they want to allow you to access their data. If they do,
they are taken back to the application and can start using it. You can find
more about OAuth all over theweb.</p>
</div>
<div class="section" id="prerequisites">
<h2>Prerequisites</h2>
<p>There are a couple of .jars that you will need for this towork.</p>
<ul class="simple">
<li>signpost-commonshttp4-1.2.1.1.jar</li>
<li>signpost-core-1.2.1.1.jar</li>
</ul>
<p>You can download them <a class="reference external" href="https://github.com/kaeppler/signpost">here</a>.</p>
</div>
<div class="section" id="basic-activity">
<h2>BasicActivity</h2>
<p>Let&#8217;s say we have an activity running where the user can start the
authentication process. There is nothing special about this activity, except
for some text and a button. When the user clicks the button, the OAuth process
will be started. From the button&#8217;s <tt class="docutils literal">onClickListener()</tt> we will call the
<tt class="docutils literal">startOAuth()</tt> method of ouractivity.</p>
<p>We will add a few attributes to our activity. Let&#8217;s call the activityMain.</p>
<div class="highlight"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">CommonsHttpOAuthConsumer</span> <span class="n">httpOauthConsumer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">OAuthProvider</span> <span class="n">httpOauthprovider</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">consumerKey</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">consumerSecret</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n"><span class="caps">CALLBACKURL</span></span> <span class="o">=</span> <span class="s">&quot;app://twitter&quot;</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="o">...</span>
<span class="o">}</span>
</pre></div>
<p><tt class="docutils literal">consumerKey</tt> and <tt class="docutils literal">consumerSecret</tt> will store your app&#8217;s unique keys that
you will get from Twitter. <tt class="docutils literal"><span class="caps">CALLBACK</span></tt> is a little different. This is used
when the application is authorized on the web, and the control is returned back
to the Main activity. For the mobile browser to be able to call the application
and tell it that the OAuth business has gone well, it needs a call back. Both
app and twitter can be exchanged for anythingelse.</p>
<p>Now let&#8217;s have a look at the <tt class="docutils literal">startOAuth()</tt> method.</p>
<div class="highlight"><pre><span class="k">try</span> <span class="o">{</span>
    <span class="n">httpOauthConsumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommonsHttpOAuthConsumer</span><span class="o">(</span><span class="n">consumerKey</span><span class="o">,</span> <span class="n">consumerSecret</span><span class="o">);</span>
    <span class="n">httpOauthprovider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultOAuthProvider</span><span class="o">(</span><span class="s">&quot;http://twitter.com/oauth/request_token&quot;</span><span class="o">,</span>
                                            <span class="s">&quot;http://twitter.com/oauth/access_token&quot;</span><span class="o">,</span>
                                            <span class="s">&quot;http://twitter.com/oauth/authorize&quot;</span><span class="o">);</span>
    <span class="n">String</span> <span class="n">authUrl</span> <span class="o">=</span> <span class="n">httpOauthprovider</span><span class="o">.</span><span class="na">retrieveRequestToken</span><span class="o">(</span><span class="n">httpOauthConsumer</span><span class="o">,</span> <span class="n"><span class="caps">CALLBACKURL</span></span><span class="o">);</span>
    <span class="c1">// Open the browser</span>
    <span class="n">startActivity</span><span class="o">(</span><span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_VIEW</span><span class="o">,</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">authUrl</span><span class="o">)));</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
<span class="o">}</span>
</pre></div>
<p>Here we create the necessary OAuth objects which will in turn generate the
unique authenticating <span class="caps">URL</span>. Once we have the <span class="caps">URL</span> we open the browser and point
it to that <span class="caps">URL</span>. The user will be presented with a dialog asking them to allow
or to deny your applicationaccess.</p>
<p>In order for our activity to be able to receive the callback, we need to add a
few things the Android manifest file. Change the applications definition to thefollowing:</p>
<div class="highlight"><pre><span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;Main&quot;</span> <span class="na">android:launchMode=</span><span class="s">&quot;singleInstance&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;intent-filter&gt;</span>
         <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.<span class="caps">VIEW</span>&quot;</span> <span class="nt">/&gt;</span>
         <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.<span class="caps">DEFAULT</span>&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.<span class="caps">BROWSABLE</span>&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;app&quot;</span> <span class="na">android:host=</span><span class="s">&quot;twitter&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/intent-filter&gt;</span>
<span class="nt">&lt;/activity&gt;</span>
</pre></div>
<p>Note that if you changed the app and twitter in the <tt class="docutils literal"><span class="caps">CALLBACK</span></tt> variable
above, you will need to make sure that the change is reflected here. This
basically allows the activity to receive data from a foreign source - ourbrowser.</p>
<p>Now we need to catch the callback and handle it. We do that by overriding the
<tt class="docutils literal">onNewIntent()</tt> method of our Mainactivity.</p>
<div class="highlight"><pre><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onNewIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onNewIntent</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>

    <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>

    <span class="c1">//Check if you got NewIntent event due to Twitter Call back only</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">uri</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="n"><span class="caps">CALLBACKURL</span></span><span class="o">))</span> <span class="o">{</span>

        <span class="n">String</span> <span class="n">verifier</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getQueryParameter</span><span class="o">(</span><span class="n">oauth</span><span class="o">.</span><span class="na">signpost</span><span class="o">.</span><span class="na">OAuth</span><span class="o">.</span><span class="na">OAUTH_VERIFIER</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// this will populate token and token_secret in consumer</span>

            <span class="n">httpOauthprovider</span><span class="o">.</span><span class="na">retrieveAccessToken</span><span class="o">(</span><span class="n">httpOauthConsumer</span><span class="o">,</span> <span class="n">verifier</span><span class="o">);</span>
            <span class="n">String</span> <span class="n">userKey</span> <span class="o">=</span> <span class="n">httpOauthConsumer</span><span class="o">.</span><span class="na">getToken</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">userSecret</span> <span class="o">=</span> <span class="n">httpOauthConsumer</span><span class="o">.</span><span class="na">getTokenSecret</span><span class="o">();</span>

            <span class="c1">// Save user_key and user_secret in user preferences and return</span>

            <span class="n">SharedPreferences</span> <span class="n">settings</span> <span class="o">=</span> <span class="n">getBaseContext</span><span class="o">().</span><span class="na">getSharedPreferences</span><span class="o">(</span><span class="s">&quot;your_app_prefs&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
            <span class="n">SharedPreferences</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span> <span class="o">=</span> <span class="n">settings</span><span class="o">.</span><span class="na">edit</span><span class="o">();</span>
            <span class="n">editor</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;user_key&quot;</span><span class="o">,</span> <span class="n">userKey</span><span class="o">);</span>
            <span class="n">editor</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;user_secret&quot;</span><span class="o">,</span> <span class="n">userSecret</span><span class="o">);</span>
            <span class="n">editor</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>

        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>

        <span class="o">}</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="c1">// Do something if the callback comes from elsewhere</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></div>
<p><span class="caps">OK</span>, there&#8217;s quite a bit there. We extract the data that the browser sent back
to us. This data is used to verify that the authentication was successful and
that we can now access the user&#8217;s data. From the data, we get the user&#8217;s key
and their secret. We save that into the application&#8217;s shared preferences file
andreturn.</p>
<p>Now we are good to go. We can make authenticated requests to Twitter <span class="caps">API</span> on
behalf of theuser.</p>
<p>For example, to get the user&#8217;s home timeline, you would do somethinglike:</p>
<div class="highlight"><pre><span class="n">HttpGet</span> <span class="n">get</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">&quot;http://api.twitter.com/version/statuses/home_timeline.json&quot;</span><span class="o">);</span>
<span class="n">HttpParams</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicHttpParams</span><span class="o">();</span>
<span class="n">HttpProtocolParams</span><span class="o">.</span><span class="na">setUseExpectContinue</span><span class="o">(</span><span class="n">params</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
<span class="n">get</span><span class="o">.</span><span class="na">setParams</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
<span class="c1">// sign the request to authenticate</span>
<span class="n">httpOauthConsumer</span><span class="o">.</span><span class="na">sign</span><span class="o">(</span><span class="n">get</span><span class="o">);</span>
<span class="n">String</span> <span class="n">responsex</span> <span class="o">=</span> <span class="n">mClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">get</span><span class="o">,</span> <span class="k">new</span> <span class="n">BasicResponseHandler</span><span class="o">());</span>
<span class="n">JSONArray</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONArray</span><span class="o">(</span><span class="n">responsex</span><span class="o">);</span>
</pre></div>
<p>And the array variable is a list of the latest tweets in the user&#8217;s hometimeline.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Posterous-style Blogging On App Engine</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2010/07/posterous-style-blogging-on-app-engine"/>
            <updated>2010-07-07T22:00:00Z</updated>
            <published>2010-07-07T22:00:00Z</published>
            <id>http://honza.ca/2010/07/posterous-style-blogging-on-app-engine</id>

            <content type="html">
                <div class="section" id="posterous-style-blogging-on-app-engine">
<h1>Posterous-style Blogging On AppEngine</h1>
<p>Posterous has been getting a lot of attention lately. Its simplicity appeals to
a wide range of users and more and more users are switching over from other
well-established blogging platforms such as Blogger or WordPress. In this
article, we will have a look at how you can replicate the Posterous
functionality on AppEngine.</p>
<p>In case you don&#8217;t know what Posterous is, it&#8217;s very simple. It&#8217;s a blogging
tool like Google&#8217;s Bloggeror Wordpress.com. What makes it different from the
other services is its ridiculous simplicity. With Posterous, you don&#8217;t need to
create an account. That&#8217;s because you create new posts by emailing your post to
Posterous. It creates links for you, images sent as attachments will be
transformed into galleries,etc.</p>
<p>I like Posterous, but my website has a lot of custom programming on the
back-end so I&#8217;m very hesitant to switch over. And besides, I like to know how
things work behind the scenes. I thought it might be fun to create a system
similar to Posterous&#8217; for my own blog which is, of course, hosted on AppEngine.</p>
<p>Here is what we are going to do. I want to be able to send an email to my own
blog and have it turn it into a post and publish it to theblog.</p>
<p><span class="caps">OK</span>, let&#8217;s start with the postmodel:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">StringProperty</span><span class="p">()</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">TextProperty</span><span class="p">()</span>
    <span class="n">added</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">DateTimeProperty</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">StringProperty</span><span class="p">()</span>
</pre></div>
<p>Very straight forward. You have your title, body, author and when the post waspublished.</p>
<p>In order to enable incoming email, you need to add a couple of lines of code to
your <tt class="docutils literal">app.yaml</tt> file. In addition to your regular handlers, add thefollowing:</p>
<div class="highlight"><pre><span class="l-Scalar-Plain">inbound_services</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mail</span>

<span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/_ah/mail/.+</span>
  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main.py</span>
</pre></div>
<p>The first line enables incoming email for your application. The second part is
the important part. On App Engine, an incoming email message is processed as a
<span class="caps">HTTP</span> <span class="caps">POST</span> request. Since it&#8217;s a regular <span class="caps">HTTP</span> request, we will need a handler
for it in the <tt class="docutils literal">app.yaml</tt> file. You have several options here. You can create
a catch-all handler for all incoming email addresses (like I&#8217;ve done above), or
create seperate handlers for differentaddresses.</p>
<p>The email address that we will use is in the following format:
<a class="reference external" href="mailto:your_string&#64;appid.appspotmail.com">your_string&#64;appid.appspotmail.com</a>. You should substitute the appid with your
app&#8217;s <span class="caps">ID</span>. The string before the &#8216;&#64;&#8217; symbol can be set to anything youwant.</p>
<p>With this out of the way, we are ready to write the actual email handler. This
will go into your <tt class="docutils literal">main.py</tt> file which you defined in the <tt class="docutils literal">app.yaml</tt>.</p>
<p>First, someimports:</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">email</span>
<span class="kn">from</span> <span class="nn">google.appengine.ext.webapp.mail_handlers</span> <span class="kn">import</span> <span class="n">InboundMailHandler</span>
</pre></div>
<p>Then, you add the following to the list of <span class="caps">URL</span> mappings in the instantiation of
the applicationclass.</p>
<div class="highlight"><pre><span class="n">application</span> <span class="o">=</span> <span class="n">webapp</span><span class="o">.</span><span class="n">WSGIApplication</span><span class="p">([</span>
    <span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="n">Index</span><span class="p">),</span>
    <span class="n">EmailHandler</span><span class="o">.</span><span class="n">mapping</span><span class="p">()</span>
    <span class="p">],</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></div>
<p>Here EmailHandler is the request handler class that will handle the incoming
email. The <tt class="docutils literal">mapping()</tt> method will map all of the addresses and send all of
them to this handler class. It&#8217;s just a convenience method, no magichere.</p>
<p>Now, finally, onto the actualhandler:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">EmailHandler</span><span class="p">(</span><span class="n">InboundMailHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">receive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mail_message</span><span class="p">):</span>
        <span class="n">post</span> <span class="o">=</span> <span class="n">Post</span><span class="p">()</span>
        <span class="n">post</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">mail_message</span><span class="o">.</span><span class="n">subject</span>
        <span class="k">for</span> <span class="n">content_type</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">mail_message</span><span class="o">.</span><span class="n">bodies</span><span class="p">():</span>
            <span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
        <span class="n">post</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="s">&#39;John Smith&#39;</span>
        <span class="n">post</span><span class="o">.</span><span class="n">put</span><span class="p">()</span>
</pre></div>
<p>This is actually very simple. The incoming email message is saved in the
<tt class="docutils literal">mail_message</tt> variable and you can access all of the usual email metadata as
its properties (e.g. mail_message.sender). So, we create a new post, take the
email&#8217;s subject and set it as the post&#8217;s title. The <tt class="docutils literal">bodies()</tt> method
extracts the body of the email and the <tt class="docutils literal">decode()</tt> function will decode the
actual body. Then we set the author and save the post in thedatastore.</p>
<p>Often you will want to include a link in your post, or create a list. This is
easily accomplished with <span class="caps">HTML</span> tags. However, <span class="caps">HTML</span> tags are a pain, so you might
want to use something likeMarkdown.</p>
<p>Adding markdown support is super easy. Download the Python
<a class="reference external" href="http://code.google.com/p/python-markdown2/">Markdown library</a> and put the <tt class="docutils literal">markdown2.py</tt> file in your app&#8217;s root
directory. Then import it in your <tt class="docutils literal">main.py</tt> file.</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">markdown2</span>
</pre></div>
<p>And change the followingline:</p>
<div class="highlight"><pre><span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</pre></div>
<p>tothis:</p>
<div class="highlight"><pre><span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">markdown2</span><span class="o">.</span><span class="n">markdown</span><span class="p">(</span><span class="n">body</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
</pre></div>
<p>And that&#8217;sit!</p>
<div class="section" id="conclusion">
<h2>Conclusion</h2>
<p>This is a very simple yet effective technique and it will allow you to create
post from anywhere. I hope you&#8217;ve enjoyed the post. Let me know if you have any
suggestions on how to improveit.</p>
</div>
<div class="section" id="code">
<h2>Code</h2>
<p>The complete code for this app is available on <a class="reference external" href="https://github.com/honza/Posterous-App-Engine">Github</a>.</p>
</div>
</div>

            </content>
        </entry>
    
        <entry>
            <title>Twitter Success Story - Hurricane Bill</title>
            <author><name>Honza Pokorny</name></author>
            <link href="http://honza.ca/2010/06/twitter-success-story-hurricane-bill"/>
            <updated>2010-06-02T21:00:00Z</updated>
            <published>2010-06-02T21:00:00Z</published>
            <id>http://honza.ca/2010/06/twitter-success-story-hurricane-bill</id>

            <content type="html">
                <div class="section" id="twitter-success-story-hurricane-bill">
<h1>Twitter Success Story - HurricaneBill</h1>
<p>Beginners often find Twitter very confusing and useless. I think it&#8217;s because
they come to it with some preconceived ideas, and when Twitter doesn&#8217;t fit
their model they get frustrated. This series is meant to show why Twitter is so
useful and how it&#8217;s different from other socialnetworks.</p>
<p>My family and I live in the city of Aberdeen in Scotland. My wife is originally
from Halifax, Canada where her parents still live. In August of last year,
there was a hurricane threat to the Halifax area. The hurricane was slowly
making its way up the coast towards Halifax, and was to strike the city around
8:<span class="caps">00AM</span> on a Sunday morning. Naturally, we were in touch with my in-laws and
kept checking news sites forupdates.</p>
<p>However, as you might expect the news companies were closed (or at least on
limited staff) on that Sunday morning. We googled and googled and couldn&#8217;t find
any updates on the hurricane. Did it hit the city? Is it serious? Has
electricity been cutoff?</p>
<p>Twitter is a source of real-time information. With the right query, you can get
updates and news just about anything. So, I searched for &#8220;hurricane bill
halifax&#8221; and just watched the tweets come in. At first, there wasn&#8217;t much. But
as time went by, people started talking about the hurricane. Some were saying
that the sky is a bit darker, some were seeing a little rain, etc. I even found
one user who actually went to the Halifax harbour to watch the hurricane come
in. He was posting images from his cell phone to show us what the weather waslike.</p>
<p>Thanks to Twitter we were able to follow the development of the hurricane
almost minute by minute. In the end, there wasn&#8217;t much of hurricane after all.
By the time it got to Halifax, it had reduced to a merestorm.</p>
</div>

            </content>
        </entry>
    
</feed>